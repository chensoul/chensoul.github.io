<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on ChenSoul</title><link>https://blog.chensoul.cc/posts/</link><description>Recent content in Posts on ChenSoul</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 31 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.chensoul.cc/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Canal原理、安装和测试</title><link>https://blog.chensoul.cc/posts/2025/03/31/canal-install-test/</link><pubDate>Mon, 31 Mar 2025 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2025/03/31/canal-install-test/</guid><description>&lt;p>Canal 是阿里巴巴开源的一款分布式增量数据同步工具，主要用于基于 MySQL 数据库的增量日志 Binlog 解析，提供增量数据的订阅和消费。&lt;/p>
&lt;p>Canal github 地址：https://github.com/alibaba/canal，目前最新版本为 &lt;a href="https://github.com/alibaba/canal/releases/tag/canal-1.1.8" target="_blank">1.1.8&lt;/a>，当前的 canal 支持源端 MySQL 版本包括 5.1.x、5.5.x 、5.6.x、5.7.x、8.0.x。&lt;/p></description></item><item><title>常见分布式 ID 解决方案</title><link>https://blog.chensoul.cc/posts/2025/03/28/id-generator/</link><pubDate>Fri, 28 Mar 2025 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2025/03/28/id-generator/</guid><description>&lt;p>分布式 ID 的生成是分布式系统中的一个核心问题，需要确保生成的 ID 全局唯一、性能高效，并且能够适应高并发和大规模的场景。以下是一些常见的分布式 ID 生成方案：&lt;/p>
&lt;ol>
&lt;li>UUID&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;strong>原理&lt;/strong>：UUID（Universally Unique Identifier）是一种通过一系列算法生成的128位数字，通常基于时间戳、计算机硬件标识符、随机数等元素。&lt;/li>
&lt;li>&lt;strong>优点&lt;/strong>：实现简单，无需网络交互，保证全局唯一性。&lt;/li>
&lt;li>&lt;strong>缺点&lt;/strong>：ID 较长（36个字符的字符串形式），可能导致存储和索引效率低下，且通常不能保证顺序性。&lt;/li>
&lt;li>&lt;strong>适用场景&lt;/strong>：适用于对唯一性要求高，但对性能和存储空间要求不敏感的场景。&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>NanoID&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>原理&lt;/strong>：NanoID 是一个轻量级、安全、URL 友好的唯一字符串 ID 生成器。它使用加密安全的随机数生成器，确保生成的 ID 足够随机和安全。&lt;/p></description></item><item><title>如何实现榜单 top N 统计</title><link>https://blog.chensoul.cc/posts/2025/02/17/top-n-using-redis/</link><pubDate>Mon, 17 Feb 2025 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2025/02/17/top-n-using-redis/</guid><description>&lt;p>以下是一个基于本地缓存 + Redis ZSet + 定时任务的榜单方案，适用于高并发场景：&lt;/p>
&lt;h2 id="方案概述">方案概述&lt;/h2>
&lt;ol>
&lt;li>&lt;strong>本地缓存&lt;/strong> ：在应用服务器本地缓存榜单数据，减少对 Redis 的访问频率，提高读取速度。&lt;/li>
&lt;li>&lt;strong>Redis ZSet&lt;/strong> ：使用 Redis 的有序集合存储榜单数据，利用其高效的排序和范围查询功能。&lt;/li>
&lt;li>&lt;strong>定时任务&lt;/strong> ：定期更新本地缓存和 Redis ZSet 中的榜单数据，确保数据的实时性和准确性。&lt;/li>
&lt;/ol>
&lt;h2 id="数据存储架构">数据存储架构&lt;/h2>
&lt;p>&lt;strong>全局前 1000 名榜单存储在 Redis 中&lt;/strong>&lt;/p></description></item><item><title>什么是限流</title><link>https://blog.chensoul.cc/posts/2025/02/14/rate-limit/</link><pubDate>Fri, 14 Feb 2025 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2025/02/14/rate-limit/</guid><description>&lt;h2 id="基本概念">基本概念&lt;/h2>
&lt;p>在互联网领域，限流是指对进入系统的请求数量或频率进行控制的一种机制，以防止系统因流量暴增而过载，从而保障系统的稳定性和可用性。&lt;/p>
&lt;h2 id="限流目的">限流目的&lt;/h2>
&lt;ol>
&lt;li>防止系统过载：控制请求速率，避免突发流量导致系统崩溃。&lt;/li>
&lt;li>资源保护：合理分配系统资源，防止某些请求占用过多资源影响其他请求。&lt;/li>
&lt;li>防止恶意攻击：通过限制请求频率，抵御DDoS等恶意攻击。&lt;/li>
&lt;li>保障服务质量：确保系统能为每个请求提供稳定、可靠的服务。&lt;/li>
&lt;li>削峰填谷：在访问高峰期平滑请求曲线，将超出系统承载能力的请求延后处理或拒绝。&lt;/li>
&lt;li>成本控制：对于按量计费的云服务，限流可以有效控制成本。&lt;/li>
&lt;li>公平竞争：确保不同用户或应用程序之间公平地使用系统资源。&lt;/li>
&lt;/ol>
&lt;h2 id="应用场景">应用场景&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>保护后端服务&lt;/strong> ：在高并发环境下，后端服务可能无法承受大量请求，限流有助于防止服务崩溃。&lt;/li>
&lt;li>&lt;strong>防止 DDoS 攻击&lt;/strong> ：DDoS 攻击通过大量伪造请求涌入系统，造成系统无法响应。限流可以有效缓解这种 DDoS 攻击。&lt;/li>
&lt;li>&lt;strong>优化用户体验&lt;/strong> ：通过控制请求频率，避免单个用户或客户端频繁请求系统，从而提升其他用户的访问体验。&lt;/li>
&lt;li>&lt;strong>流量控制&lt;/strong> ：在某些情况下，系统需要根据当前负载情况动态调整可接受的请求量，避免资源浪费或系统崩溃。&lt;/li>
&lt;/ul>
&lt;h2 id="限流算法">限流算法&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>计数器算法&lt;/strong> ：通过维护一个计数器来限制在特定时间间隔内的请求数量。该算法在固定时间窗口内对请求进行计数，当请求数超过设定阈值时，则进行限流处理。
&lt;ul>
&lt;li>原理：在固定时间窗口内限制请求数量。&lt;/li>
&lt;li>优点：实现起来非常简单，逻辑也很直观，易于理解。而且性能高效，因为计数器的操作速度很快，对系统性能的影响很小，内存占用也低，只需维护一个计数器。&lt;/li>
&lt;li>缺点：
&lt;ul>
&lt;li>&lt;strong>缺乏流量整形机制&lt;/strong>，不能确保请求能够连续、平滑地传递到下游服务。这是因为固定窗口计数器算法的放行速率和流量的涌入速率是相同的，所以在处理不规则或者突发流量时，它的效果就不佳。&lt;/li>
&lt;li>&lt;strong>对突发流量的容忍性也比较差&lt;/strong>。如果设置的时间窗口是10秒，阈值是100个请求，那在前1秒内涌入100个请求后，接下来的9s不会再放行请求。即使系统可能在第5秒已经处于空闲状态，具备处理新请求的能力，也只能等到下一个限流周期才行。相比之下漏桶、令牌桶则灵活的多，更能容忍突发流量。&lt;/li>
&lt;li>&lt;strong>窗口边界容易出现过载问题&lt;/strong>。固定窗口算法将时间划分为固定大小的窗口，这种机制在窗口边界可能引发突发请求流量，导致系统的瞬时负载超过预期。比如假设阈值是100个请求，时间窗口是2秒。在当前窗口的最后1秒可能就有100个请求，而在下一个窗口的前1秒又有100个请求。单看窗口，好像限流策略成功，但如果跨越窗口之间来看，实际上在2秒内通过的请求数量可能达到200个，而不是预期的100个。可以用滑动窗口限流算法来解决这个问题。&lt;/li>
&lt;li>&lt;strong>设置恰当的阈值也很难&lt;/strong>。如果阈值设置得过高，系统可能会允许太多请求在短时间内通过，导致负载过重。而如果设置得过低，系统就会频繁拒绝用户请求，这不仅影响用户体验，还有可能浪费宝贵的系统资源。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>适用场景：
&lt;ul>
&lt;li>对请求数量要求不严格的简单限流场景。&lt;/li>
&lt;li>适合资源受限的系统，如内存或处理能力有限的环境。&lt;/li>
&lt;li>不适用于对突发流量敏感或需要精确控制的场景。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>滑动窗口算法&lt;/strong> ：是一种基于时间窗口的限流策略，核心思想是&lt;strong>动态跟踪最近一段时间内的请求数量&lt;/strong>，以适应不均匀的流量，从而有效避免了固定窗口算法所存在的窗口边界问题，同时保持较低的内存开销。
&lt;ul>
&lt;li>原理：将时间窗口细分，动态滑动，提供更平滑的限流效果。&lt;/li>
&lt;li>优点：解决了固定窗口的窗口边界问题：滑动窗口算法通过持续监控和计算时间段内的请求，减少了由于时间窗口结束而导致的请求突然集中涌入的情况。。&lt;/li>
&lt;li>缺点：
&lt;ul>
&lt;li>&lt;strong>缺乏流量整形机制，无法实现平滑限流&lt;/strong>：滑动窗口算法没有流量整形机制，无法确保请求连续、平滑地传递到下游服务。由于滑动窗口算法放行的速率与流量涌入的速率相同，它无法有效管理不规则或突发的流量。流量整形是指针对突发流量进行管理，通过预设的速率稳定地输出请求，以确保发送到后端系统的流量保持在可接受的范围内，从而避免对后端造成冲击。&lt;/li>
&lt;li>&lt;strong>难以设置恰当的阀值&lt;/strong>：如果设置的阀值过高，系统可能会允许过多的请求在短时间内通过，从而导致负载过重。另一方面，如果阀值设置过低，系统将频繁拒绝用户请求，影响用户体验，并浪费宝贵的系统资源。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>适用场景：
&lt;ul>
&lt;li>对请求数量要求不严格的简单限流场景。&lt;/li>
&lt;li>适合资源受限的系统，如内存或处理能力有限的环境。&lt;/li>
&lt;li>不适用于对突发流量敏感或需要精确控制的场景。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>漏桶算法&lt;/strong> ：是一种经典的限流算法，它的核心思想是将请求放入一个固定容量的“桶”中，桶以固定的速率“漏水”（即处理请求）。如果桶满了，则新的请求会被拒绝或排队等待。
&lt;ul>
&lt;li>原理：请求先进入桶中，然后以固定速率处理，超出桶容量的请求被丢弃。&lt;/li>
&lt;li>优点：
&lt;ul>
&lt;li>简单直观：基于桶的模型，算法相对简单，容易实现。&lt;/li>
&lt;li>平滑限流：能够将突发的高峰流量平滑处理，避免对下游系统的瞬时冲击。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>缺点：
&lt;ul>
&lt;li>&lt;strong>延迟响应请求&lt;/strong>：在高流量情况下，请求必须排队等待，可能导致用户体验下降。&lt;/li>
&lt;li>&lt;strong>难以设置恰当的限流阀值&lt;/strong>：如果设置的限流阀值过高，也就是桶的容量过大，那么排队的请求可能超时或者延迟响应，影响用户体验。如果桶的容量过小，那么系统将频繁拒绝用户请求，影响用户体验。&lt;/li>
&lt;li>&lt;strong>难以设置恰当的输出速率&lt;/strong>： 如果设置的漏水速率过高，可能导致下游服务过载。如果设置的漏水速率过低，漏桶缓存请求增加，漏桶满后会频繁拒绝用户请求，影响用户体验。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>适用场景：
&lt;ul>
&lt;li>API限流：防止短时间内接收到过量请求，保护后端服务。&lt;/li>
&lt;li>网络流量控制：管理带宽，确保数据传输的稳定性。&lt;/li>
&lt;li>任务调度：确保任务在执行时保持平稳的速率。&lt;/li>
&lt;li>高并发请求处理：如高并发的Web应用程序，漏桶算法能够平稳处理大量请求。&lt;/li>
&lt;li>服务高可用：控制访问第三方服务的速度，防止压垮下游。控制服务自身的处理速度，方式过载。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>令牌桶算法&lt;/strong> ：一种基于固定容量桶模型的算法，特点是如果请求进入系统的速率超过令牌的生成速率，或者如果一次进入的请求数量超过桶中的令牌数，则请求被限流。它通过动态限制请求进入系统的速率来实现限流，比如，令牌的生成速率是2个/s，桶的容量是10，那么请求进入系统进入的最大速率是10个/s，平均速率2个/s。
&lt;ul>
&lt;li>原理：令牌桶算法的基本构思是使用一个“桶”，其中存放了“令牌”，每个令牌允许处理一个请求。系统以固定的速率向这个桶中生成令牌，直到达到最大的桶容量。如果桶已满，新生成的令牌将会被丢弃。由于令牌可以在桶中累积，这使得算法在遭遇短时间内的请求高峰时，依旧能够保持一定的处理能力。&lt;/li>
&lt;li>优点：
&lt;ul>
&lt;li>&lt;strong>容忍突发流量&lt;/strong>：令牌桶算法能够在一定程度上应对突发流量，当请求量增加时,桶中的令牌会被快速消耗,但只要有新的令牌不断被添加,系统就能够持续处理请求。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>缺点：
&lt;ul>
&lt;li>&lt;strong>实现复杂&lt;/strong>：令牌桶算法的实现和管理需要占用一定的内存和CPU资源。&lt;/li>
&lt;li>&lt;strong>未实现平滑限流&lt;/strong>：令牌桶算法缺少流量整形机制，如果桶容量设置的不好，高峰流量会对下游系统造成瞬时冲击。&lt;/li>
&lt;li>&lt;strong>难以设置恰当的限流阀值&lt;/strong>：如果设置的限流阀值过高，也就是桶的容量过大，当桶满时，突发流量都被允许通过，会导致下游系统过载。如果桶的容量过小，那么系统将频繁拒绝用户请求，系统资源未被充分利用，同时也影响用户体验。&lt;/li>
&lt;li>&lt;strong>难以设置恰当的填充速率&lt;/strong>： 如果设置的令牌生成速率过高，可能导致下游服务过载。如果设置的令牌生成速率过低，会频繁拒绝用户请求，影响用户体验。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>适用场景：
&lt;ul>
&lt;li>API限流：有效控制API的访问速率，防止系统过载。&lt;/li>
&lt;li>网络流量管理：在网络设备中限制带宽使用，能够容忍网络抖动，保障公平性和服务质量。&lt;/li>
&lt;li>服务高可用：控制访问第三方服务的速度，防止压垮下游。控制服务自身的处理速度，方式过载。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="拒绝策略">拒绝策略&lt;/h2>
&lt;p>当请求超过限流阈值时，系统可以采取不同的拒绝策略：&lt;/p></description></item><item><title>区分偶发性超时和频繁超时的重试策略</title><link>https://blog.chensoul.cc/posts/2025/02/14/retry-for-timeout/</link><pubDate>Fri, 14 Feb 2025 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2025/02/14/retry-for-timeout/</guid><description>&lt;p>在实际项目中，区分偶发性超时和频繁超时的重试策略非常重要。偶发性超时可能是由于网络抖动或临时负载过高引起的，适合立即重试；而频繁超时则可能是系统过载或下游服务不可用，此时应避免重试，以免加剧问题。&lt;/p>
&lt;p>在实际面试的过程中，经常会遇到类似的面试题目，这时候可以这样回答：&lt;/p>
&lt;blockquote>
&lt;p>在处理大量请求时，我们经常会遇到超时的情况。为了合理控制重试行为，避免所谓的“重试风暴”，我设计了一个基于时间窗口的算法。在这个算法中，我们维护了一个滑动窗口，窗口内记录了每个请求的时间戳以及该请求是否超时。每当一个请求超时后，我们会统计窗口内超时的请求数量。如果超时请求的数量超过了设定的阈值，我们就认为当前系统压力较大，不适合进行重试；否则，我们认为可以安全地进行重试。&lt;/p>
&lt;p>然而，随着并发量的增加，普通版的滑动窗口算法暴露出了一些问题。特别是在高并发场景下，窗口内需要维护的请求数量可能非常大，这不仅占用了大量内存，而且在判定是否需要重试时还需要遍历整个窗口，这大大增加了算法的时间复杂度。&lt;/p>
&lt;p>为了解决这个问题，我们进一步设计了进阶版的算法。在这个版本中，我们引入了ring buffer 来优化滑动窗口的实现。具体来说，我们不再以时间为窗口大小，而是使用固定数量的比特位来记录请求的超时信息。每个比特位对应一个请求，用1表示超时，用0表示未超时。当所有比特位都被标记后，我们从头开始再次标记。&lt;/p>
&lt;p>这种设计极大地降低了内存占用，因为无论并发量多高，我们只需要固定数量的比特位来记录请求的超时状态。同时，在判定是否需要重试时，我们只需要统计ring buffer中为1的比特数量，这大大简化了算法的实现并提高了效率。&lt;/p></description></item><item><title>2024年我的付费软件</title><link>https://blog.chensoul.cc/posts/2024/12/31/til/</link><pubDate>Tue, 31 Dec 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/12/31/til/</guid><description>&lt;p>2024 年的付费软件：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>TablePlus：&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Typora：&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ICloud：每月 6 元&lt;/p>
&lt;/li>
&lt;li>
&lt;p>B 站大会员：每月 15 元&lt;/p></description></item><item><title>2024-12-27｜今天我做了什么</title><link>https://blog.chensoul.cc/posts/2024/12/27/til/</link><pubDate>Fri, 27 Dec 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/12/27/til/</guid><description>&lt;p>今天我做了什么？&lt;/p>
&lt;ul>
&lt;li>
&lt;p>更新文章 &lt;a href="https://blog.chensoul.cc/posts/2023/01/25/notes-about-deploy-services-in-vps/">我的VPS服务部署记录&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>使用 docker 部署 &lt;a href="https://github.com/Finb/Bark" target="_blank">Bark&lt;/a>、&lt;a href="https://github.com/plankanban/planka" target="_blank">Planka&lt;/a>、&lt;a href="https://github.com/hoarder-app/hoarder" target="_blank">Hoarder&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将 memos 中的书签导入 hoarder，并将 memos 版本退回到 0.21.0 ，因为 0.21.0 之后的版本去掉了分享功能。同时需要修改 memos api，同步修改 &lt;a href="https://github.com/chensoul/chensoul/blob/main/fetch_memos.py" target="_blank">fetch_memos.py&lt;/a> 文件，将 &lt;a href="https://memos.chensoul.cc/api/v1/memos" target="_blank">https://memos.chensoul.cc/api/v1/memos&lt;/a> 改为 &lt;a href="https://memos.chensoul.cc/api/v2/memos" target="_blank">https://memos.chensoul.cc/api/v2/memos&lt;/a>&lt;/p></description></item><item><title>ThingsBoard源码中的Github Actions</title><link>https://blog.chensoul.cc/posts/2024/12/03/github-actions-in-thingsboard/</link><pubDate>Tue, 03 Dec 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/12/03/github-actions-in-thingsboard/</guid><description>&lt;p>ThingsBoard 源码地址：&lt;a href="https://github.com/thingsboard/thingsboard" target="_blank">https://github.com/thingsboard/thingsboard&lt;/a>，其 .github/workflows 目录下面有两个文件：&lt;/p>
&lt;ul>
&lt;li>&lt;code>check-configuration-files.yml&lt;/code>：使用 python 脚本校验 yaml 文件&lt;/li>
&lt;li>&lt;code>license-header-format.yml&lt;/code>：是给文件添加 license 并提交代码到 git 仓库&lt;/li>
&lt;/ul>
&lt;h2 id="check-configuration-filesyml">check-configuration-files.yml&lt;/h2>
&lt;p>check-configuration-files.yml&lt;/p></description></item><item><title>ThingsBoard源码中的Security</title><link>https://blog.chensoul.cc/posts/2024/12/03/security-in-thingsboard/</link><pubDate>Tue, 03 Dec 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/12/03/security-in-thingsboard/</guid><description>&lt;p>ThingsBoard 源码地址：&lt;a href="https://github.com/thingsboard/thingsboard" target="_blank">https://github.com/thingsboard/thingsboard&lt;/a>，启动成功之后，使用系统管理员： &lt;a href="mailto:sysadmin@thingsboard.org">sysadmin@thingsboard.org&lt;/a> / sysadmin 进行登陆。&lt;/p>
&lt;h2 id="设置和安全">设置和安全&lt;/h2>
&lt;p>登陆系统之后，点击左边的设置和安全菜单，进行相应的配置。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>设置 -&amp;gt; 基本设置、发送邮件、通知&lt;/p></description></item><item><title>2024-11-14-Quarkus 快速入门</title><link>https://blog.chensoul.cc/posts/2024/11/14/quarkus-quick-start/</link><pubDate>Thu, 14 Nov 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/11/14/quarkus-quick-start/</guid><description>&lt;h2 id="使用--quarkus-cli-创建项目">使用 Quarkus CLI 创建项目&lt;/h2>
&lt;ol>
&lt;li>使用 sdk 安装&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sdk install quarkus
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>创建应用&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>quarkus create &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> cd code-with-quarkus
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>出现异常：&lt;/p></description></item><item><title>2024-11-13｜今天我做了什么</title><link>https://blog.chensoul.cc/posts/2024/11/13/til/</link><pubDate>Wed, 13 Nov 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/11/13/til/</guid><description>&lt;h2 id="spring-周报">Spring 周报&lt;/h2>
&lt;p>&lt;a href="https://spring.io/blog/2024/11/12/this-week-in-spring-november-12th-2024" target="_blank">This Week in Spring - November 12th, 2024&lt;/a>&lt;/p></description></item><item><title>[译]从JUnit4迁移到JUnit5：权威指南</title><link>https://blog.chensoul.cc/posts/2024/11/07/junit-5-migration/</link><pubDate>Thu, 07 Nov 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/11/07/junit-5-migration/</guid><description>&lt;p>在本文中，我们将了解从 JUnit 4 迁移到 JUnit 5 所需的步骤。我们将了解如何运行新版本的现有测试，以及迁移代码需要进行哪些更改。&lt;/p>
&lt;h2 id="概述">概述&lt;/h2>
&lt;p>JUnit 5 与之前的版本不同，采用模块化设计。新架构的关键点在于将编写测试、扩展和工具之间的关注点分开。&lt;/p></description></item><item><title>2024-11-07｜今天我做了什么</title><link>https://blog.chensoul.cc/posts/2024/11/07/til/</link><pubDate>Thu, 07 Nov 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/11/07/til/</guid><description>&lt;h1 id="构建-docker-镜像---最佳实践">构建 Docker 镜像 - 最佳实践&lt;/h1>
&lt;p>&lt;a href="https://www.marcobehler.com/guides/building-docker-images" target="_blank">构建 Docker 镜像 - 最佳实践&lt;/a> 笔记：&lt;/p></description></item><item><title>2024-11-06｜今天我做了什么</title><link>https://blog.chensoul.cc/posts/2024/11/06/til/</link><pubDate>Wed, 06 Nov 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/11/06/til/</guid><description>&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://x.com/david_syer/status/1849839624325157198?s=12" target="_blank">David Syer 博士宣布推出 Spring GRPC 项目&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Spring Boot 和 GraalVM 原生镜像应用程序，&lt;a href="https://x.com/alina_yurenko/status/1850945616500965809?s=12" target="_blank">由出色的 Oracle GraalVM 开发倡导者 Alina Yurenko演示。&lt;/a>&lt;/p></description></item><item><title>2024-11-05｜今天我做了什么</title><link>https://blog.chensoul.cc/posts/2024/11/05/til/</link><pubDate>Tue, 05 Nov 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/11/05/til/</guid><description>&lt;h2 id="图片转换">图片转换&lt;/h2>
&lt;h3 id="使用-sip-将-jpg-图片转为-png">使用 sip 将 JPG 图片转为 PNG&lt;/h3>
&lt;p>macos 上先安装 sip：&lt;/p></description></item><item><title>2024-11-04｜SivaLabs博客文章</title><link>https://blog.chensoul.cc/posts/2024/11/04/sivalabs-blog-posts/</link><pubDate>Mon, 04 Nov 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/11/04/sivalabs-blog-posts/</guid><description>&lt;p>以下是 &lt;a href="https://www.sivalabs.in/" target="_blank">SivaLabs 博客&lt;/a> 中的一些文章，记录在此，方便后面阅读。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>如果你正在寻找使用 SpringBoot 实现微服务的详细实用指南，那么 &lt;a href="https://www.marcobehler.com/guides/java-microservices-a-practical-guide" target="_blank">Java 微服务：实用指南就是你的最佳选择&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在使用 JPA 时，我们多少次希望看到使用实际参数值而不是占位符生成的 SQL 查询？我们可以使用&lt;a href="https://github.com/gavlyukovskiy/spring-boot-data-source-decorator" target="_blank">p6spy-spring-boot-starter&lt;/a>来记录使用实际参数生成的 SQL 语句。&lt;/p></description></item><item><title>Kafka 基础知识</title><link>https://blog.chensoul.cc/posts/2024/10/17/kafka-fundamental/</link><pubDate>Thu, 17 Oct 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/10/17/kafka-fundamental/</guid><description>&lt;p>Kafka 是一个分布式流式处理平台。&lt;/p>
&lt;p>流平台具有三个关键功能：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>消息队列&lt;/strong>：发布和订阅消息流，这个功能类似于消息队列，这也是 Kafka 也被归类为消息队列的原因。&lt;/li>
&lt;li>&lt;strong>容错的持久方式存储记录消息流&lt;/strong>： Kafka 会把消息持久化到磁盘，有效避免了消息丢失的风险·。&lt;/li>
&lt;li>&lt;strong>流式处理平台：&lt;/strong> 在消息发布的时候进行处理，Kafka 提供了一个完整的流式处理类库。&lt;/li>
&lt;/ol>
&lt;p>Kafka 主要有两大应用场景：&lt;/p></description></item><item><title>[译]Spring Security 和 JWT 入门</title><link>https://blog.chensoul.cc/posts/2024/10/15/spring-security-jwt/</link><pubDate>Tue, 15 Oct 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/10/15/spring-security-jwt/</guid><description>&lt;p>&lt;a href="https://docs.spring.io/spring-security/reference/index.html" target="_blank">Spring Security&lt;/a> 为 Java 应用程序提供了一套全面的安全功能，涵盖身份验证、授权、会话管理以及针对&lt;a href="https://reflectoring.io/spring-csrf/" target="_blank">CSRF（跨站点请求伪造）&lt;/a>等常见安全威胁的防护。Spring Security 框架具有高度可定制性，允许开发人员根据其应用程序需求来管理安全配置。它提供了一个灵活的架构，支持各种身份验证机制，如基本身份验证、JWT 和 OAuth。&lt;/p></description></item><item><title>[译]测试 Spring Boot 应用程序：最佳实践和框架</title><link>https://blog.chensoul.cc/posts/2024/10/14/testing-spring-boot-applications-best-practices-and-frameworks/</link><pubDate>Mon, 14 Oct 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/10/14/testing-spring-boot-applications-best-practices-and-frameworks/</guid><description>&lt;p>测试是软件开发不可或缺的一部分。它可确保您的 Spring Boot 应用程序按预期运行，并在不断发展的过程中继续保持这种状态。在本文中，我们将探讨如何使用最佳实践和工具测试 Spring Boot 应用程序。&lt;/p>
&lt;h1 id="为什么测试很重要">为什么测试很重要&lt;/h1>
&lt;p>测试至关重要，原因如下：&lt;/p></description></item><item><title>ActiveMQ源码-BrokerService和PersistenceAdapter</title><link>https://blog.chensoul.cc/posts/2024/08/27/activemq-source-code-broker-service/</link><pubDate>Tue, 27 Aug 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/08/27/activemq-source-code-broker-service/</guid><description>&lt;p>activemq-broker 模块 test/java 目录下有个 IDERunner 类：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">IDERunner&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> &lt;span style="color:#66d9ef">boolean&lt;/span> TRANSPORT_TRACE &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(String&lt;span style="color:#f92672">[]&lt;/span>args) &lt;span style="color:#66d9ef">throws&lt;/span> Exception {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BrokerService brokerService &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> BrokerService();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// brokerService.addConnector(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// &amp;#34;tcp://0.0.0.0:61616?trace=&amp;#34; + TRANSPORT_TRACE +&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// &amp;#34;&amp;amp;transport.wireFormat.maxFrameSize=104857600&amp;#34;);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> brokerService.&lt;span style="color:#a6e22e">setPersistent&lt;/span>(&lt;span style="color:#66d9ef">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> brokerService.&lt;span style="color:#a6e22e">setUseJmx&lt;/span>(&lt;span style="color:#66d9ef">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> brokerService.&lt;span style="color:#a6e22e">setAdvisorySupport&lt;/span>(&lt;span style="color:#66d9ef">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> brokerService.&lt;span style="color:#a6e22e">start&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> brokerService.&lt;span style="color:#a6e22e">waitUntilStopped&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注释掉 brokerService 调用 addConnector 方法的三行代码，然后 debug 运行该类的 main 方法。&lt;/p></description></item><item><title>ThingsBoard源码编译和Idea运行</title><link>https://blog.chensoul.cc/posts/2024/08/27/thingsboard-code-source-compile/</link><pubDate>Tue, 27 Aug 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/08/27/thingsboard-code-source-compile/</guid><description>&lt;p>ThingsBoard 源码地址：&lt;a href="https://github.com/thingsboard/thingsboard" target="_blank">https://github.com/thingsboard/thingsboard&lt;/a>，从 &lt;a href="https://github.com/thingsboard/thingsboard/releases/tag/v3.7" target="_blank">3.7&lt;/a> 版本之后，要求 JDK17。官方提供了源码编译的文档：&lt;a href="https://thingsboard.io/docs/user-guide/install/building-from-source/" target="_blank">Building from sources&lt;/a>&lt;/p>
&lt;h2 id="源码编译">源码编译&lt;/h2>
&lt;p>下载代码：&lt;/p></description></item><item><title>ActiveMQ源码本地调试运行</title><link>https://blog.chensoul.cc/posts/2024/08/09/debug-activemq-source-code/</link><pubDate>Fri, 09 Aug 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/08/09/debug-activemq-source-code/</guid><description>&lt;h2 id="源码构建">源码构建&lt;/h2>
&lt;p>1、从 &lt;a href="https://github.com/apache/activemq" target="_blank">https://github.com/apache/activemq&lt;/a> 下载源码&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone https://github.com/apache/activemq
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>2、切换至 activemq-5.18.x 分支&lt;/p></description></item><item><title>[译]关系数据库设计速成课程</title><link>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-on-relational-database/</link><pubDate>Mon, 05 Aug 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-on-relational-database/</guid><description>&lt;p>原文链接：&lt;a href="https://blog.bytebytego.com/p/a-crash-course-on-relational-database" target="_blank">https://blog.bytebytego.com/p/a-crash-course-on-relational-database&lt;/a>&lt;/p>
&lt;p>在当今数据驱动的世界中，高效存储和管理信息是各种规模的企业和组织的关键要求。&lt;/p>
&lt;p>关系数据库提供了一个强大的框架，用于根据实体之间明确定义的关系来存储和检索数据。它们提供了一种结构化的数据管理方法，使用户能够：&lt;/p>
&lt;ul>
&lt;li>定义表&lt;/li>
&lt;li>建立关系&lt;/li>
&lt;li>执行复杂查询以从存储的信息中提取有意义的见解&lt;/li>
&lt;/ul>
&lt;p>然而，仅仅使用关系数据库还不足以获得其好处。&lt;/p>
&lt;p>有效的数据库设计对于优化性能、确保数据完整性和促进高效的数据检索至关重要。数据库设计原则（例如规范化、索引、连接和关系）在创建结构良好且性能良好的数据库中起着至关重要的作用。&lt;/p></description></item><item><title>[译]分布式系统速成课程</title><link>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-on-distributed-systems/</link><pubDate>Mon, 05 Aug 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-on-distributed-systems/</guid><description>&lt;p>原文链接：&lt;a href="https://blog.bytebytego.com/p/a-crash-course-on-distributed-systems" target="_blank">https://blog.bytebytego.com/p/a-crash-course-on-distributed-systems&lt;/a>&lt;/p>
&lt;p>分布式系统是多台计算机（也称为节点）的集合，它们协作执行特定任务或提供服务。&lt;/p>
&lt;p>这些节点在物理上是分开的，并通过网络传递消息相互通信。分布式系统可以跨越地理边界，使其能够利用来自不同位置的资源。&lt;/p>
&lt;p>&lt;img src="https://blog.chensoul.cc/images/a-crash-course-on-distributed-systems-01.webp" alt="img">&lt;/p>
&lt;p>分布式系统有几个区别于传统集中式系统的特点：&lt;/p>
&lt;ul>
&lt;li>分布式系统中的计算机在物理上是分开的，并通过网络连接。它们不共享内存或公共时钟。&lt;/li>
&lt;li>从外部视角来看，分布式系统对于最终用户来说是一个单一、统一的实体。&lt;/li>
&lt;li>分布式系统提供了在系统中添加或删除计算机的灵活性。&lt;/li>
&lt;li>分布式系统中的节点需要相互协调并达成一致才能一致地执行操作。&lt;/li>
&lt;li>分布式系统中的节点可能独立发生故障，并且消息可能会在网络上丢失或延迟。&lt;/li>
&lt;/ul>
&lt;p>分布式系统在我们的日常生活中无处不在。例如 Google 搜索等大型 Web 应用程序、在线银行系统、多人游戏等。这些系统利用多台计算机协同工作，提供无缝且响应迅速的用户体验。&lt;/p></description></item><item><title>[译]数据库分片速成课程</title><link>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-in-database-sharding/</link><pubDate>Mon, 05 Aug 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-in-database-sharding/</guid><description>&lt;p>原文链接：&lt;a href="https://blog.bytebytego.com/p/a-crash-course-in-database-sharding" target="_blank">https://blog.bytebytego.com/p/a-crash-course-in-database-sharding&lt;/a>&lt;/p>
&lt;p>随着应用程序越来越受欢迎，它会吸引更多活跃用户并加入更多功能。这种增长导致每日数据生成量增加，从业务角度来看，这是一个积极的指标。&lt;/p>
&lt;p>然而，它也给应用程序的架构带来挑战，特别是在数据库可扩展性方面。&lt;/p>
&lt;p>数据库是任何应用程序的关键组件，但它也是最难水平扩展的组件之一。当应用程序的流量和数据量增加时，数据库可能会成为性能瓶颈，影响用户体验。&lt;/p>
&lt;p>分片是一种解决数据库横向扩展难题的技术。它涉及将数据库划分为更小、更易于管理的单元（称为分片）。&lt;/p>
&lt;p>在这篇文章中，我们将介绍数据库分片的基础知识，探讨其各种方法、技术考虑因素，以及展示公司如何实施分片来扩展其数据库的真实案例研究。&lt;/p>
&lt;p>&lt;img src="https://blog.chensoul.cc/images/a-crash-course-in-database-sharding-01.webp" alt="img">&lt;/p>
&lt;h2 id="什么是分片">什么是分片？&lt;/h2>
&lt;p>分片是一种架构模式，用于解决管理和查询数据库中大型数据集的难题。它涉及将大型数据库拆分为更小、更易于管理的部分（称为分片）。&lt;/p></description></item><item><title>[译]数据库扩展策略速成课程</title><link>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-in-database-scaling/</link><pubDate>Mon, 05 Aug 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-in-database-scaling/</guid><description>&lt;p>原文链接：&lt;a href="https://blog.bytebytego.com/p/a-crash-course-in-database-scaling" target="_blank">https://blog.bytebytego.com/p/a-crash-course-in-database-scaling&lt;/a>&lt;/p>
&lt;p>数据库是现代应用程序开发的支柱。它们在存储、管理和检索数据方面发挥着至关重要的作用，使应用程序和服务能够有效运行。&lt;/p>
&lt;p>随着应用程序越来越受欢迎并吸引越来越多的用户群，数据库面临着处理不断增加的数据量、并发用户和复杂查询的挑战。&lt;/p>
&lt;p>有效地扩展数据库以确保最佳性能和良好的用户体验变得至关重要。&lt;/p>
&lt;p>数据库扩展是调整和扩展数据库基础架构以适应增长并在负载增加的情况下保持性能的过程。它涉及采用各种技术和策略来有效地分配数据，优化查询执行并明智地利用硬件资源。&lt;/p>
&lt;p>组织和开发人员必须了解并实施正确的数据库扩展策略。针对特定情况选择错误的策略可能会弊大于利。&lt;/p>
&lt;p>在这篇文章中，我们将详细介绍最流行的数据库扩展策略，讨论它们的优点和权衡。&lt;/p>
&lt;p>&lt;img src="https://blog.chensoul.cc/images/a-crash-course-in-database-scaling-01.webp" alt="img">&lt;/p></description></item><item><title>[译]领域驱动设计速成课程</title><link>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-on-domain-driven-design/</link><pubDate>Mon, 05 Aug 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-on-domain-driven-design/</guid><description>&lt;p>原文链接：&lt;a href="https://blog.bytebytego.com/p/a-crash-course-on-domain-driven-design" target="_blank">https://blog.bytebytego.com/p/a-crash-course-on-domain-driven-design&lt;/a>&lt;/p>
&lt;p>为复杂领域开发软件是一项具有挑战性的任务。&lt;/p>
&lt;p>随着问题领域的复杂性不断增长，创建准确表示业务概念、规则和流程的软件变得越来越困难。设计不良的软件很快就会变成难以理解、难以维护和扩展的混乱代码。&lt;/p>
&lt;p>领域驱动设计（DDD）为这个问题提供了解决方案。&lt;/p>
&lt;p>DDD 是一种软件开发方法，它通过强调对核心领域和业务逻辑进行建模的重要性并使用这些模型作为软件设计的基础来解决领域复杂性。&lt;/p>
&lt;p>领域驱动设计的核心是：&lt;/p>
&lt;ul>
&lt;li>将主要焦点放在核心领域上。&lt;/li>
&lt;li>基于领域模型的复杂设计&lt;/li>
&lt;li>建立技术专家和领域专家之间的协作。&lt;/li>
&lt;/ul>
&lt;p>近年来，领域驱动设计的需求愈发迫切。基于微服务和云计算的架构已导致系统由众多以复杂方式交互的小组件组成。如果没有清晰且定义明确的领域模型来指导其设计，此类系统很快就会变成“一团泥球”。&lt;/p></description></item><item><title>Github Action 发布 Jar 到 Maven 中央仓库</title><link>https://blog.chensoul.cc/posts/2024/08/01/publishing-a-jar-to-maven-repository-with-github-action/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/08/01/publishing-a-jar-to-maven-repository-with-github-action/</guid><description>&lt;p>作为一名 Java 开发者,将自己的项目发布到 Maven 中央仓库是一个非常重要的步骤。这不仅可以让更多的开发者发现和使用您的项目,也可以提高项目的知名度和影响力。&lt;/p>
&lt;p>在过去,发布 Jar 到 Maven 中央仓库通常需要手动完成一系列繁琐的步骤，比如：申请 JIRA 账号、创建 Sonatype JIRA Issure、上传 Jar 包、签名 Jar 包等。但是随着 Github Action 的出现，这个过程变得更加自动化和简单。&lt;/p></description></item><item><title>[译]JMS 2.0 中的新增功能</title><link>https://blog.chensoul.cc/posts/2024/07/24/what-is-new-in-jms-2-0/</link><pubDate>Wed, 24 Jul 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/07/24/what-is-new-in-jms-2-0/</guid><description>&lt;p>原文链接：&lt;a href="https://hasithah.medium.com/what-is-new-in-jms-2-0-821266fc1bf0" target="_blank">What is new in JMS 2.0&lt;/a>&lt;/p>
&lt;p>在在软件集成领域，从一个软件组件到另一个软件组件进行通信是一项基本要求。虽然已经出现了许多具有这种能力的技术，但 Java 编程语言为我们提供了一个 API，以促进用 Java 编写的组件之间的消息传递。此 API 的实现将由不同的供应商（JMS 提供商）通过代理软件提供。&lt;/p></description></item><item><title>[译]JMS 2.0 中的新增功能（第一部分）- 易于使用</title><link>https://blog.chensoul.cc/posts/2024/07/24/jms20/</link><pubDate>Wed, 24 Jul 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/07/24/jms20/</guid><description>&lt;p>原文链接：&lt;a href="https://www.oracle.com/technical-resources/articles/java/jms20.html" target="_blank">https://www.oracle.com/technical-resources/articles/java/jms20.html&lt;/a>&lt;/p>
&lt;p>&lt;em>作者：Nigel Deakin&lt;/em>
出版日期：2013 年 5 月&lt;/p>
&lt;p>&lt;strong>了解新的易用性功能如何使您编写更少的代码行。&lt;/strong>&lt;/p>
&lt;p>本文是两部分系列文章的第一部分，假设读者对 Java 消息服务 (JMS) 1.1 有基本了解，并介绍了 JMS 2.0 中的一些新的易用特性。在&lt;a href="https://www.oracle.com/technical-resources/articles/java/jms2messaging.html" target="_blank">第二部分&lt;/a>中，我们将介绍新的消息传递特性。&lt;/p></description></item><item><title>[译]JMS 2.0 中的新增功能（第二部分）- 新的消息传送功能</title><link>https://blog.chensoul.cc/posts/2024/07/24/jms20/</link><pubDate>Wed, 24 Jul 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/07/24/jms20/</guid><description>&lt;p>原文链接：&lt;a href="https://www.oracle.com/technical-resources/articles/java/jms2messaging.html" target="_blank">https://www.oracle.com/technical-resources/articles/java/jms2messaging.html&lt;/a>&lt;/p>
&lt;p>&lt;em>作者：Nigel Deakin&lt;/em>
出版日期：2013 年 5 月&lt;/p>
&lt;p>&lt;strong>了解如何利用 JMS 2.0 中的新消息传递功能。&lt;/strong>&lt;/p></description></item><item><title>[译]JMS 2.0 的十个好处意味着可以减少代码编写量</title><link>https://blog.chensoul.cc/posts/2024/07/24/jms20-means-less-code/</link><pubDate>Wed, 24 Jul 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/07/24/jms20-means-less-code/</guid><description>&lt;p>原文链接：&lt;a href="https://javaee.github.io/jms-spec/pages/JMS20MeansLessCode" target="_blank">Ten ways in which JMS 2.0 means writing less code&lt;/a>&lt;/p></description></item><item><title>[译]JMS 事务的实际应用</title><link>https://blog.chensoul.cc/posts/2024/07/23/jms-transactions-in-action/</link><pubDate>Tue, 23 Jul 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/07/23/jms-transactions-in-action/</guid><description>&lt;p>在本文中，您将了解如何选择性地使用 JMS 事务。在 JMS 中，您可以选择控制一个会话的原子操作。每个会话都支持一系列事务。每个事务将一组生成或使用的消息分组为一个原子工作单元。确保您已经理解了&lt;a href="https://jstobigdata.com/jms/guaranteed-delivery-using-jms-message-acknowledgement/" target="_blank">JMS 中的消息确认&lt;/a>。&lt;/p>
&lt;p>&lt;strong>交易提交时 –&lt;/strong> ( &lt;code>jmsContext.commit()&lt;/code>)&lt;/p></description></item><item><title>[译]JMS 发布-订阅消息模型</title><link>https://blog.chensoul.cc/posts/2024/07/23/jms-pub-sub-messaging-model/</link><pubDate>Tue, 23 Jul 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/07/23/jms-pub-sub-messaging-model/</guid><description>&lt;p>在本文中，您将了解 JMS 发布-订阅 (publish-subscribe) 消息传递模型。正如您在&lt;a href="https://jstobigdata.com/jms/jms-introduction-java-message-service/" target="_blank">JMS 简介文章&lt;/a>中所读到的，在发布/订阅模型中，客户端通过称为主题的中介将消息发送给多个接收者。发送者通常称为发布者，接收者称为订阅者。&lt;/p>
&lt;h2 id="jms-发布订阅消息传递示例">JMS 发布/订阅消息传递示例&lt;/h2>
&lt;p>下面是一个简单的代码示例，演示了发布/订阅消息模型的工作原理。我创建了 2 个主线程，&lt;code>publisher&lt;/code>和&lt;code>subscriber1&lt;/code>。将订阅者 1 克隆到&lt;code>subscriber2&lt;/code>。所以基本上我有一个消息发布者和 2 个消息订阅者。链接至&lt;a href="https://github.com/jstobigdata/jms-parent-app/blob/master/jms-glassfish5/src/main/java/lab03/message/pubsub/SimplePubSubExample.java" target="_blank">GitHub&lt;/a> 。&lt;/p></description></item><item><title>[译]JMS 消息优先级</title><link>https://blog.chensoul.cc/posts/2024/07/23/jms-prioritize-messages/</link><pubDate>Tue, 23 Jul 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/07/23/jms-prioritize-messages/</guid><description>&lt;p>我们将通过示例详细讨论 JMS 消息优先级。每条消息的标头字段代表其优先级。我在消息模型教程&lt;code>JMSPriority&lt;/code>中讨论过消息优先级。&lt;/p>
&lt;p>JMS 有 10 个优先级，从 0 到 9。0 是最低优先级，9 是最高优先级。根据 JMS 标准，优先级为 0-4 的消息为正常优先级，优先级为 5-9 的消息被视为加急优先级。&lt;/p></description></item><item><title>[译]JMS 消息模型</title><link>https://blog.chensoul.cc/posts/2024/07/23/jms-message-model/</link><pubDate>Tue, 23 Jul 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/07/23/jms-message-model/</guid><description>&lt;p>消息是 JMS 的核心，无论是事件还是业务数据。消息由标头、自定义属性和正文组成。这是您将在 JMS 消息模型（JMS 消息剖析）中学习的内容。&lt;/p>
&lt;p>&lt;img src="https://blog.chensoul.cc/images/JMS-message-model-min-1024x536.webp" alt="JMS 消息模型">&lt;/p></description></item><item><title>[译]JMS 消息选择器在过滤消息中的应用</title><link>https://blog.chensoul.cc/posts/2024/07/23/jms-message-selectors-in-action-to-filter-messages/</link><pubDate>Tue, 23 Jul 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/07/23/jms-message-selectors-in-action-to-filter-messages/</guid><description>&lt;p>发送给接收方的消息通常需要根据某些标准进行过滤。JMS 提供消息选择器，允许 JMS 消费者根据消息头指定其感兴趣的消息。在本文中，您将学习使用 JMS 消息选择器来过滤消息。&lt;/p>
&lt;p>这是一篇高级教程，在继续阅读本文之前，请确保您对 JMS 有基本的了解。如果您是 JMS 新手，请查看&lt;a href="https://jstobigdata.com/jms/jms-point-to-point-messaging-in-action/" target="_blank">JMS 点对点消息传递模型文章。&lt;/a>&lt;/p></description></item><item><title>[译]JMS 点对点消息传递的实际应用</title><link>https://blog.chensoul.cc/posts/2024/07/23/jms-point-to-point-messaging-in-action/</link><pubDate>Tue, 23 Jul 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/07/23/jms-point-to-point-messaging-in-action/</guid><description>&lt;p>点对点系统使用队列进行消息传递。客户端将消息发送到特定队列，特定订阅者监听或接收来自该队列的消息。在 JMS 点对点消息传递系统中，队列用于处理单个发送者和单个消费者。确保您已经阅读了有关&lt;a href="https://jstobigdata.com/jms/jms-message-model/" target="_blank">JMS 消息模型&lt;/a>以及&lt;a href="https://jstobigdata.com/jms/send-and-receive-message-in-jms/" target="_blank">如何在 JMS 中发送和接收消息的&lt;/a>先前教程。&lt;/p>
&lt;h2 id="使用队列进行-ptp-消息传送">使用队列进行 PTP 消息传送&lt;/h2>
&lt;p>您现在知道点对点消息传递完全是利用队列。JMS 提供&lt;code>javax.jms.Queue&lt;/code>表示队列对象的功能。我将利用 JMS 2.0 API 来&lt;code>javax.jms.JMSProducer&lt;/code>发送&lt;code>javax.jms.JMSConsumer&lt;/code>和接收消息。&lt;/p></description></item><item><title>[译]JMS介绍 – Java消息服务</title><link>https://blog.chensoul.cc/posts/2024/07/23/jms-introduction-java-message-service/</link><pubDate>Tue, 23 Jul 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/07/23/jms-introduction-java-message-service/</guid><description>&lt;p>JMS 代表 Java 消息服务，它是 Java 中访问消息中间件服务器的标准。这是一个 JMS 介绍教程，为您提供消息传递和 JMS 的简要概述。您将了解使用 JMS 的优势以及 JMS 中的不同消息传递模型。&lt;/p></description></item><item><title>[译]为 JMS 安装和设置 Glassfish</title><link>https://blog.chensoul.cc/posts/2024/07/23/install-and-setup-glassfish-for-jms/</link><pubDate>Tue, 23 Jul 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/07/23/install-and-setup-glassfish-for-jms/</guid><description>&lt;p>在本文中，我们将为 JMS 2.0 设置 Glassfish，创建一个 Java 项目并添加必要的依赖项。&lt;/p>
&lt;h2 id="先决条件">先决条件&lt;/h2>
&lt;p>请确保您的系统上安装了以下工具。&lt;/p></description></item><item><title>[译]使用 JMS 消息确认保证传送</title><link>https://blog.chensoul.cc/posts/2024/07/23/guaranteed-delivery-using-jms-message-acknowledgement/</link><pubDate>Tue, 23 Jul 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/07/23/guaranteed-delivery-using-jms-message-acknowledgement/</guid><description>&lt;p>JMS 通过 JMS 消息确认（确认模式）确保消息传递的可靠性。如果会话已进行事务处理，则该&lt;code>commit()&lt;/code>方法会自动处理消息确认。否则，该方法将处理恢复&lt;code>rollback()&lt;/code>。在本文中，我们将假设会话未进行事务处理。这是一个高级主题，请确保您对 JMS 有基本的了解。如果您是 JMS 新手，可以参考使用 JMS&lt;a href="https://jstobigdata.com/jms/send-and-receive-message-in-jms/" target="_blank">发送和接收消息。&lt;/a>&lt;/p></description></item><item><title>[译]在 JMS 中发送和接收消息</title><link>https://blog.chensoul.cc/posts/2024/07/23/send-and-receive-message-in-jms/</link><pubDate>Tue, 23 Jul 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/07/23/send-and-receive-message-in-jms/</guid><description>&lt;p>您将了解 JMS 架构，学习如何在 JMS 中发送和接收消息。我将介绍管理对象、JMS 1.1 API 和 JMS 2.0 API。我们还将看到与 JMS 1.1 API 相比，JMS 2.0 API 的使用有多么简单。在继续学习本课程之前，请确保您已完成 JMS 设置。如果您是初学者，请确保您已了解&lt;a href="https://jstobigdata.com/jms/jms-introduction-java-message-service/" target="_blank">JMS 的基础知识&lt;/a>。&lt;/p></description></item><item><title>[译]完整的 JMS 2.0 教程</title><link>https://blog.chensoul.cc/posts/2024/07/23/a-complete-jms-2-0-tutorial/</link><pubDate>Tue, 23 Jul 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/07/23/a-complete-jms-2-0-tutorial/</guid><description>&lt;p>JMS 代表 Java 消息服务，它是 Java 中访问消息中间件服务器的标准。消息传递是在各种应用程序或服务之间交换业务数据的过程。这是&lt;strong>一个完整的 JMS 2.0 教程，&lt;/strong> 其中包含大量代码示例。完整的代码示例可在 GitHub 上找到，请下载并运行示例。本教程使用 Glassfish 开源服务器作为 JMS 提供程序的示例。&lt;/p></description></item><item><title>GitLab Runner安装和部署</title><link>https://blog.chensoul.cc/posts/2024/07/19/gitlab-runner-install/</link><pubDate>Fri, 19 Jul 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/07/19/gitlab-runner-install/</guid><description>&lt;h2 id="介绍">介绍&lt;/h2>
&lt;p>GitLab Runner 是一个用于在 GitLab CI/CD（持续集成/持续交付）流水线中运行作业（Jobs）的开源工具。它充当了 GitLab CI/CD 系统中的代理，负责接收作业请求、执行作业脚本并报告结果。&lt;/p></description></item><item><title>将 Maven 站点发布到 GitHub Pages</title><link>https://blog.chensoul.cc/posts/2024/07/18/publishing-a-maven-site-to-github-pages/</link><pubDate>Thu, 18 Jul 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/07/18/publishing-a-maven-site-to-github-pages/</guid><description>&lt;p>本文源代码：&lt;a href="https://github.com/chensoul/maven-site-github-example/" target="_blank">https://github.com/chensoul/maven-site-github-example/&lt;/a> 。&lt;/p>
&lt;h2 id="创建-java-maven-项目">创建 Java Maven 项目&lt;/h2>
&lt;p>让我们使用 Maven 创建一个简单的 Java 项目&lt;/p></description></item><item><title>Gitlab安装和部署-使用yum源</title><link>https://blog.chensoul.cc/posts/2024/07/15/install-gitlab-using-yum/</link><pubDate>Mon, 15 Jul 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/07/15/install-gitlab-using-yum/</guid><description>&lt;h2 id="gitlab-server-部署">Gitlab Server 部署&lt;/h2>
&lt;h3 id="1环境配置">1、环境配置&lt;/h3>
&lt;p>关闭防火墙、SELinux&lt;/p>
&lt;p>开启邮件服务&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ systemctl start postfix
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ systemctl enable postfix
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2手动安装">2、手动安装&lt;/h3>
&lt;h4 id="1安装-gitlab-依赖包">1、安装 gitlab 依赖包&lt;/h4>
&lt;p>centos7:&lt;/p></description></item><item><title>Git介绍</title><link>https://blog.chensoul.cc/posts/2024/07/15/git/</link><pubDate>Mon, 15 Jul 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/07/15/git/</guid><description>&lt;h2 id="gitgithubgitlab-的区别">Git、Github、Gitlab 的区别&lt;/h2>
&lt;p>Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。&lt;/p>
&lt;p>是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。&lt;/p></description></item><item><title>Git使用</title><link>https://blog.chensoul.cc/posts/2024/07/15/git/</link><pubDate>Mon, 15 Jul 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/07/15/git/</guid><description>&lt;h2 id="部署git-服务">部署Git 服务&lt;/h2>
&lt;p>&lt;strong>创建git仓库&lt;/strong>&lt;/p>
&lt;p>git-server上的操作：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>[root@localhost ~]# yum install git git-core gitweb -y
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[root@localhost ~]# useradd git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[root@localhost ~]# passwd git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[root@localhost ~]# mkdir /git-root/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[root@localhost ~]# cd /git-root/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[root@localhost git-root]# git init --bare shell.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Initialized empty Git repository in /git-root/shell.git/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[root@localhost git-root]# chown -R git:git shell.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>注意：
git init 和 git init &amp;ndash;bare 的区别:&lt;/p></description></item><item><title>Minikube快速入门</title><link>https://blog.chensoul.cc/posts/2024/07/10/minikube-quick-start/</link><pubDate>Wed, 10 Jul 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/07/10/minikube-quick-start/</guid><description>&lt;h2 id="安装">安装&lt;/h2>
&lt;p>macos 系统使用 brew 安装&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>brew install minikube
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="启动集群">启动集群&lt;/h2>
&lt;p>查看当前集群列表&lt;/p></description></item><item><title>Spring Boot集成SpringDoc生成Api文档</title><link>https://blog.chensoul.cc/posts/2024/07/10/springdoc-with-spring-boot/</link><pubDate>Wed, 10 Jul 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/07/10/springdoc-with-spring-boot/</guid><description>&lt;p>以下以 Maven 为例介绍 Spring Boot集成SpringDoc生成Api文档。&lt;/p>
&lt;ol>
&lt;li>添加依赖&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;groupId&amp;gt;&lt;/span>org.springdoc&lt;span style="color:#f92672">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;artifactId&amp;gt;&lt;/span>springdoc-openapi-starter-webmvc-ui&lt;span style="color:#f92672">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>配置 annotationProcessor，实现通过 javadoc 生成文档。&lt;/li>
&lt;/ol>
&lt;p>每个 maven 模块都需要配置：&lt;/p></description></item><item><title>Docker安装和配置</title><link>https://blog.chensoul.cc/posts/2024/07/09/install-docker/</link><pubDate>Tue, 09 Jul 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/07/09/install-docker/</guid><description>&lt;h1 id="centos7安装docker">Centos7安装Docker&lt;/h1>
&lt;h2 id="配置宿主机网卡转发">配置宿主机网卡转发&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## 配置网卡转发，看值是否为1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sysctl -a |grep -w net.ipv4.ip_forward
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>net.ipv4.ip_forward = &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## 若未配置，需要执行如下&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cat &amp;lt;&amp;lt;EOF &amp;gt; /etc/sysctl.d/docker.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>net.bridge.bridge-nf-call-ip6tables = &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>net.bridge.bridge-nf-call-iptables = &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>net.ipv4.ip_forward=&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>EOF
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sysctl -p /etc/sysctl.d/docker.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="yum安装配置docker">Yum安装配置docker&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## 下载阿里源repo文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo yum install -y yum-utils
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo yum-config-manager --add-repo http&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span>//mirrors.aliyun.com/repo/Centos-&lt;span style="color:#ae81ff">7&lt;/span>.repo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo yum-config-manager --add-repo http&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span>//mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo yum clean all &amp;amp;&amp;amp; yum makecache
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## yum安装&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo yum install -y docker-ce docker-ce-cli 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## 设置开机自启&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>systemctl enable docker 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>systemctl daemon-reload
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## 启动docker&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>systemctl start docker 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## 查看docker信息&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker info
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker version
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## docker-client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>which docker
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## docker daemon&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ps aux |grep docker
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装 Compose plugin：&lt;/p></description></item><item><title>使用 Docker 容器化并运行 Spring Boot 应用程序</title><link>https://blog.chensoul.cc/posts/2024/07/09/docker-for-spring-boot/</link><pubDate>Tue, 09 Jul 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/07/09/docker-for-spring-boot/</guid><description>&lt;blockquote>
&lt;p>本文翻译自 Docker 官方网站的《&lt;a href="https://docs.docker.com/language/java/" target="_blank">Java language-specific guide&lt;/a>》文章，并做了一些改动。&lt;/p>&lt;/blockquote>
&lt;p>Java 入门指南教您如何使用 Docker 创建容器化的 Spring Boot 应用程序。在本模块中，您将学习如何：&lt;/p></description></item><item><title>[译]Minikube 中的 Minions - 面向 Java 开发人员的 Kubernetes 简介</title><link>https://blog.chensoul.cc/posts/2024/07/08/minions-in-minikube-a-kubernetes-intro-for-java-de/</link><pubDate>Mon, 08 Jul 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/07/08/minions-in-minikube-a-kubernetes-intro-for-java-de/</guid><description>&lt;p>我们希望我们的微服务是可复制、可替换的工作程序，我们可以轻松升级或降级，无需停机，管理也只需最少。我们可能会说我们希望他们是我们的奴才。在本文中，我们将通过一个简单的示例来了解 Kubernetes 通过创建和编排奴才大军可以为我们做些什么。您可以按照本文进行编码，也可以从&lt;a href="https://github.com/ryandawsonuk/minions/blob/master/minion-army.yml" target="_blank">此处&lt;/a>克隆项目。&lt;/p>
&lt;h2 id="先决条件">先决条件&lt;/h2>
&lt;p>我们需要将微服务容器化，以便在 Kubernetes 中运行它们 — 我们将使用Docker来实现这一点。我们将使用&lt;a href="https://kubernetes.io/docs/tasks/tools/install-minikube/" target="_blank">Minikube&lt;/a>，而不是使用云托管的 Kubernetes，这样我们就可以在本地进行沙盒处理。&lt;/p></description></item><item><title>[译]面向 Java 开发人员的 Kubernetes</title><link>https://blog.chensoul.cc/posts/2024/07/08/kubernetes-for-java-developers/</link><pubDate>Mon, 08 Jul 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/07/08/kubernetes-for-java-developers/</guid><description>&lt;blockquote>
&lt;p>有一类新工具可用于将应用程序 docker 化并部署到 Kubernetes，这些工具专门面向开发人员。该类别中的最新工具是 RedHat 的 JKube。&lt;/p>&lt;/blockquote>
&lt;p>微服务是一种架构风格，由一个小型的、单独的应用程序组件组成，该组件具有单一职责，在部署和可扩展性方面具有高度的自主性。这些组件通过轻量级协议（如 REST over HTTP）进行通信。因此，开发团队规模很小（两个披萨规则），专注于微服务。实际上，团队拥有从开发到部署的整个生命周期——如果你构建了它，你就会运行它。这就产生了一个问题。毕竟，开发团队的核心竞争力通常是 Maven、微服务框架（例如 Spring Boot）、测试框架（如 JUnit）等。但是，如果我们看一下部署微服务所涉及的步骤：&lt;/p></description></item><item><title>ActiveMQ安装和使用</title><link>https://blog.chensoul.cc/posts/2024/07/05/install-activemq/</link><pubDate>Fri, 05 Jul 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/07/05/install-activemq/</guid><description>&lt;p>ActiveMQ 是一个实现了 JMS 协议的开源消息中间件，目前它有两种版本：ActiveMQ &amp;ldquo;Classic&amp;rdquo; 和 ActiveMQ Artemis。&lt;/p></description></item><item><title>Gitlab安装和部署-使用Docker</title><link>https://blog.chensoul.cc/posts/2024/06/26/install-gitlab/</link><pubDate>Wed, 26 Jun 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/06/26/install-gitlab/</guid><description>&lt;h2 id="安装-gitlab">安装 Gitlab&lt;/h2>
&lt;p>安装 gitlab-ce 版本，当前最新版本为 17.2.0&lt;/p>
&lt;h3 id="配置-external_url">配置 external_url&lt;/h3>
&lt;p>参考 &lt;a href="https://docs.gitlab.com/ee/install/docker.html#install-gitlab-using-docker-compose" target="_blank">https://docs.gitlab.com/ee/install/docker.html#install-gitlab-using-docker-compose&lt;/a>&lt;/p></description></item><item><title>Jenkins安装和部署-使用Docker</title><link>https://blog.chensoul.cc/posts/2024/06/26/install-jenkins/</link><pubDate>Wed, 26 Jun 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/06/26/install-jenkins/</guid><description>&lt;h2 id="使用-docker-安装">使用 Docker 安装&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ docker volume create --name jenkins_data
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ docker run -p 8080:8080 -p 50000:50000 -v jenkins_data:/var/jenkins_home jenkins/jenkins:jdk21
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>第一次启动 Jenkins 时，Docker 日志将包含如下消息：&lt;/p></description></item><item><title>Tengine动态裁剪图片</title><link>https://blog.chensoul.cc/posts/2024/06/26/install-cert-manager/</link><pubDate>Wed, 26 Jun 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/06/26/install-cert-manager/</guid><description>&lt;h2 id="软件列表">软件列表&lt;/h2>
&lt;ul>
&lt;li>Tengine：&lt;a href="https://github.com/alibaba/tengine" target="_blank">https://github.com/alibaba/tengine&lt;/a>&lt;/li>
&lt;li>Lua：&lt;a href="http://www.lua.org/ftp/" target="_blank">http://www.lua.org/ftp/&lt;/a> ，这里使用 lua-5.3.1.tar.gz&lt;/li>
&lt;li>LuaJIT：&lt;a href="">http://luajit.org/download.html&lt;/a> ，这里使用 LuaJIT-2.0.4.tar.gz&lt;/li>
&lt;li>GraphicdMagick：&lt;a href="https://sourceforge.net/projects/graphicsmagick/files/graphicsmagick/" target="_blank">https://sourceforge.net/projects/graphicsmagick/files/graphicsmagick/&lt;/a> ，这里使用 GraphicsMagick-1.3.18.tar.gz&lt;/li>
&lt;/ul>
&lt;h2 id="安装lua">安装Lua&lt;/h2>
&lt;p>先安装依赖：&lt;/p></description></item><item><title>搭建本地 Maven 仓库 Artifactory 开源版</title><link>https://blog.chensoul.cc/posts/2024/06/25/install-artifactory-oss/</link><pubDate>Tue, 25 Jun 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/06/25/install-artifactory-oss/</guid><description>&lt;h2 id="安装-artifactory">安装 Artifactory&lt;/h2>
&lt;p>官方下载安装地址：&lt;a href="https://jfrog.com/community/download-artifactory-oss/" target="_blank">https://jfrog.com/community/download-artifactory-oss/&lt;/a> ，支持三种安装方式：&lt;/p>
&lt;ul>
&lt;li>Windows Installer&lt;/li>
&lt;li>Linux Installers
&lt;ul>
&lt;li>tar.gz&lt;/li>
&lt;li>RPM&lt;/li>
&lt;li>Debian&lt;/li>
&lt;li>Docker Compose&lt;/li>
&lt;li>Docker&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Helm&lt;/li>
&lt;/ul>
&lt;h3 id="手动下载并安装">手动下载并安装&lt;/h3>
&lt;p>安装包文件地址在 &lt;a href="https://releases.jfrog.io/artifactory/bintray-artifactory/org/artifactory/oss/jfrog-artifactory-oss/" target="_blank">https://releases.jfrog.io/artifactory/bintray-artifactory/org/artifactory/oss/jfrog-artifactory-oss/&lt;/a> 。以当前最新版本 7.84.15 为例，在 linux 服务器上下载：&lt;/p></description></item><item><title>搭建本地Maven仓库Nexus</title><link>https://blog.chensoul.cc/posts/2024/06/25/install-nexus/</link><pubDate>Tue, 25 Jun 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/06/25/install-nexus/</guid><description>&lt;h2 id="使用-docker-安装">使用 Docker 安装&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ docker volume create --name nexus_data
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ docker run -d -p 8081:8081--name nexus -v nexus_data:/nexus-data sonatype/nexus3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>8081 是 Nexus UI 端口&lt;/li>
&lt;/ul>
&lt;h2 id="使用-docker-compose-安装">使用 Docker Compose 安装&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">services&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">nexus&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">sonatype/nexus3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">platform&lt;/span>: &lt;span style="color:#ae81ff">linux/amd64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">ports&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#e6db74">&amp;#34;8081:8081&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">nexus_data:/nexus-data&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">/etc/localtime:/etc/localtime:ro&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">volumes&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">nexus_data&lt;/span>:
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="访问并配置-nexus">访问并配置 Nexus&lt;/h2>
&lt;p>访问 http://127.0.0.1:8081/ 或者是 &lt;code>http://&amp;lt;your IP&amp;gt;:8081&lt;/code>，用户名为 admin ，初始密码在容器里的 /nexus-data/admin.password 文件&lt;/p></description></item><item><title>All things about OAuth</title><link>https://blog.chensoul.cc/posts/2024/06/06/all-things-about-oauth/</link><pubDate>Thu, 06 Jun 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/06/06/all-things-about-oauth/</guid><description>&lt;p>OAuth 是一种&lt;strong>开放协议&lt;/strong>，允许通过网络、移动和桌面应用程序以&lt;strong>简单&lt;/strong>、&lt;strong>标准的方式进行&lt;/strong>安全授权。&lt;/p>
&lt;h2 id="oauth-2-入门">OAuth 2 入门&lt;/h2>
&lt;p>以下是一些 OAuth 2.0 指南，涵盖了理解和实现客户端和服务器所需的许多主题。&lt;/p></description></item><item><title>JWT</title><link>https://blog.chensoul.cc/posts/2024/06/06/jwt/</link><pubDate>Thu, 06 Jun 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/06/06/jwt/</guid><description>&lt;h2 id="什么是-jwt">什么是 JWT？&lt;/h2>
&lt;p>JWT（JSON Web Token）是一种开放标准(RFC 7519)，用于在网络应用程序之间安全地传输信息。它被设计用于在两方之间传输声明，这些声明可以是身份验证和授权信息，也可以是任何其他类型的信息。&lt;/p>
&lt;p>设计目的：不需要服务器端存储状态，安全地传递非敏感信息。&lt;/p>
&lt;h2 id="jwt-特点">JWT 特点&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>可扩展性&lt;/strong>：可以在 payload 中携带任意的 JSON 数据&lt;/li>
&lt;li>&lt;strong>自包含性&lt;/strong>：所有用户相关信息都在 JWT 中，不需要依赖数据库&lt;/li>
&lt;li>&lt;strong>无状态性&lt;/strong>：服务器不需要保存会话状态，提高了系统的可扩展性&lt;/li>
&lt;li>&lt;strong>跨域支持&lt;/strong>：可以跨域传递，因为是 JSON 格式&lt;/li>
&lt;li>&lt;strong>安全性&lt;/strong>：通过签名确保数据不被篡改&lt;/li>
&lt;/ul>
&lt;h2 id="jwt-组成">JWT 组成&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>eyJraWQiOiJmYTNkZmZjMS0xZmQ3LTRhM2QtYTEyMC1mNjY4OWE4NDM5YjQiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJjbGllbnQiLCJhdWQiOiJjbGllbnQiLCJuYmYiOjE3MTc1NDk5NDMsImlzcyI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODA4MCIsImV4cCI6MTcxNzU1MDI0MywiaWF0IjoxNzE3NTQ5OTQzLCJqdGkiOiJiMjU0ZGVhMi1kMWE2LTQxNzEtYjEyYy1lNmYzYzZjMDJkMGQifQ.eRiS0H2E-h5PiDEfJikjoPGH1DCqWVt4VIzLtPoSOaIK6jBIaw0h5m-reZVUyZPNYZG68Ymhey17aZBMveirqCxN-lNcPMIGfuqMptfsD9E6Hfam6bEMgpEAOQsQ6Ruk3vGtdmjnEC2h9ZStoqT5-C6JgArwFLGgX92LXrRYz7-60n0I6EAB07u9kxc6FQKLow90RiyXi2YLur-ttOUQpecf8zHi48zRc-HLLoWAMaNddT-4hg4v0Qts4DultpxZB_Xu7DRc91G_8M6sYFSvFSVFHlcWFgKNLZqUYwepLHX2LxoXdbTLGqV9x__-J8UO0TO3TkpC2BaZAiseYcpYMw
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>JWT 主要有以下三个部分通过 base64 加密组成:&lt;/p></description></item><item><title>OAuth2和OIDC区别</title><link>https://blog.chensoul.cc/posts/2024/06/06/oauth2-oidc/</link><pubDate>Thu, 06 Jun 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/06/06/oauth2-oidc/</guid><description>&lt;h2 id="认证和授权">认证和授权&lt;/h2>
&lt;p>&lt;strong>认证 (Authentication)&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>认证是验证用户、设备或系统身份的过程。&lt;/li>
&lt;li>常见的认证方式包括用户名/密码、生物特征(如指纹、人脸)、单点登录(SSO)等。&lt;/li>
&lt;li>认证确保只有被授权的实体才能访问系统或资源。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>授权 (Authorization)&lt;/strong>：&lt;/p></description></item><item><title>Spring Boot项目创建Docker镜像并运行应用</title><link>https://blog.chensoul.cc/posts/2024/06/06/spring-boot-docker-image/</link><pubDate>Thu, 06 Jun 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/06/06/spring-boot-docker-image/</guid><description>&lt;h2 id="手动创建-dockerfile">手动创建 Dockerfile&lt;/h2>
&lt;p>在您的 Spring Boot 项目根目录下创建一个名为 &lt;code>Dockerfile&lt;/code> 的文件，并添加以下内容:&lt;/p></description></item><item><title>[译]OAuth2 with Spring 第1部分：了解基本概念</title><link>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-1-knowing-the-basic-concepts/</link><pubDate>Wed, 05 Jun 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-1-knowing-the-basic-concepts/</guid><description>&lt;p>原文地址：&lt;a href="https://mainul35.medium.com/oauth2-with-spring-part-1-knowing-the-basic-concepts-5c4aa17884a" target="_blank">https://mainul35.medium.com/oauth2-with-spring-part-1-knowing-the-basic-concepts-5c4aa17884a&lt;/a>&lt;/p>
&lt;p>在本系列&lt;strong>关于 Spring 的 OAuth2&lt;/strong>的文章中，我将尝试介绍和解释与 OAuth2 相关的每一个问题以及如何在 Spring 框架中实现这些问题。请记住，OAuth2 完全是一个概念性的东西，在不同的框架中，它有自己的实现。此外，许多应用程序开发人员开发自己的 OAuth2 实现，而不使用 Spring 框架提供的 OAuth2 框架支持。因此，我将就这个主题撰写一系列文章。&lt;/p></description></item><item><title>[译]OAuth2 with Spring 第2部分：授权服务器入门</title><link>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-2-getting-started-with-authorization-server/</link><pubDate>Wed, 05 Jun 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-2-getting-started-with-authorization-server/</guid><description>&lt;p>原文地址：&lt;a href="https://mainul35.medium.com/oauth2-with-spring-part-2-getting-started-with-authorization-server-13804910cb2a" target="_blank">https://mainul35.medium.com/oauth2-with-spring-part-2-getting-started-with-authorization-server-13804910cb2a&lt;/a>&lt;/p>
&lt;p>Spring 团队最近发布了他们的授权服务器。OAuth2 一直是一个热门话题，而构建或理解授权服务器一直是一个谜。在本系列的&lt;a href="https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-1-knowing-the-basic-concepts/">第 1 部分&lt;/a>中，我描述了几乎所有您需要了解的有关 OAuth2 的概念性内容。在本系列的这篇文章中，我将尝试演示如何构建具有&lt;strong>client_credential&lt;/strong>授权类型的授权服务器。我将从使用配置属性进行自动配置开始解释它们，并通过编写 Java 代码自定义配置。让我们开始吧。&lt;/p></description></item><item><title>[译]OAuth2 with Spring 第3部分：使用Spring授权服务器授予authorization_code OIDC客户端</title><link>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-3-authorizing-oidc-client-with-via-authorization-code-grant-from-spring/</link><pubDate>Wed, 05 Jun 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-3-authorizing-oidc-client-with-via-authorization-code-grant-from-spring/</guid><description>&lt;p>原文地址：&lt;a href="https://mainul35.medium.com/oauth2-with-spring-part-3-authorizing-oidc-client-with-via-authorization-code-grant-from-spring-67769f9dd68a" target="_blank">https://mainul35.medium.com/oauth2-with-spring-part-3-authorizing-oidc-client-with-via-authorization-code-grant-from-spring-67769f9dd68a&lt;/a>&lt;/p>
&lt;p>在&lt;a href="https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-2-getting-started-with-authorization-server/">上一篇文章&lt;/a>中，我们讨论了使用 client_credential 的 OAuth2 授权服务器配置。在本文中，我们将讨论使用 authorization_code 授予类型的授权服务器配置。此授权流程将有一个 OIDC 客户端，它将通过使用授权码进行请求来获取 JWT 令牌。&lt;/p></description></item><item><title>[译]OAuth2 with Spring 第4部分：Spring授权客户端与Google授权服务器的社交登录演示</title><link>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-4-spring-authorization-client-social-login-demo-with-google/</link><pubDate>Wed, 05 Jun 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-4-spring-authorization-client-social-login-demo-with-google/</guid><description>&lt;p>原文地址：&lt;a href="https://mainul35.medium.com/oauth2-with-spring-part-4-spring-authorization-client-social-login-demo-with-google-be6097ec18a5" target="_blank">https://mainul35.medium.com/oauth2-with-spring-part-4-spring-authorization-client-social-login-demo-with-google-be6097ec18a5&lt;/a>&lt;/p>
&lt;p>在&lt;a href="https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-3-authorizing-oidc-client-with-via-authorization-code-grant-from-spring/">之前的文章&lt;/a>中，我们学习了如何使用 OIDC 连接到我们自己的授权服务器。我们在自托管授权服务器中定义了我们自己的客户端应用程序。在今天的文章中，我们将使用 Google 和 GitHub 作为我们的授权服务器，并将我们的授权客户端应用程序连接到这些授权服务器并从它们接收令牌。应用程序登录屏幕将如下所示。&lt;/p></description></item><item><title>[译]OAuth2 with Spring 第5部分：使用PKCE保护您的Spring Boot应用程序以增强安全性</title><link>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-5-securing-your-spring-boot-application-with-pkce-for-enhanced-security/</link><pubDate>Wed, 05 Jun 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-5-securing-your-spring-boot-application-with-pkce-for-enhanced-security/</guid><description>&lt;p>原文地址：&lt;a href="https://mainul35.medium.com/oauth2-with-spring-part-5-securing-your-spring-boot-application-with-pkce-for-enhanced-security-d8025cd08769" target="_blank">https://mainul35.medium.com/oauth2-with-spring-part-5-securing-your-spring-boot-application-with-pkce-for-enhanced-security-d8025cd08769&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>免责声明：本文技术性很强，需要清楚了解本系列前几篇文章，特别是第 1 部分和第 3 部分。&lt;/p>&lt;/blockquote>
&lt;p>带有代码交换证明密钥 (PKCE) 的授权代码流用于无法存储客户端机密的应用程序。此类应用程序包括：&lt;/p></description></item><item><title>[译]OAuth2.0服务器</title><link>https://blog.chensoul.cc/posts/2024/06/05/oauth2-server/</link><pubDate>Wed, 05 Jun 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/06/05/oauth2-server/</guid><description>&lt;h1 id="背景">背景&lt;/h1>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>&lt;em>作者：&lt;a href="https://aaronparecki.com/" target="_blank">Aaron Parecki&lt;/a>&lt;/em>&lt;/p>
&lt;p>我第一次接触 OAuth 是在 2010 年，当时我正在构建一个 API，我知道我希望第三方开发人员能够在其基础上构建应用程序。当时，OAuth 看起来令人生畏。OAuth 1 的实现只有少数几个，而 OAuth 2.0 仍是一个草稿。一天晚上，我决定坐下来，拿着精酿啤酒和最新草案的纸质副本，从头到尾阅读它，直到我理解它。&lt;/p></description></item><item><title>[译]OAuth2简化版</title><link>https://blog.chensoul.cc/posts/2024/06/05/oauth-2-simplified/</link><pubDate>Wed, 05 Jun 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/06/05/oauth-2-simplified/</guid><description>&lt;p>这篇文章以简化的格式描述了 OAuth 2.0，以帮助开发人员和服务提供商实现该协议。&lt;/p>
&lt;p>&lt;a href="https://oauth.net/2/" target="_blank">OAuth 2 规范&lt;/a>读起来可能有点混乱，所以我写了这篇文章来帮助以简化的格式描述术语。核心规范将许多决策留给实现者，通常基于实现的安全权衡。这篇文章没有描述成功实施 OAuth 2 所需的所有可能决策，而是做出适用于大多数实现的决策。&lt;/p></description></item><item><title>RFC6749 | OAuth2.0授权框架中文版</title><link>https://blog.chensoul.cc/posts/2024/06/05/oauth2/</link><pubDate>Wed, 05 Jun 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/06/05/oauth2/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;h3 id="摘要">摘要&lt;/h3>
&lt;p>OAuth2.0 授权框架允许第三方应用获取对 HTTP 服务的有限的访问权限，既可以以资源所有者名义在资源所有者和 HTTP 服务之间进行允许的交互，也可以允许第三方应用以自己的名义进行访问。本规范取代并淘汰 RFC 5849 中描述的 OAuth 1.0 协议。&lt;/p></description></item><item><title>[译]使用 Spring Boot 构建 RESTful API：集成 DDD 和六边形架构</title><link>https://blog.chensoul.cc/posts/2024/05/30/building-a-restful-api-with-spring-boot-integrating-ddd-and-hexagonal-architecture/</link><pubDate>Thu, 30 May 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/05/30/building-a-restful-api-with-spring-boot-integrating-ddd-and-hexagonal-architecture/</guid><description>&lt;p>原文链接：&lt;a href="https://medium.com/@juannegrin/building-a-restful-api-with-spring-boot-integrating-ddd-and-hexagonal-architecture-df50fe24a1ff" target="_blank">Building a RESTful API with Spring Boot: Integrating DDD and Hexagonal Architecture&lt;/a>&lt;/p></description></item><item><title>[译]如何组织代码</title><link>https://blog.chensoul.cc/posts/2024/05/30/how-to-structure-our-code/</link><pubDate>Thu, 30 May 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/05/30/how-to-structure-our-code/</guid><description>&lt;p>原文链接：&lt;a href="https://medium.com/@minadev/how-to-structure-our-code-b5e7b1c32c21" target="_blank">How to Structure Code&lt;/a>&lt;/p>
&lt;p>&lt;em>软件设计最佳实践，逐层发现包、按功能发现包以及六角形架构/端口和适配器。&lt;/em>&lt;/p>
&lt;p>在这篇博文中，我将探讨如何构建我们的代码并讨论最佳实践，涵盖三种不同的方法：按层打包、按功能打包以及六边形架构/端口和适配器及其优缺点。&lt;/p>
&lt;p>在探索构建代码的不同方法之前，我们需要了解基本的软件设计原则：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>内聚力&lt;/strong>：指模块内各类之间的相互关联程度。&lt;/li>
&lt;li>&lt;strong>耦合度&lt;/strong>：指不同模块之间的依赖程度。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://blog.chensoul.cc/images/how-to-structure-our-code-01-0766764.webp" alt="img">&lt;/p></description></item><item><title>Redis安装和部署</title><link>https://blog.chensoul.cc/posts/2024/05/14/redis-install/</link><pubDate>Tue, 14 May 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/05/14/redis-install/</guid><description>&lt;h2 id="单机安装">单机安装&lt;/h2>
&lt;h3 id="通过-yum-安装">通过 yum 安装&lt;/h3>
&lt;p>在 CentOS 7 上通过 yum 安装 Redis，可以按照以下步骤进行操作：&lt;/p></description></item><item><title>Argo CD安装和部署</title><link>https://blog.chensoul.cc/posts/2024/05/11/argocd/</link><pubDate>Sat, 11 May 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/05/11/argocd/</guid><description>&lt;h2 id="安装-argocd">安装 ArgoCD&lt;/h2>
&lt;p>安装：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ kubectl create namespace argocd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看安装是否成功，当argocd命名空间下Pod状态都为Running时表示安装成功。&lt;/p></description></item><item><title>All things about WebSocket</title><link>https://blog.chensoul.cc/posts/2024/05/10/all-things-about-websocket/</link><pubDate>Fri, 10 May 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/05/10/all-things-about-websocket/</guid><description>&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/WebSocket" target="_blank">Wikipedia：WebSocket&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket" target="_blank">WebSocket - Web APIs | MDN&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.pubnub.com/guides/websockets/" target="_blank">PubNub：什么是 WebSocket？&lt;/a>&lt;/p></description></item><item><title>K8s安装Cert Manager</title><link>https://blog.chensoul.cc/posts/2024/05/10/install-cert-manager/</link><pubDate>Fri, 10 May 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/05/10/install-cert-manager/</guid><description>&lt;p>cert-manager 为 Kubernetes 或 OpenShift 集群中的工作负载创建 TLS 证书，并在证书过期之前续订证书。&lt;/p></description></item><item><title>Rancher安装和部署-使用K8s</title><link>https://blog.chensoul.cc/posts/2024/05/10/install-rancher/</link><pubDate>Fri, 10 May 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/05/10/install-rancher/</guid><description>&lt;h2 id="前提条件">前提条件&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://ranchermanager.docs.rancher.com/zh/getting-started/installation-and-upgrade/install-upgrade-on-a-kubernetes-cluster#kubernetes-%e9%9b%86%e7%be%a4" target="_blank">Kubernetes 集群&lt;/a>：可以使用 &lt;strong>RKE&lt;/strong>、&lt;strong>RKE2&lt;/strong>、&lt;strong>K3S&lt;/strong> 等工具安装集群&lt;/li>
&lt;li>&lt;a href="https://ranchermanager.docs.rancher.com/zh/getting-started/installation-and-upgrade/install-upgrade-on-a-kubernetes-cluster#ingress-controller" target="_blank">Ingress Controller&lt;/a>：对于 RKE、RKE2 和 K3s，你不需要手动安装 Ingress Controller，因为它是默认安装的。&lt;/li>
&lt;li>&lt;a href="https://ranchermanager.docs.rancher.com/zh/getting-started/installation-and-upgrade/install-upgrade-on-a-kubernetes-cluster#cli-%e5%b7%a5%e5%85%b7" target="_blank">CLI 工具&lt;/a>：安装 kubectl 和 helm&lt;/li>
&lt;/ul>
&lt;h2 id="使用-docker-安装-rancher">使用 docker 安装 Rancher&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mkdir -p /data/rancher
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker run --name rancher --privileged -d --restart&lt;span style="color:#f92672">=&lt;/span>unless-stopped -p 80:80 -p 443:443 -v /data/rancher:/var/lib/rancher/ rancher/rancher:stable
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker logs -f rancher
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="使用-helm-安装-rancher">使用 helm 安装 Rancher&lt;/h2>
&lt;p>参考：&lt;a href="https://ranchermanager.docs.rancher.com/zh/getting-started/installation-and-upgrade/install-upgrade-on-a-kubernetes-cluster" target="_blank">在 Kubernetes 集群上安装/升级 Rancher&lt;/a>&lt;/p></description></item><item><title>All things about Drone</title><link>https://blog.chensoul.cc/posts/2024/05/09/all-things-about-drone/</link><pubDate>Thu, 09 May 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/05/09/all-things-about-drone/</guid><description>&lt;p>Drone by &lt;a href="https://harness.io/" target="_blank">Harness&lt;/a> ™ 是一个现代化的持续集成平台，使忙碌的团队能够使用强大的云原生管道引擎自动化其构建、测试和发布工作流程。&lt;/p>
&lt;h2 id="drone实践">Drone实践&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://avnpc.com/p/202" target="_blank">Docker 容器环境下的持续集成最佳实践：构建基于 Drone + GitFlow + K8s 的云原生语义化 CI 工作流&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://avnpc.com/p/204" target="_blank">容器环境持续集成优化，Drone CI 提速 500%&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.itfanr.cc/2019/07/11/run-drone-cicd-on-kubernetes/" target="_blank">在Kubernetes上执行Drone CI/CD&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://developer.aliyun.com/article/718091?spm=a2c6h.13262185.0.0.20ad7863aYuwQH" target="_blank">玩转 Drone CI&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://maiyang.me/post/2018-08-11-gitlab-gogs-drone-cicd/" target="_blank">基于 gogs/gitlab 和 drone 搭建的 CI/CD 平台&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://sealyun.com/post/ci-cd/" target="_blank">基于drone构建CI/CD系统,对接k8s&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>使用Drone构建静态博客&lt;/p></description></item><item><title>All things about Spring Modulith</title><link>https://blog.chensoul.cc/posts/2024/05/09/all-things-about-spring-modulith/</link><pubDate>Thu, 09 May 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/05/09/all-things-about-spring-modulith/</guid><description>&lt;p>VMware 推出了一个实验性的项目&lt;a href="https://spring.io/projects/spring-modulith" target="_blank">Spring Modulith&lt;/a>，以便于通过模块和事件更好地组织 Spring Boot 3 应用。该项目引入了新的类和注解，但并不会生成代码。它的模块没有使用 Java Platform Module System（JPMS），而是映射到了普通的 Java 包。模块有 API，但是 Spring Modulith 鼓励使用 Spring 应用事件作为“主要的交互方式”。这些事件可以自动持久化到事件日志中。Spring Modulith 还简化了模块和事件的测试。&lt;/p></description></item><item><title>安装k3s</title><link>https://blog.chensoul.cc/posts/2024/05/09/install-k3s/</link><pubDate>Thu, 09 May 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/05/09/install-k3s/</guid><description>&lt;p>K3s 是轻量级的 Kubernetes。K3s 易于安装，仅需要 Kubernetes 内存的一半，所有组件都在一个小于 100 MB 的二进制文件中。&lt;/p></description></item><item><title>通过k3d安装k3s</title><link>https://blog.chensoul.cc/posts/2024/05/09/install-k3s-using-k3d/</link><pubDate>Thu, 09 May 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/05/09/install-k3s-using-k3d/</guid><description>&lt;h2 id="k3d是什么">k3d是什么&lt;/h2>
&lt;p>k3d 是一个轻量级包装器，用于在 docker 中运行&lt;a href="https://github.com/rancher/k3s" target="_blank">k3s&lt;/a>（Rancher Lab 的最小 Kubernetes 发行版）。&lt;/p></description></item><item><title>通过k3sup安装k3s</title><link>https://blog.chensoul.cc/posts/2024/05/09/install-k3s-using-k3sup/</link><pubDate>Thu, 09 May 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/05/09/install-k3s-using-k3sup/</guid><description>&lt;p>k3sup是一个支持在PC、虚拟机、ARM设备上安装k3s的工具，官方网站：&lt;a href="https://k3sup.dev/" target="_blank">https://k3sup.dev/&lt;/a>&lt;/p>
&lt;h2 id="安装k3sup">安装k3sup&lt;/h2>
&lt;p>在线安装：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -sLS https://get.k3sup.dev | sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo install k3sup /usr/local/bin/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>离线安装，下载地址：&lt;a href="https://github.com/alexellis/k3sup/releases" target="_blank">https://github.com/alexellis/k3sup/releases&lt;/a>&lt;/p></description></item><item><title>[译]探索 http2（第 1 部分）：概述</title><link>https://blog.chensoul.cc/posts/2024/05/08/exploring-http2-part-1-overview/</link><pubDate>Wed, 08 May 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/05/08/exploring-http2-part-1-overview/</guid><description>&lt;p>原文链接：&lt;a href="https://noobj.medium.com/exploring-http2-part-1-overview-dc3e9b53968f" target="_blank">https://noobj.medium.com/exploring-http2-part-1-overview-dc3e9b53968f&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>让我们来谈谈&lt;/em> &lt;strong>http2 的内容、原因、时间和方式&lt;/strong>&lt;/p>&lt;/blockquote>
&lt;p>完整的代码可以在&lt;a href="https://github.com/noobg1/http1_vs_http2" target="_blank">github&lt;/a>上找到。&lt;/p>
&lt;p>&lt;strong>第 1 部分：概述&lt;/strong>
第 2 部分：&lt;a href="https://medium.com/@noobj/exploring-http2-part-2-with-node-http2-core-and-hapijs-74e3df14249" target="_blank">使用 node-http2 核心和 hapijs 进行探索&lt;/a>&lt;/p></description></item><item><title>[译]探索 http2（第 2 部分）：使用 node-http2 核心和 hapijs</title><link>https://blog.chensoul.cc/posts/2024/05/08/exploring-http2-part-2-overview/</link><pubDate>Wed, 08 May 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/05/08/exploring-http2-part-2-overview/</guid><description>&lt;p>原文链接：&lt;a href="https://noobj.medium.com/exploring-http2-part-2-with-node-http2-core-and-hapijs-74e3df14249" target="_blank">https://noobj.medium.com/exploring-http2-part-2-with-node-http2-core-and-hapijs-74e3df14249&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://blog.chensoul.cc/images/exploring-http2-part-2-overview-01.webp" alt="img">&lt;/p>
&lt;p>来源：&lt;a href="https://www.thewebmaster.com/hosting/2015/dec/14/what-is-http2-and-how-does-it-compare-to-http1-1/" target="_blank">https://www.thewebmaster.com/&lt;/a>&lt;/p>
&lt;p>&lt;strong>先决条件&lt;/strong>：了解 javascript、客户端-服务器架构。&lt;/p>
&lt;p>完整的代码可以在&lt;a href="https://github.com/noobg1/http1_vs_http2" target="_blank">github&lt;/a>上找到。&lt;/p>
&lt;p>第 1 部分：&lt;a href="https://medium.com/@noobj/exploring-http2-part-1-overview-dc3e9b53968f" target="_blank">概述（&lt;em>http2 的原因、内容、时间、方式&lt;/em>）&lt;/a>&lt;strong>第 2 部分：使用 node-http2 核心和 hapijs 进行探索&lt;/strong>&lt;/p></description></item><item><title>[译]比较 Socket.IO 和 HTTP：主要区别和用例</title><link>https://blog.chensoul.cc/posts/2024/05/08/socketio-vs-http/</link><pubDate>Wed, 08 May 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/05/08/socketio-vs-http/</guid><description>&lt;p>原文链接：&lt;a href="https://ably.com/topic/socketio-vs-http" target="_blank">https://ably.com/topic/socketio-vs-http&lt;/a>&lt;/p>
&lt;p>在规划实时应用程序时，您应该仔细考虑要使用哪些技术。本文对&lt;a href="https://ably.com/topic/socketio" target="_blank">Socket.IO&lt;/a>实时库和&lt;a href="https://ably.com/topic/websockets-vs-http#http" target="_blank">HTTP&lt;/a>协议进行了比较。下面您将了解每种解决方案的功能、每种解决方案的优缺点以及何时使用它们。&lt;/p>
&lt;h2 id="什么是socketio">什么是Socket.IO？&lt;/h2>
&lt;p>Socket.IO 是一个创建于 2010 年的库，提供客户端和服务器之间的实时双向通信。它允许管理连接、发送和接收消息等等。这使得 Socket.IO 成为构建消息/聊天应用程序的理想选择。&lt;/p></description></item><item><title>[译]2024年最好的WebSocket替代品</title><link>https://blog.chensoul.cc/posts/2024/05/07/websocket-alternatives/</link><pubDate>Tue, 07 May 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/05/07/websocket-alternatives/</guid><description>&lt;p>原文链接：&lt;a href="https://ably.com/topic/websocket-alternatives" target="_blank">https://ably.com/topic/websocket-alternatives&lt;/a>&lt;/p>
&lt;h2 id="什么是-websocket">什么是 WebSocket？&lt;/h2>
&lt;p>简而言之，WebSocket 是一种实时 Web 技术，可通过持久连接在客户端和服务器之间实现双向、全双工通信。 WebSocket 连接会根据需要保持活动状态（理论上，它可以永远持续），从而允许服务器和客户端以最小的开销随意发送数据。&lt;/p></description></item><item><title>[译]Apache Kafka、RabbitMQ 与 AWS SNSSQS：哪个消息代理最好？</title><link>https://blog.chensoul.cc/posts/2024/05/07/apache-kafka-vs-rabbitmq-vs-aws-sns-sqs/</link><pubDate>Tue, 07 May 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/05/07/apache-kafka-vs-rabbitmq-vs-aws-sns-sqs/</guid><description>&lt;p>原文链接：&lt;a href="https://ably.com/topic/apache-kafka-vs-rabbitmq-vs-aws-sns-sqs" target="_blank">https://ably.com/topic/apache-kafka-vs-rabbitmq-vs-aws-sns-sqs&lt;/a>&lt;/p>
&lt;p>将消息从一个组件获取到另一个组件是微服务架构中最重要的部分之一。每个服务必须能够与任何其他服务异步、可靠且大规模地通信。&lt;/p>
&lt;p>这就是消息代理的用武之地。消息代理（例如 Apache Kafka、RabbitMQ 和&lt;a href="https://ably.com/topic/aws-sns-vs-sqs" target="_blank">AWS SNS/SQS&lt;/a>）为您提供一个通用接口和一组保证，而不是手动协调可能数千个微服务之间的通信。这简化了集成并更容易推理您的系统。&lt;/p>
&lt;p>然而，比较消息代理可能很棘手，因为每个消息代理都采用不同的方法来完成工作。那么，您如何决定哪个消息代理最适合您的用例？&lt;/p></description></item><item><title>[译]HTTP 的演变 – HTTP2 深入探讨</title><link>https://blog.chensoul.cc/posts/2024/05/07/http2/</link><pubDate>Tue, 07 May 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/05/07/http2/</guid><description>&lt;p>原文链接：&lt;a href="https://ably.com/topic/http2" target="_blank">https://ably.com/topic/http2&lt;/a>&lt;/p>
&lt;p>可以毫不夸张地说，超文本传输协议 (HTTP) 造就了我们所熟知的互联网。 HTTP 最初是由万维网的发明者蒂姆·伯纳斯·李 (Tim Berners-Lee) 于 1989 年提出的应用程序协议。第一个记录版本 HTTP/0.9 被称为单行协议。鉴于它催生了万维网，它现在可以被描述为有史以来最伟大的俏皮话。&lt;/p></description></item><item><title>[译]Java和WebSockets：构建可靠的实时应用程序</title><link>https://blog.chensoul.cc/posts/2024/05/07/websockets-java/</link><pubDate>Tue, 07 May 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/05/07/websockets-java/</guid><description>&lt;p>原文：&lt;a href="https://ably.com/topic/websockets-java" target="_blank">https://ably.com/topic/websockets-java&lt;/a>&lt;/p>
&lt;p>在全球范围内，人们对实时传输数据的需求不断增长，&lt;a href="https://ably.com/topic/websockets" target="_blank">WebSocket&lt;/a>可能是此类用例中最流行的传输协议。在 WebSocket 出现之前，“实时”网络已经存在，但它很难实现，通常速度较慢，并且是通过破解现有的网络技术来实现的，而这些技术并不是为实时应用程序设计的。 WebSocket 协议为真正的实时网络铺平了道路。&lt;/p>
&lt;p>Java是一种流行的编程语言和计算语言。它是 Android 智能手机应用程序的核心编程语言之一，是构建实时系统的可靠选择。 WebSockets 成为 Java 标准版 SDK 的一部分已经有一段时间了。WebSocket 协议最初是在 2013 年作为&lt;a href="https://www.oracle.com/technical-resources/articles/java/jsr356.html" target="_blank">JSR 356&lt;/a>的一部分提出的，目前已作为&lt;a href="https://docs.oracle.com/javaee/7/api/index.html?javax/websocket/package-summary.html" target="_blank">javax.websocket&lt;/a>包的一部分包含在 Java SDK 中。&lt;/p></description></item><item><title>[译]WebSocket API和协议说明</title><link>https://blog.chensoul.cc/posts/2024/05/07/the-websocket-api-and-protocol-explained/</link><pubDate>Tue, 07 May 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/05/07/the-websocket-api-and-protocol-explained/</guid><description>&lt;p>原文地址：&lt;a href="https://ably.com/topic/websockets" target="_blank">https://ably.com/topic/websockets&lt;/a>&lt;/p>
&lt;p>WebSocket 标志着 Web 开发的转折点。 WebSocket 技术旨在以事件为驱动，并针对低延迟进行了优化，已成为许多寻求构建交互式实时数字体验以提供令人愉悦的用户体验的组织和开发人员的首选。本文探讨了与 WebSocket 相关的关键主题：&lt;/p></description></item><item><title>[译]WebSocket与HTTP：2024年为您的项目选择哪一个</title><link>https://blog.chensoul.cc/posts/2024/05/07/websockets-vs-http/</link><pubDate>Tue, 07 May 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/05/07/websockets-vs-http/</guid><description>&lt;p>原文链接：&lt;a href="https://ably.com/topic/websockets-vs-http" target="_blank">https://ably.com/topic/websockets-vs-http&lt;/a>&lt;/p>
&lt;p>当谈到 WebSocket 与 HTTP 时，决定使用哪一种并不总是那么明确。哪一个更好？您的应用程序应该使用哪一款？&lt;/p>
&lt;p>但问题的答案不一定是其中之一 - 开发人员经常根据场景在同一个应用程序中同时使用 WebSocket 和 HTTP。更重要的问题是 - 我如何确定 WebSockets 还是 HTTP 是特定类型通信的正确通信协议？&lt;/p></description></item><item><title>[译]WebSocket与REST</title><link>https://blog.chensoul.cc/posts/2024/05/07/websocket-vs-rest/</link><pubDate>Tue, 07 May 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/05/07/websocket-vs-rest/</guid><description>&lt;p>原文链接：&lt;a href="https://ably.com/topic/websocket-vs-rest" target="_blank">https://ably.com/topic/websocket-vs-rest&lt;/a>&lt;/p>
&lt;p>无论您是将客户端连接到服务器、将微服务相互连接，还是将应用程序的一部分连接到外部服务，在通信方法方面，您几乎都会有多种选择。不过，有两个比较突出：WebSocket 和 REST。&lt;/p>
&lt;p>好消息是，尽管为应用程序选择核心技术是一项严肃的责任，但由于 WebSocket 和 REST 不同的架构选择、性能特征和实现考虑因素，在 WebSocket 和 REST 之间进行选择相对简单。这意味着双方都可以解决对方可能遇到的问题。&lt;/p></description></item><item><title>[译]什么是 HTTP？</title><link>https://blog.chensoul.cc/posts/2024/05/07/http/</link><pubDate>Tue, 07 May 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/05/07/http/</guid><description>&lt;p>原文链接：&lt;a href="https://www.pubnub.com/guides/http/" target="_blank">https://www.pubnub.com/guides/http/&lt;/a>&lt;/p>
&lt;h2 id="http-概述">HTTP 概述&lt;/h2>
&lt;p>HTTP，即超文本传输协议，是互联网通信的基础。它在客户端-服务器模型上运行，其中前端客户端（例如网络浏览器）通过向服务器发送HTTP请求消息来发起请求，例如请求网页（例如搜索引擎）。然后，服务器使用包含所请求资源的 HTTP 响应消息进行响应，如果资源不可用，则使用错误消息进行响应。&lt;/p>
&lt;p>HTTP 是一种无状态协议，这意味着每个请求都是独立的，与之前或将来的请求无关。这允许客户端和服务器之间进行有效的通信。&lt;/p></description></item><item><title>[译]什么是 OAuth？</title><link>https://blog.chensoul.cc/posts/2024/05/07/oauth/</link><pubDate>Tue, 07 May 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/05/07/oauth/</guid><description>&lt;p>原文链接：&lt;a href="https://www.pubnub.com/guides/oauth/" target="_blank">https://www.pubnub.com/guides/oauth/&lt;/a>&lt;/p>
&lt;h2 id="什么是-oauth">什么是 OAuth？&lt;/h2>
&lt;p>&lt;a href="https://oauth.net/" target="_blank">OAuth（开放授权）&lt;/a>是一种开放标准授权框架，允许第三方应用程序访问用户数据，而无需用户共享其登录凭据。它为用户提供了一种安全且标准化的方式，将其在一个网站上的资源的访问权限授予另一个网站或应用程序，而无需暴露其密码。&lt;/p>
&lt;p>简单来说，OAuth 充当最终用户和他们想要授予访问权限的应用程序之间的中间人。用户不会直接向 Web 应用程序提供用户名和密码，而是会被重定向到授权服务器（例如 Google、Facebook 或 Twitter），在那里他们可以安全地验证自己的身份。经过身份验证后，用户可以授予或拒绝对其想要使用的应用程序上的数据的访问权限。&lt;/p></description></item><item><title>[译]什么是HTTP/3？</title><link>https://blog.chensoul.cc/posts/2024/05/07/http3/</link><pubDate>Tue, 07 May 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/05/07/http3/</guid><description>&lt;p>原文链接：&lt;a href="https://www.pubnub.com/guides/http-3/" target="_blank">https://www.pubnub.com/guides/http-3/&lt;/a>&lt;/p>
&lt;h2 id="什么是-http3">什么是 HTTP/3？&lt;/h2>
&lt;p>HTTP/3（或 HTTP-over-QUIC）是超文本传输协议 ( &lt;a href="https://www.pubnub.com/guides/http/" target="_blank">HTTP&lt;/a> ) 的第三个主要版本。它是用于 Web 浏览器和服务器之间通信的应用层协议。 HTTP/3 旨在提高 Web 通信的性能和安全性。&lt;/p></description></item><item><title>[译]什么是HTTP流式传输？</title><link>https://blog.chensoul.cc/posts/2024/05/07/http-streaming/</link><pubDate>Tue, 07 May 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/05/07/http-streaming/</guid><description>&lt;p>原文链接：&lt;a href="https://www.pubnub.com/guides/http-streaming/" target="_blank">https://www.pubnub.com/guides/http-streaming/&lt;/a>&lt;/p>
&lt;h2 id="什么是-http-流式传输">什么是 HTTP 流式传输？&lt;/h2>
&lt;p>HTTP 流，也称为基于 HTTP 的流或 HTTP 实时流，是一种用于通过 Internet 传送实时多媒体内容（例如音频或视频）的技术。该协议允许从服务器到客户端设备的连续数据传输，使用户能够消费媒体内容而无需完整的文件下载。&lt;/p></description></item><item><title>[译]什么是Socket.IO？</title><link>https://blog.chensoul.cc/posts/2024/05/07/socket-io/</link><pubDate>Tue, 07 May 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/05/07/socket-io/</guid><description>&lt;p>原文链接：&lt;a href="https://www.pubnub.com/guides/socket-io/" target="_blank">https://www.pubnub.com/guides/socket-io/&lt;/a>&lt;/p>
&lt;h1 id="什么是socketio">什么是Socket.IO？&lt;/h1>
&lt;p>&lt;a href="https://socket.io/" target="_blank">Socket.IO&lt;/a>是一个开源的跨平台库，它提供客户端和服务器之间基于事件的&lt;a href="https://www.geeksforgeeks.org/transmission-modes-computer-networks/" target="_blank">全双工双向通信&lt;/a>。它基于 WebSocket 协议构建，提供附加功能，例如自动重新连接以及在无法使用 &lt;a href="https://www.pubnub.com/guides/what-are-websockets-and-when-should-you-use-them/" target="_blank">WebSocket时回退到&lt;/a>&lt;a href="https://www.pubnub.com/blog/http-long-polling/" target="_blank">HTTP 长轮询。&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://blog.chensoul.cc/images/Client_Server.webp" alt="img">&lt;/p>
&lt;p>Socket.IO 客户端由客户端和服务器端库组成。虽然最初在服务器上支持&lt;a href="https://www.pubnub.com/blog/nodejs-websocket-programming-examples/" target="_blank">NodeJS ，在客户端支持&lt;/a>&lt;a href="https://www.pubnub.com/guides/javascript/" target="_blank">JavaScript&lt;/a>，但现在它支持各种服务器和客户端技术，包括&lt;a href="https://www.pubnub.com/docs/sdks/java" target="_blank">Java&lt;/a>、&lt;a href="https://www.pubnub.com/docs/sdks/python" target="_blank">Python&lt;/a>、&lt;a href="https://www.pubnub.com/docs/sdks/swift" target="_blank">Swift&lt;/a>和&lt;a href="https://www.pubnub.com/docs/sdks/kotlin" target="_blank">Kotlin&lt;/a>，它们都是官方代码库的一部分，由活跃社区贡献。&lt;/p></description></item><item><title>[译]什么是WebSocket？</title><link>https://blog.chensoul.cc/posts/2024/05/07/websockets/</link><pubDate>Tue, 07 May 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/05/07/websockets/</guid><description>&lt;p>原文链接：&lt;a href="https://www.pubnub.com/guides/websockets/" target="_blank">https://www.pubnub.com/guides/websockets/&lt;/a>&lt;/p>
&lt;h2 id="什么是-websocket">什么是 WebSocket？&lt;/h2>
&lt;p>&lt;a href="https://www.pubnub.com/guides/tcp-ip/" target="_blank">WebSocket 是一种通过单个TCP&lt;/a>连接提供全双工通信通道的通信协议。它支持客户端和服务器之间的实时、事件驱动的连接。&lt;/p>
&lt;p>与遵循请求-响应模型的传统 HTTP 软件不同，WebSocket 允许双向（双向）通信。这意味着客户端和服务器可以随时向对方发送数据，而无需持续轮询。&lt;/p></description></item><item><title>[译]什么是长轮询？</title><link>https://blog.chensoul.cc/posts/2024/05/07/long-polling/</link><pubDate>Tue, 07 May 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/05/07/long-polling/</guid><description>&lt;p>原文链接：&lt;a href="https://www.pubnub.com/guides/long-polling/" target="_blank">https://www.pubnub.com/guides/long-polling/&lt;/a>&lt;/p>
&lt;h2 id="什么是长轮询">什么是长轮询？&lt;/h2>
&lt;p>长轮询用于实时 Web 应用程序，以实现客户端和 Web 服务器之间近乎即时的通信。它在实时更新至关重要的聊天和消息应用程序中特别有用。&lt;/p>
&lt;p>在传统的&lt;a href="https://www.pubnub.com/guides/http/" target="_blank">HTTP&lt;/a>通信中，客户端向服务器发送新请求并等待响应。这称为短轮询。然而，在实时场景中，短轮询可能效率不高，因为它需要频繁向服务器请求，导致不必要的网络开销和增加延迟。&lt;/p></description></item><item><title>[译]如何通过 WebSocket 将 Kafka 消息流式传输到面向互联网的客户端</title><link>https://blog.chensoul.cc/posts/2024/05/07/websockets-kafka/</link><pubDate>Tue, 07 May 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/05/07/websockets-kafka/</guid><description>&lt;p>原文链接：&lt;a href="https://ably.com/topic/websockets-kafka" target="_blank">https://ably.com/topic/websockets-kafka&lt;/a>&lt;/p>
&lt;p>Apache Kafka 是目前最强大的异步消息传递技术之一。 Kafka 由 Jay Kreps、Jun Rao 和 Neha Narkhede 等团队于 2010 年在 LinkedIn 设计，并于 2011 年初开源。如今，该工具被众多公司（包括科技巨头，例如 Slack、Airbnb 或 Netflix 使用）为其实时数据流管道提供支持。&lt;/p></description></item><item><title>ThingsBoard的领域模型</title><link>https://blog.chensoul.cc/posts/2024/05/07/thingsboard-domain/</link><pubDate>Tue, 07 May 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/05/07/thingsboard-domain/</guid><description>&lt;p>ThingsBoard是一个开源的物联网平台，用于管理和监控物联网设备和数据。它提供了一个可扩展的架构，可以连接各种设备，并实时收集、处理和分析设备生成的数据。&lt;/p>
&lt;h2 id="领域模型">领域模型&lt;/h2>
&lt;p>在ThingsBoard中，领域模型是一个关键概念，用于描述物联网系统中的物理实体、属性和行为。以下是ThingsBoard中的主要领域模型组件：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>租户（Tenant）：租户是ThingsBoard中的顶级组织单位。它代表了一个独立的实体，可以是一个用户、组织或公司。租户拥有和管理自己的设备、客户、规则和仪表板等资源。租户之间的数据和配置是相互隔离的，每个租户都有自己的独立环境。租户由系统管理员创建和管理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>租户配置（TenantProfile）：用于定义租户级别的配置和属性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>客户（Customer）：客户是租户下的子级实体，代表了物联网系统中的用户或组织。一个租户可以包含多个客户，每个客户都有自己的访问权限和角色。客户可以访问和监控租户下的设备和数据。客户可以有自己的设备、规则和仪表板等资源，但这些资源受到租户级别的限制。客户由租户管理员创建和管理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>用户（User）：保存用户的基本信息&lt;/p>
&lt;ol>
&lt;li>用户的角色（Authority）：SYS_ADMIN、TENANT_ADMIN、CUSTOMER_USER、REFRESH_TOKEN、PRE_VERIFICATION_TOKEN&lt;/li>
&lt;li>用户凭证（UserCredentials）：保存用户的密码、激活用户 Token、重置密码 Token、密码使用历史&lt;/li>
&lt;li>用户认证设置（UserAuthSettings）：保存用户 2FA 认证设置&lt;/li>
&lt;li>用户设置（UserSettings）：保存用户的设置，包括：通用设置、通知、访问过的仪表盘等等&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>系统设置（AdminSettings）：是用于配置和管理整个系统的全局设置和参数，包括：通用设置、邮件、JWT、连接设置等等。&lt;/p></description></item><item><title>All things about ThingsBoard</title><link>https://blog.chensoul.cc/posts/2024/04/29/all-things-about-thingsboard/</link><pubDate>Mon, 29 Apr 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/04/29/all-things-about-thingsboard/</guid><description>&lt;p>thingsboard 是一款乌克兰团队基于java语言研发的开源物联网框架，开源的是ce版，企业版需要购买授权且无源码。&lt;/p>
&lt;p>官方网站：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Thingsboard 官网：&lt;a href="https://thingsboard.io/" target="_blank">https://thingsboard.io/&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Thingsboard社区免费版本：&lt;a href="https://demo.thingsboard.io/" target="_blank">https://demo.thingsboard.io/&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Thingsboard 企业付费版本：&lt;a href="https://thingsboard.cloud/" target="_blank">https://thingsboard.cloud/&lt;/a>&lt;/p></description></item><item><title>TBMQ测试和源码分析</title><link>https://blog.chensoul.cc/posts/2024/04/28/thingsboard-tbmq-test/</link><pubDate>Sun, 28 Apr 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/04/28/thingsboard-tbmq-test/</guid><description>&lt;ol>
&lt;li>
&lt;p>启动 TBMQ 程序，浏览器访问 http://localhost:8083，创建一个 Application，Credentials Type 为 BASIC，客户端 ID、用户名和密码均设置为 tbmq_app&lt;/p></description></item><item><title>ThingsBoard TBMQ本地和通过Docker运行</title><link>https://blog.chensoul.cc/posts/2024/04/17/thingsboard-tbmq-local-docker-run/</link><pubDate>Wed, 17 Apr 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/04/17/thingsboard-tbmq-local-docker-run/</guid><description>&lt;h2 id="docker-compose-运行">docker-compose 运行&lt;/h2>
&lt;p>参考：&lt;a href="https://thingsboard.io/docs/mqtt-broker/install/cluster/docker-compose-setup/" target="_blank">https://thingsboard.io/docs/mqtt-broker/install/cluster/docker-compose-setup/&lt;/a>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>下载源代码&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone -b release-1.3.0 https://github.com/thingsboard/tbmq.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd tbmq/docker
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>创建逻辑卷并执行安装程序&lt;/p></description></item><item><title>2024-02-20｜RateLimitAspect请求限流、调整spring-cloud-examples项目结构</title><link>https://blog.chensoul.cc/posts/2024/02/20/til/</link><pubDate>Tue, 20 Feb 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/02/20/til/</guid><description>&lt;p>今天做了什么：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>ChatGPT 编写一个 RateLimitAspect 类，实现基于用户的 get 查询请求的限流功能&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Aspect&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Component&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">RateLimitAspect&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> RedisTemplate&lt;span style="color:#f92672">&amp;lt;&lt;/span>String, Object&lt;span style="color:#f92672">&amp;gt;&lt;/span> redisTemplate;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> Logger logger &lt;span style="color:#f92672">=&lt;/span> LoggerFactory.&lt;span style="color:#a6e22e">getLogger&lt;/span>(RateLimitAspect.&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> maxRequests; &lt;span style="color:#75715e">// Maximum number of requests&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> timeWindow; &lt;span style="color:#75715e">// Time window in seconds&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Autowired&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">RateLimitAspect&lt;/span>(RedisTemplate&lt;span style="color:#f92672">&amp;lt;&lt;/span>String, Object&lt;span style="color:#f92672">&amp;gt;&lt;/span> redisTemplate) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">redisTemplate&lt;/span> &lt;span style="color:#f92672">=&lt;/span> redisTemplate;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">maxRequests&lt;/span> &lt;span style="color:#f92672">=&lt;/span> 100; &lt;span style="color:#75715e">// Default maximum number of requests is 100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">timeWindow&lt;/span> &lt;span style="color:#f92672">=&lt;/span> 60; &lt;span style="color:#75715e">// Default time window is 60 seconds&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Before&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;@annotation(getMapping)&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">applyRateLimit&lt;/span>(JoinPoint joinPoint, GetMapping getMapping) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HttpServletRequest request &lt;span style="color:#f92672">=&lt;/span> ((ServletRequestAttributes) RequestContextHolder
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">getRequestAttributes&lt;/span>()).&lt;span style="color:#a6e22e">getRequest&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (request &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> HttpMethod.&lt;span style="color:#a6e22e">GET&lt;/span>.&lt;span style="color:#a6e22e">matches&lt;/span>(request.&lt;span style="color:#a6e22e">getMethod&lt;/span>())) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String username &lt;span style="color:#f92672">=&lt;/span> request.&lt;span style="color:#a6e22e">getUserPrincipal&lt;/span>().&lt;span style="color:#a6e22e">getName&lt;/span>(); &lt;span style="color:#75715e">// Get the username&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (username &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#f92672">!&lt;/span>username.&lt;span style="color:#a6e22e">isEmpty&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String rateLimitKey &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;rate_limit:&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> username;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> incrementAndCheckRateLimit(rateLimitKey, request);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">incrementAndCheckRateLimit&lt;/span>(String rateLimitKey, HttpServletRequest request) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Long currentRequests &lt;span style="color:#f92672">=&lt;/span> redisTemplate.&lt;span style="color:#a6e22e">execute&lt;/span>((RedisCallback&lt;span style="color:#f92672">&amp;lt;&lt;/span>Long&lt;span style="color:#f92672">&amp;gt;&lt;/span>) connection &lt;span style="color:#f92672">-&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Object nativeConnection &lt;span style="color:#f92672">=&lt;/span> connection.&lt;span style="color:#a6e22e">getNativeConnection&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String script &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;local current = redis.call(&amp;#39;INCR&amp;#39;, KEYS[1])\n&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;if tonumber(current) == 1 then\n&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; redis.call(&amp;#39;EXPIRE&amp;#39;, KEYS[1], ARGV[1])\n&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;end\n&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;return current&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> (Long) ((RedisOperations&lt;span style="color:#f92672">&amp;lt;?&lt;/span>, &lt;span style="color:#f92672">?&amp;gt;&lt;/span>) nativeConnection).&lt;span style="color:#a6e22e">execute&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (RedisCallback&lt;span style="color:#f92672">&amp;lt;&lt;/span>Object&lt;span style="color:#f92672">&amp;gt;&lt;/span>) connection1 &lt;span style="color:#f92672">-&amp;gt;&lt;/span> connection1.&lt;span style="color:#a6e22e">eval&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> script.&lt;span style="color:#a6e22e">getBytes&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> redisTemplate.&lt;span style="color:#a6e22e">getKeySerializer&lt;/span>(), &lt;span style="color:#75715e">// Use custom Key serializer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> redisTemplate.&lt;span style="color:#a6e22e">getValueSerializer&lt;/span>(), &lt;span style="color:#75715e">// Use custom Value serializer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Collections.&lt;span style="color:#a6e22e">singletonList&lt;/span>(rateLimitKey.&lt;span style="color:#a6e22e">getBytes&lt;/span>()),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Collections.&lt;span style="color:#a6e22e">singletonList&lt;/span>(String.&lt;span style="color:#a6e22e">valueOf&lt;/span>(timeWindow).&lt;span style="color:#a6e22e">getBytes&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (currentRequests &lt;span style="color:#f92672">&amp;gt;&lt;/span> maxRequests) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String urlWithParams &lt;span style="color:#f92672">=&lt;/span> getRequestUrlWithParams(request);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> logger.&lt;span style="color:#a6e22e">warn&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Rate limit exceeded for key: {}. Request URL with Params: {}&amp;#34;&lt;/span>, 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rateLimitKey, urlWithParams);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> RateLimitException();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> String &lt;span style="color:#a6e22e">getRequestUrlWithParams&lt;/span>(HttpServletRequest request) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String url &lt;span style="color:#f92672">=&lt;/span> request.&lt;span style="color:#a6e22e">getRequestURL&lt;/span>().&lt;span style="color:#a6e22e">toString&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String queryString &lt;span style="color:#f92672">=&lt;/span> request.&lt;span style="color:#a6e22e">getQueryString&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (queryString &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#f92672">!&lt;/span>queryString.&lt;span style="color:#a6e22e">isEmpty&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> url &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;?&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> queryString;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> url;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>调整 &lt;a href="https://github.com/chensoul/spring-cloud-examples" target="_blank">spring-cloud-examples&lt;/a> 目录，通过源码分析 &lt;a href="https://github.com/chensoul/spring-cloud-examples/blob/main/lesson-01-bootstrap/SpringBoot%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B.md" target="_blank">SpringBoot 2.7.18 启动过程&lt;/a>&lt;/p></description></item><item><title>2024-02-19｜foodie-cloud集成Sharding Sphere实现读写分离</title><link>https://blog.chensoul.cc/posts/2024/02/19/til/</link><pubDate>Mon, 19 Feb 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/02/19/til/</guid><description>&lt;p>今天做了什么：&lt;/p>
&lt;ol>
&lt;li>重构 foodie-cloud 项目
&lt;ul>
&lt;li>基于 docker 实现数据库配置主从复制，集成 Sharding Sphere 实现读写分离&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol></description></item><item><title>2024-02-18｜NewRelice应用性能监控、6个Diagrams工具、foodie-food测试</title><link>https://blog.chensoul.cc/posts/2024/02/18/til/</link><pubDate>Sun, 18 Feb 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/02/18/til/</guid><description>&lt;p>今天做了什么：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://newrelic.com/" target="_blank">NewRelice&lt;/a>：应用性能监控&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.cnblogs.com/caoweixiong/p/14798449.html" target="_blank">https://www.cnblogs.com/caoweixiong/p/14798449.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.youtube.com/watch?v=jCd6XfWLZsg" target="_blank">Top 6 Tools to Turn Code into Beautiful Diagrams&lt;/a> ：&lt;/p></description></item><item><title>2024-02-05｜Spring Cloud Config快速入门</title><link>https://blog.chensoul.cc/posts/2024/02/05/til/</link><pubDate>Mon, 05 Feb 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/02/05/til/</guid><description>&lt;p>今天做了什么：&lt;/p>
&lt;ol>
&lt;li>创建项目 &lt;a href="https://github.com/chensoul/spring-cloud-examples" target="_blank">spring-cloud-examples&lt;/a>，测试 &lt;em>Spring Cloud&lt;/em> Config 使用本地文件和 git 仓库作为配置中心&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>&lt;em>Spring Cloud&lt;/em> Config 是一个基于http协议的远程配置实现方式。通过统一的配置管理服务器进行配置管理，客户端通过http协议主动的拉取服务的的配置信息，完成配置获取。&lt;/p></description></item><item><title>2024-02-04｜foodie-cloud集成Resilience4j</title><link>https://blog.chensoul.cc/posts/2024/02/04/til/</link><pubDate>Sun, 04 Feb 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/02/04/til/</guid><description>&lt;p>今天做了什么：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>重构 foodie-cloud 项目&lt;/p>
&lt;ul>
&lt;li>集成 &lt;strong>Resilience4j&lt;/strong>&lt;/li>
&lt;li>修改 README.md 文档&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>阅读博客 &lt;a href="https://blog.csdn.net/weixin_42189048" target="_blank">https://blog.csdn.net/weixin_42189048&lt;/a>&lt;/p></description></item><item><title>2024-02-02｜foodie-cloud集成Spring Cloud Config和SpringDoc</title><link>https://blog.chensoul.cc/posts/2024/02/02/til/</link><pubDate>Fri, 02 Feb 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/02/02/til/</guid><description>&lt;p>今天做了什么：&lt;/p>
&lt;ol>
&lt;li>参考 《&lt;a href="https://download.packt.com/free-ebook/9781805128694" target="_blank">Microservices with Spring Boot 3 and Spring Cloud&lt;/a>》，重构 foodie-cloud 项目
&lt;ul>
&lt;li>
&lt;p>集成 Spring Cloud Config 使用文件保存配置文件&lt;/p></description></item><item><title>2024-02-01｜使用 Spring Initializr 创建项目</title><link>https://blog.chensoul.cc/posts/2024/02/01/til/</link><pubDate>Thu, 01 Feb 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/02/01/til/</guid><description>&lt;p>今天做了什么：&lt;/p>
&lt;ol>
&lt;li>重构 foodie-cloud 项目，部署到 docker 容器&lt;/li>
&lt;li>使用 Spring Initializr 创建项目&lt;/li>
&lt;/ol>
&lt;h2 id="使用-spring-initializr-创建项目">使用 Spring Initializr 创建项目&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>安装 spring cli&lt;/p></description></item><item><title>2024-01-31｜Redis事务</title><link>https://blog.chensoul.cc/posts/2024/01/31/til/</link><pubDate>Wed, 31 Jan 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/01/31/til/</guid><description>&lt;p>今天做了什么：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>下载 《&lt;a href="https://download.packt.com/free-ebook/9781805128694" target="_blank">Microservices with Spring Boot 3 and Spring Cloud&lt;/a>》，源码在 &lt;a href="https://github.com/PacktPublishing/Microservices-with-Spring-Boot-and-Spring-Cloud-Third-Edition" target="_blank">github&lt;/a>&lt;/p></description></item><item><title>2024-01-30｜Mybatis plus和Jackson配置</title><link>https://blog.chensoul.cc/posts/2024/01/30/til/</link><pubDate>Tue, 30 Jan 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/01/30/til/</guid><description>&lt;p>今天做了什么：&lt;/p>
&lt;ol>
&lt;li>重构 foodie-cloud 项目
&lt;ul>
&lt;li>参考 DDD 组织包结构&lt;/li>
&lt;li>Mybatis plus 配置主键生成策略和数据审计功能&lt;/li>
&lt;li>Jackson 配置日期序列化&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="重构-foodie-cloud-项目">重构 foodie-cloud 项目&lt;/h2>
&lt;h3 id="mybatis-plus-配置主键生成策略">Mybatis plus 配置主键生成策略&lt;/h3>
&lt;p>实体类中可以不用添加@TableId，减少实体类对 mybatis-plus-annotation的依赖&lt;/p></description></item><item><title>2024-01-29｜C4架构模型</title><link>https://blog.chensoul.cc/posts/2024/01/29/til/</link><pubDate>Mon, 29 Jan 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/01/29/til/</guid><description>&lt;h2 id="c4架构模型">C4架构模型&lt;/h2>
&lt;p>C4 架构模型是一种简洁且易于理解的软件架构描述方法，由 Simon Brown 提出。C4 表示 Context, Containers, Components, and Code，这四个层级帮助我们组织和描述软件系统的不同抽象层次。&lt;/p></description></item><item><title>2024-01-26｜foodie-cloud集成Feign</title><link>https://blog.chensoul.cc/posts/2024/01/26/til/</link><pubDate>Fri, 26 Jan 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/01/26/til/</guid><description>&lt;p>今天做了什么：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>重构 foodie-cloud 项目&lt;/p>
&lt;ul>
&lt;li>集成 Feign 替换 RestTemplate&lt;/li>
&lt;li>认证服务负责用户的维护和登录&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>整理 Feign、Eureka、Seata、Sentinel 相关文档&lt;/p></description></item><item><title>2024-01-25｜Idea和zsh快捷键</title><link>https://blog.chensoul.cc/posts/2024/01/25/til/</link><pubDate>Thu, 25 Jan 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/01/25/til/</guid><description>&lt;p>今天做了什么：&lt;/p>
&lt;ol>
&lt;li>整理 Idea 快捷键&lt;/li>
&lt;li>整理 zsh 中定义的常用的快捷键&lt;/li>
&lt;/ol>
&lt;h2 id="idea-快捷键">Idea 快捷键&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>使用快捷键 command +1 打开 Project 窗口&lt;/p></description></item><item><title>2024-01-24｜今天做了什么</title><link>https://blog.chensoul.cc/posts/2024/01/24/til/</link><pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/01/24/til/</guid><description>&lt;p>今天做了什么：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>观看 B 站视频《&lt;a href="https://www.bilibili.com/video/BV1F5411y7Ta/" target="_blank">鸟宝的春天11_security编码实现&lt;/a>》&lt;/p>
&lt;ol>
&lt;li>
&lt;p>参考视频中示例使用 SecurityFilterChain DSL 语法实现用户名密码登录功能。&lt;/p></description></item><item><title>2024-01-23｜今天做了什么</title><link>https://blog.chensoul.cc/posts/2024/01/23/til/</link><pubDate>Tue, 23 Jan 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/01/23/til/</guid><description>&lt;p>今天做了什么：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>重构 foodie-cloud 项目，修改模块名称、表名及字段名。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>修改 &lt;a href="https://github.com/chensoul/spring-security-oauth2-legacy-examples" target="_blank">spring-security-oauth2-legacy-examples&lt;/a> ，测试资源服务器通过 jwt、jwk、远程三种方式获取用户信息；测试 sso 单点登录（进行中）。&lt;/p></description></item><item><title>2024-01-22｜今天做了什么</title><link>https://blog.chensoul.cc/posts/2024/01/22/til/</link><pubDate>Mon, 22 Jan 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/01/22/til/</guid><description>&lt;p>今天做了什么：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>修改瑞吉外卖项目 &lt;a href="https://github.com/chensoul/reggie" target="_blank">reggie&lt;/a>：&lt;/p>
&lt;ul>
&lt;li>去掉 .mvn 相关文件，去掉 github action 中用到 .mvn 的 workflow&lt;/li>
&lt;li>参考 DDD 修改包结构&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>配置 Redis 持久化&lt;/p></description></item><item><title>2024-01-18｜今天做了什么</title><link>https://blog.chensoul.cc/posts/2024/01/18/til/</link><pubDate>Thu, 18 Jan 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/01/18/til/</guid><description>&lt;p>今天做了什么：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>修改瑞吉外卖项目 &lt;a href="https://github.com/chensoul/reggie" target="_blank">reggie&lt;/a>：&lt;/p>
&lt;ul>
&lt;li>修改数据源配置，使用 HikariCP 数据源&lt;/li>
&lt;li>修改接口返回字段和前端文件，code=0 表示成功&lt;/li>
&lt;li>添加 mysql、redis 安装文档&lt;/li>
&lt;li>添加 openresty lua 脚本实现 redis 缓存&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>基于 springboot 使用 sharding-jdbc 测试读写分离、分库分表。代码在：&lt;a href="https://github.com/chensoul/sharding-examples" target="_blank">https://github.com/chensoul/sharding-examples&lt;/a>&lt;/p></description></item><item><title>2024-01-17｜MySQL 主从复制、ShardingJDBC实现读写分离、集成Springdoc+Javadoc</title><link>https://blog.chensoul.cc/posts/2024/01/17/til/</link><pubDate>Wed, 17 Jan 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/01/17/til/</guid><description>&lt;p>今天做了什么：&lt;/p>
&lt;ol>
&lt;li>观看《2022年黑马程序员新版java课程》中 MySQL 主从复制和读写分离相关视频，使用 Docker 搭建 MySQL 主从复制环境。&lt;/li>
&lt;li>foodie-cloud 项目实现读写分离并集成 Springdoc&lt;/li>
&lt;/ol>
&lt;h2 id="docker-搭建-mysql-主从复制环境">Docker 搭建 MySQL 主从复制环境&lt;/h2>
&lt;p>参考文章 ：&lt;a href="https://learnku.com/articles/30439" target="_blank">基于 Docker 的 MySQL 主从复制搭建及原理（真正弄懂）&lt;/a>&lt;/p></description></item><item><title>2024-01-16｜Redis安装</title><link>https://blog.chensoul.cc/posts/2024/01/16/til/</link><pubDate>Tue, 16 Jan 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/01/16/til/</guid><description>&lt;p>今天做了什么：&lt;/p>
&lt;p>1、&lt;a href="https://github.com/chensoul/spring-cloud-examples" target="_blank">spring-cloud-examples&lt;/a> 添加分布式锁、rabbitmq、kafka、分库分表等示例代码&lt;/p>
&lt;p>2、foodie-cloud 添加登录部分代码&lt;/p>
&lt;p>3、整理 Redis 安装文档&lt;/p></description></item><item><title>2024-01-15｜Nginx配置结构与指令语法</title><link>https://blog.chensoul.cc/posts/2024/01/15/til/</link><pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/01/15/til/</guid><description>&lt;p>今天做了什么：&lt;/p>
&lt;p>1、看 JHipster 源码发现这两个类库&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/FasterXML/jackson-datatypes-collections" target="_blank">jackson-datatypes-collections&lt;/a> 支持 hppc 数据类型。hppc：&lt;em>Java 的高性能原始集合&lt;/em>，HPPC 为所有 Java 基元类型提供典型集合的模板生成实现，例如列表、集合和映射。HPPC 背后的主要驱动力是针对最高性能和内存效率的优化。&lt;/p></description></item><item><title>2024-01-11｜Session和Cookie的区别、单点登录和三方登录的区别</title><link>https://blog.chensoul.cc/posts/2024/01/11/til/</link><pubDate>Thu, 11 Jan 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/01/11/til/</guid><description>&lt;p>今天做了什么：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;input checked="" disabled="" type="checkbox"> 1、观看 B 站 《&lt;a href="https://www.bilibili.com/video/BV1ht4y1E7EL?p=1" target="_blank">SSO单点登录&lt;/a>》视频&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;input checked="" disabled="" type="checkbox"> 2、参考 &lt;a href="https://github.com/jOOQ/jOOL" target="_blank">https://github.com/jOOQ/jOOL&lt;/a> 和 &lt;a href="https://github.com/vavr-io/vavr" target="_blank">https://github.com/vavr-io/vavr&lt;/a> ，将 CheckedXXX 的类加入公司项目中。&lt;/p></description></item><item><title>2024-01-10｜ Java审计框架inspektr</title><link>https://blog.chensoul.cc/posts/2024/01/10/til/</link><pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/01/10/til/</guid><description>&lt;p>今天做了什么：&lt;/p>
&lt;p>1、Java Lambda 增强 &lt;a href="https://github.com/jOOQ/jOOL" target="_blank">https://github.com/jOOQ/jOOL&lt;/a> 和 &lt;a href="https://github.com/vavr-io/vavr" target="_blank">https://github.com/vavr-io/vavr&lt;/a> ，jOOL 在 jdk8 下存在编译错误，计划，整合这两个项目，创建一个新的项目，只引入自己需要的一些类。&lt;/p></description></item><item><title>2024-01-09｜单点登录</title><link>https://blog.chensoul.cc/posts/2024/01/09/til/</link><pubDate>Tue, 09 Jan 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/01/09/til/</guid><description>&lt;p>今天做了什么：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zexo.dev/posts/2020/03/01/keep-your-repo-dependencies-up-to-date-with-renovate/" target="_blank">使用 renovate 监控第三方依赖更新&lt;/a> ，renovate 貌似需要付费，放弃。&lt;/li>
&lt;li>spring-security-oauth2-samples 示例工程重命名模块和包名，代码见 &lt;a href="https://github.com/chensoul/spring-security-oauth2-boot" target="_blank">spring-security-oauth2-boot&lt;/a>&lt;/li>
&lt;li>实现单点登录并测试&lt;/li>
&lt;/ul>
&lt;h2 id="实现单点登录并测试">实现单点登录并测试&lt;/h2>
&lt;p>实现单点登录（Single Sign-On，SSO）可以采用多种思路和技术。下面是几种常见的实现思路：&lt;/p></description></item><item><title>2024-01-08｜VPS 迁移</title><link>https://blog.chensoul.cc/posts/2024/01/08/til/</link><pubDate>Mon, 08 Jan 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/01/08/til/</guid><description>&lt;p>今天做了什么：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>VPS 迁移&lt;/p>
&lt;/li>
&lt;li>
&lt;p>继续重构 foodie-cloud&lt;/p>
&lt;/li>
&lt;li>
&lt;p>参考 &lt;a href="https://github.com/mybatis/parent/" target="_blank">https://github.com/mybatis/parent/ &lt;/a> 重构 &lt;a href="https://github.com/chensoul/chensoul-parent" target="_blank">chensoul-parent&lt;/a>&lt;/p>
&lt;ul>
&lt;li>修改了 maven 插件&lt;/li>
&lt;li>添加了 Github Actions&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="vps-迁移">VPS 迁移&lt;/h2>
&lt;p>迁移步骤：&lt;/p></description></item><item><title>2024-01-05｜Nginx、正向代理和反向代理</title><link>https://blog.chensoul.cc/posts/2024/01/05/til/</link><pubDate>Fri, 05 Jan 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/01/05/til/</guid><description>&lt;p>今天做了什么：&lt;/p>
&lt;ul>
&lt;li>Nginx、正向代理和反向代理&lt;/li>
&lt;/ul>
&lt;h2 id="nginx-介绍">Nginx 介绍&lt;/h2>
&lt;p>Nginx（发音为&amp;quot;engine-x&amp;quot;）是一个高性能的开源Web服务器和反向代理服务器。它专注于高并发、低内存消耗和高度模块化的架构，因此被广泛用于构建性能出色的网站、应用程序和服务。&lt;/p>
&lt;p>以下是一些关于 Nginx 的关键特点：&lt;/p></description></item><item><title>2024-01-04｜GitHub Actions</title><link>https://blog.chensoul.cc/posts/2024/01/04/til/</link><pubDate>Thu, 04 Jan 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/01/04/til/</guid><description>&lt;p>今天做了什么：&lt;/p>
&lt;ul>
&lt;li>修改个人联系方式&lt;/li>
&lt;li>注销亚马逊账号&lt;/li>
&lt;li>利用GitHub Actions自动优雅地为项目构建Releases&lt;/li>
&lt;li>利用GitHub Actions自动构建项目的docker镜像并发布到DockerHub&lt;/li>
&lt;/ul>
&lt;h2 id="修改个人联系方式">修改个人联系方式&lt;/h2>
&lt;p>使用 ichensoul 注册了新的 Gmail、163 邮箱，并将各种网站绑定的邮箱修改到新的 gmail 邮箱。自此，gmail、github、推特、微信、163 的账号都保持为一致，都是 ichensoul。&lt;/p></description></item><item><title>2024-01-03｜今天做了什么</title><link>https://blog.chensoul.cc/posts/2024/01/03/til/</link><pubDate>Wed, 03 Jan 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/01/03/til/</guid><description>&lt;p>今天做了什么：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/bingoohuang/idworker-client" target="_blank">idworker-client&lt;/a> ，一个开源的 ID 生成器，适合在单机使用&lt;/li>
&lt;li>github 上创建了一个使用 spring cloud netflix 相关组件的微服务项目&lt;/li>
&lt;li>重构了狂野架构师课程中的微服务版本的源码&lt;/li>
&lt;/ul>
&lt;h1 id="foodie-cloud">foodie-cloud&lt;/h1>
&lt;p>重构慕课网 &lt;a href="https://class.imooc.com/sale/javaarchitect" target="_blank">Java架构师-技术专家&lt;/a> 课程中的 &lt;a href="https://github.com/liuhouer/np-architect/" target="_blank">源码&lt;/a>，我做了一些改动：&lt;/p></description></item><item><title>2024-01-02｜雪崩问题、Spring Cloud微服务集成 Sentinel</title><link>https://blog.chensoul.cc/posts/2024/01/02/til/</link><pubDate>Tue, 02 Jan 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/01/02/til/</guid><description>&lt;p>今天做了什么：&lt;/p>
&lt;ul>
&lt;li>雪崩问题&lt;/li>
&lt;li>Spring Cloud微服务集成 Sentinel&lt;/li>
&lt;li>扩展 Sentinel 集成 OpenFeign，实现自动降级&lt;/li>
&lt;/ul>
&lt;h2 id="雪崩问题">雪崩问题&lt;/h2>
&lt;p>1、什么是雪崩问题？&lt;/p></description></item><item><title>2023-12-28｜今天做了什么</title><link>https://blog.chensoul.cc/posts/2023/12/28/til/</link><pubDate>Thu, 28 Dec 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/12/28/til/</guid><description>&lt;p>今天做了什么：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>重构微服务项目中使用 spring-security-oauth2 搭建 OAuth2 认证服务和资源服务的代码，减少其他模块对此的耦合度。计划将 spring-security-oauth2 迁移到 spring-security-oauth2-authorization-server 上，即使用 OAuth2.1 授权和认证。&lt;strong>Spring Authorization Server&lt;/strong> 相关文档，可以参考 &lt;a href="https://blog.51cto.com/u_15268610/category2" target="_blank">https://blog.51cto.com/u_15268610/category2&lt;/a>。&lt;/p></description></item><item><title>2023-12-27｜今天做了什么</title><link>https://blog.chensoul.cc/posts/2023/12/27/til/</link><pubDate>Wed, 27 Dec 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/12/27/til/</guid><description>&lt;p>今天做了什么：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>微服务项目中认证服务器配置授权码模式，并测试通过&lt;/p>
&lt;ul>
&lt;li>
&lt;p>扩展 RedisAuthorizationCodeServices ，支持设置过期时间。&lt;/p>
&lt;ul>
&lt;li>注意：OAuth2Authentication 无法从 json 反序列化，故无法使用 JSON 反序列化类，只能使用 JDK 反序列化类。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>扩展 BearerTokenExtractor，支持从 request 请求的 header 中读取 access_token&lt;/p></description></item><item><title>2023-12-22｜今天做了什么</title><link>https://blog.chensoul.cc/posts/2023/12/22/til/</link><pubDate>Fri, 22 Dec 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/12/22/til/</guid><description>&lt;p>今天做了什么：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>我使用的 Idea 插件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>springdoc-openapi v1.7.0 示例&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Spring Security OAuth Boot 2 Autoconfig 转换成 maven 项目，并添加示例&lt;/p></description></item><item><title>2023-12-21｜Spring Security对OAuth2的支持及实现方式</title><link>https://blog.chensoul.cc/posts/2023/12/21/til/</link><pubDate>Thu, 21 Dec 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/12/21/til/</guid><description>&lt;p>Today I Learned. 今天分享内容：Spring Security 对 OAuth2 的支持&lt;/p></description></item><item><title>2023-12-20｜Maven配置继承和生命周期、源码运行Nacos 2.3.0控制台</title><link>https://blog.chensoul.cc/posts/2023/12/20/til/</link><pubDate>Wed, 20 Dec 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/12/20/til/</guid><description>&lt;p>Today I Learned. 今天分享内容：Maven配置继承和生命周期、源码运行Nacos 2.3.0控制台&lt;/p>
&lt;h2 id="maven-相关">Maven 相关&lt;/h2>
&lt;h3 id="maven配置继承">Maven配置继承&lt;/h3>
&lt;p>以下是一些常见的POM节点，在子项目中可以继承或覆盖父项目的配置：&lt;/p></description></item><item><title>2023-12-19｜Spring Security OAuth2配置JWT、Github Actions配置代码扫描</title><link>https://blog.chensoul.cc/posts/2023/12/19/til/</link><pubDate>Tue, 19 Dec 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/12/19/til/</guid><description>&lt;p>Today I Learned. 今天分享内容：Spring Security OAuth2 配置JWT、Github Actions配置代码扫描，另外，修改了 &lt;a href="https://github.com/chensoul/spring-security-oauth2-legacy" target="_blank">spring-security-oauth2-legacy&lt;/a> 仓库，支持授权认证中心的多种配置方式（jdbc、内存、redis、jwt）、资源中心的多种配置方式（jwt、jdbc、redis、remote、jwk-set-uri）。&lt;/p></description></item><item><title>2023-12-18｜使用Spring Security实现OAuth2授权和认证</title><link>https://blog.chensoul.cc/posts/2023/12/18/til/</link><pubDate>Mon, 18 Dec 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/12/18/til/</guid><description>&lt;p>Today I Learned. 今天分享内容：使用Spring Security实现OAuth2授权和认证。&lt;/p>
&lt;p>最近在开发 Spring Cloud 微服务时，需要对 OAuth2 的异常处理进行定制，从网上搜到一个 github 仓库：&lt;a href="https://github.com/selfancy/oauth2" target="_blank">oauth2&lt;/a>。这篇仓库的代码实现了 OAuth2 的四种授权模式、I18N 国际化、异常处理、JWT Token，我 fork 了一份代码，做了一些改动，去掉了 webflux、eureka 相关代码。&lt;/p></description></item><item><title>2023-12-15｜JNDI InitialContext源码分析、ClassLoader加载机制</title><link>https://blog.chensoul.cc/posts/2023/12/15/til/</link><pubDate>Fri, 15 Dec 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/12/15/til/</guid><description>&lt;p>Today I Learned. 今天分享内容：JNDI InitialContext源码分析、ClassLoader加载机制。&lt;/p>
&lt;h2 id="jndi-initialcontext-源码分析">JNDI InitialContext 源码分析&lt;/h2>
&lt;h3 id="jndi包结构">JNDI包结构&lt;/h3>
&lt;p>&lt;strong>javax.naming&lt;/strong>&lt;/p></description></item><item><title>[译]《Grokking the System Design Interview》设计Twitter</title><link>https://blog.chensoul.cc/posts/2023/12/14/designing-twitter/</link><pubDate>Thu, 14 Dec 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/12/14/designing-twitter/</guid><description>&lt;p>这是一篇双语翻译的文章，原文出自 &lt;a href="https://github.com/sharanyaa/grok_sdi_educative/blob/master/grok_system_design_interview.pdf" target="_blank">grok_system_design_interview.pdf&lt;/a> 的一篇文章《Designing Twitter》设计 Twitter。&lt;/p>
&lt;hr>
&lt;p>Let’s design a Twitter-like social networking service. Users of the service will be able to post tweets, follow other people, and favorite tweets. Difficulty Level: Medium&lt;/p></description></item><item><title>2023-12-14｜购买新的VPS服务器、最近在做什么</title><link>https://blog.chensoul.cc/posts/2023/12/14/til/</link><pubDate>Thu, 14 Dec 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/12/14/til/</guid><description>&lt;p>Today I Learned. 今天分享内容：购买新的 VPS 服务器、最近在做什么。&lt;/p>
&lt;h2 id="购买新的-vps-服务器">购买新的 VPS 服务器&lt;/h2>
&lt;p>今天看到搬瓦工上的 VPS 还有一个月到期，该 VPS 配置是 40 GB SSD、2 GB RAM、2 TB Bandwidth、3x Intel Xeon CPU、1 Gigabit Network，一年费用是 99 美元。&lt;/p></description></item><item><title>All things about MicroProfile</title><link>https://blog.chensoul.cc/posts/2023/12/14/all-things-about-microprofile/</link><pubDate>Thu, 14 Dec 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/12/14/all-things-about-microprofile/</guid><description>&lt;p>最近在一些开源项目中看到了 MicroProfile ，于是在网上查阅了相关资料加深对 MicroProfile 的理解，并做了笔记形成此文。&lt;/p>
&lt;h2 id="microprofile">MicroProfile&lt;/h2>
&lt;p>MicroProfile是一个开放的企业级Java微服务框架，旨在简化和标准化基于微服务架构的应用程序开发。它是由Eclipse Foundation主导的一个开源项目，致力于提供轻量级、可移植和可互操作的Java微服务规范和实现。&lt;/p></description></item><item><title>2023-12-13｜发布到Maven中央仓库的第一个项目</title><link>https://blog.chensoul.cc/posts/2023/12/13/til/</link><pubDate>Wed, 13 Dec 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/12/13/til/</guid><description>&lt;p>Today I Learned. 今天分享内容：发布到 Maven 中央仓库的第一个项目。&lt;/p>
&lt;p>最近在 Github 上创建了一个 Pom 类型的 Maven 项目 &lt;a href="https://github.com/chensoul/chensoul-parent/" target="_blank">chensoul-parent&lt;/a>，该项目主页 &lt;a href="https://chensoul.github.io/chensoul-parent/" target="_blank">https://chensoul.github.io/chensoul-parent/&lt;/a> ，这是我的第一个发布对 Maven 中央仓库的项目。&lt;/p></description></item><item><title>2023-12-12｜RMI、Java漏洞安全、Semgrep漏洞检测</title><link>https://blog.chensoul.cc/posts/2023/12/12/til/</link><pubDate>Tue, 12 Dec 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/12/12/til/</guid><description>&lt;p>Today I Learned. 今天我学了：RMI、Java漏洞安全、Semgrep漏洞检测。&lt;/p>
&lt;h2 id="rmi">RMI&lt;/h2>
&lt;h3 id="介绍">介绍&lt;/h3>
&lt;p>RMI（Remote Method Invocation）是Java语言提供的一种远程调用机制，用于在分布式系统中实现对象之间的远程通信。&lt;/p></description></item><item><title>如何设计一个分布式ID生成器保证ID按时间有序？</title><link>https://blog.chensoul.cc/posts/2023/12/05/distributed-id-generator/</link><pubDate>Tue, 05 Dec 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/12/05/distributed-id-generator/</guid><description>&lt;p>很多业务有生成唯一 ID 并作为数据库主键的需求。数据库会在这个字段上建立聚集索引（参考 MySQL InnoDB），即该字段会影响各条数据再物理存储上的顺序。&lt;/p>
&lt;p>ID还要尽可能&lt;strong>短&lt;/strong>，节省内存，让数据库索引效率更高。基本上64位整数能够满足绝大多数的场景，但是如果能做到比64位更短那就更好了。需要根据具体业务进行分析，预估出ID的最大值，这个最大值通常比64位整数的上限小很多，于是我们可以用更少的bit表示这个ID。&lt;/p>
&lt;p>查询的时候，往往有分页或者&lt;strong>排序&lt;/strong>的需求，所以需要给每条数据添加一个时间字段，并在其上建立普通索引(Secondary Index)。但是普通索引的访问效率比聚集索引慢，如果能够让ID&lt;strong>按照时间粗略有序&lt;/strong>，则可以省去这个时间字段。为什么不是按照时间精确有序呢？因为按照时间精确有序是做不到的，除非用一个单机算法，在分布式场景下做到精确有序性能一般很差。&lt;/p></description></item><item><title>[译]《Grokking the System Design Interview》设计Dropbox</title><link>https://blog.chensoul.cc/posts/2023/11/24/designing-dropbox/</link><pubDate>Fri, 24 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/11/24/designing-dropbox/</guid><description>&lt;p>这是一篇双语翻译的文章，原文出自 &lt;a href="https://github.com/sharanyaa/grok_sdi_educative/blob/master/grok_system_design_interview.pdf" target="_blank">grok_system_design_interview.pdf&lt;/a> 的一篇文章《Designing Dropbox》设计 Dropbox。&lt;/p>
&lt;hr>
&lt;p>Let’s design a file hosting service like Dropbox or Google Drive. Cloud file storage enables users to store their data on remote servers. Usually, these servers are maintained by cloud storage providers and made available to users over a network (typically through the Internet). Users pay for their cloud data storage on a monthly basis. Similar Services: OneDrive, Google Drive Difficulty Level: Medium&lt;/p></description></item><item><title>[译]《Grokking the System Design Interview》设计Facebook Messenger</title><link>https://blog.chensoul.cc/posts/2023/11/24/designing-facebook-messenger/</link><pubDate>Fri, 24 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/11/24/designing-facebook-messenger/</guid><description>&lt;p>这是一篇双语翻译的文章，原文出自 &lt;a href="https://github.com/sharanyaa/grok_sdi_educative/blob/master/grok_system_design_interview.pdf" target="_blank">grok_system_design_interview.pdf&lt;/a> 的一篇文章《Designing Facebook Messenger》设计 Facebook Messenger。&lt;/p>
&lt;hr>
&lt;p>Let’s design an instant messaging service like Facebook Messenger where users can send text messages to each other through web and mobile interfaces.
让我们设计一个像 Facebook Messenger 这样的即时消息服务，用户可以通过网络和移动界面互相发送短信。&lt;/p></description></item><item><title>[译]《Grokking the System Design Interview》设计Instagram</title><link>https://blog.chensoul.cc/posts/2023/11/24/designing-instagram/</link><pubDate>Fri, 24 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/11/24/designing-instagram/</guid><description>&lt;p>这是一篇双语翻译的文章，原文出自 &lt;a href="https://github.com/sharanyaa/grok_sdi_educative/blob/master/grok_system_design_interview.pdf" target="_blank">grok_system_design_interview.pdf&lt;/a> 的一篇文章《Designing Instagram》设计 Instagram。&lt;/p>
&lt;hr>
&lt;p>Let’s design a photo-sharing service like Instagram, where users can upload photos to share them with other users. Similar Services: Flickr, Picasa Difficulty Level: Medium&lt;/p></description></item><item><title>[译]《Grokking the System Design Interview》设计Pastebin</title><link>https://blog.chensoul.cc/posts/2023/11/24/designing-pastebin/</link><pubDate>Fri, 24 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/11/24/designing-pastebin/</guid><description>&lt;p>这是一篇双语翻译的文章，原文出自 &lt;a href="https://github.com/sharanyaa/grok_sdi_educative/blob/master/grok_system_design_interview.pdf" target="_blank">grok_system_design_interview.pdf&lt;/a> 的一篇文章《Designing Pastebin》设计 Pastebin。&lt;/p>
&lt;hr>
&lt;p>Let’s design a Pastebin like web service, where users can store plain text. Users of the service will enter a piece of text and get a randomly generated URL to access it. Similar Services: pastebin.com, pasted.co, chopapp.com Difficulty Level: Easy&lt;/p></description></item><item><title>[译]《Grokking the System Design Interview》域名系统</title><link>https://blog.chensoul.cc/posts/2023/11/17/dns/</link><pubDate>Fri, 17 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/11/17/dns/</guid><description>&lt;p>这是一篇双语翻译的文章，原文出自《Grokking the System Design Interview》教程的 &lt;a href="https://www.educative.io/courses/grokking-modern-system-design-interview-for-engineers-managers/introduction-to-domain-name-system-dns" target="_blank">Domain Name System&lt;/a> 这篇章节。&lt;/p></description></item><item><title>如何设计一个短网址服务</title><link>https://blog.chensoul.cc/posts/2023/11/17/designing-a-url-shortening-service/</link><pubDate>Fri, 17 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/11/17/designing-a-url-shortening-service/</guid><description>&lt;p>如何生成一个短网址服务，参考 &lt;a href="https://www.educative.io/courses/grokking-modern-system-design-interview-for-engineers-managers/system-design-tinyurl" target="_blank">Design a URL Shortening Service / TinyURL&lt;/a> 和 &lt;a href="https://www.designgurus.io/course-play/grokking-the-system-design-interview/doc/638c0b5dac93e7ae59a1af6b" target="_blank">Designing a URL Shortening service like TinyURL&lt;/a> 两篇文章，整理如下笔记。&lt;/p></description></item><item><title>[译]《Grokking the System Design Interview》系统设计主模板</title><link>https://blog.chensoul.cc/posts/2023/11/16/system-design-master-template/</link><pubDate>Thu, 16 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/11/16/system-design-master-template/</guid><description>&lt;p>这是一篇双语翻译的文章，原文出自《Grokking the System Design Interview》教程的 &lt;a href="https://www.designgurus.io/course-play/grokking-the-system-design-interview/doc/645d5161fff33a24ccce4bb1" target="_blank">System Design Master Template&lt;/a> 这篇章节。&lt;/p></description></item><item><title>[译]《Grokking the System Design Interview》系统设计访谈：分步指南</title><link>https://blog.chensoul.cc/posts/2023/11/16/sdi-a-step-by-step-guide/</link><pubDate>Thu, 16 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/11/16/sdi-a-step-by-step-guide/</guid><description>&lt;p>这是一篇双语翻译的文章，原文出自 &lt;a href="https://github.com/sharanyaa/grok_sdi_educative/blob/master/grok_system_design_interview.pdf" target="_blank">grok_system_design_interview.pdf&lt;/a> 的一篇文章《System Design Interviews: A step by step guide》系统设计访谈：分步指南。&lt;/p></description></item><item><title>[译]《Grokking the System Design Interview》设计类似 TinyURL 的 URL 缩短服务</title><link>https://blog.chensoul.cc/posts/2023/11/16/designing-a-url-shortening-service/</link><pubDate>Thu, 16 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/11/16/designing-a-url-shortening-service/</guid><description>&lt;p>这是一篇双语翻译的文章，原文出自 &lt;a href="https://github.com/sharanyaa/grok_sdi_educative/blob/master/grok_system_design_interview.pdf" target="_blank">grok_system_design_interview.pdf&lt;/a> 的一篇文章《Designing a URL Shortening service like TinyURL》设计类似 TinyURL 的 URL 缩短服务。&lt;/p></description></item><item><title>分布式基础知识</title><link>https://blog.chensoul.cc/posts/2023/11/14/distributed-system-basic/</link><pubDate>Tue, 14 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/11/14/distributed-system-basic/</guid><description>&lt;h2 id="什么是分布式系统">什么是分布式系统？&lt;/h2>
&lt;p>分布式系统是指由多个独立的计算机节点（或服务器）通过网络相互连接和协作，共同完成某个任务或提供某个服务的系统。在分布式系统中，各个节点可以同时进行计算、存储和通信，并通过消息传递等方式进行协调和同步。&lt;/p>
&lt;p>&lt;strong>分布式系统的设计目标是提高系统的性能、可靠性和可扩展性，同时减少单点故障和提高系统的容错性&lt;/strong>。通过将任务和数据分布到多个节点上，分布式系统可以实现更高的并行性和处理能力。此外，分布式系统还可以提供更好的负载均衡，以应对不断增长的工作负载。&lt;/p>
&lt;h2 id="分布式系统的主要特征">分布式系统的主要特征&lt;/h2>
&lt;p>分布式系统具有以下主要特征：&lt;/p>
&lt;ol>
&lt;li>分布性：分布式系统中的计算机节点分布在不同的物理或逻辑位置上，可以是同一局域网内的多台机器，也可以是分布在全球不同地区的服务器。&lt;/li>
&lt;li>并行性：分布式系统中的节点可以同时进行计算和处理任务，从而实现并行处理和提高系统的性能。并行性可以通过将任务划分为子任务，并在不同节点上并行执行来实现。&lt;/li>
&lt;li>通信：分布式系统通过网络进行节点之间的通信和数据传输，以实现协作和信息交换。节点之间的通信可以通过消息传递、远程过程调用（RPC）或分布式共享内存等方式实现。&lt;/li>
&lt;li>缺乏全局时钟：由于节点之间的通信延迟和不可靠性，分布式系统往往无法依赖全局时钟来进行同步。因此，分布式系统需要采用一些分布式算法来实现一致性和协调，如分布式锁、一致性协议等。&lt;/li>
&lt;li>容错性：分布式系统需要具备容错机制，以应对节点故障、网络故障或其他异常情况。容错性的实现通常包括备份和冗余，例如使用冗余节点、数据复制和副本机制，以确保系统的可用性和数据的完整性。&lt;/li>
&lt;li>可扩展性：分布式系统应具备良好的可扩展性，即能够方便地扩展节点数量和处理能力，以适应不断增长的工作负载。可扩展性的实现可能包括水平扩展、垂直扩展、负载均衡等技术手段。&lt;/li>
&lt;li>不确定性：由于节点之间的通信延迟和不可靠性，分布式系统中的操作可能存在不确定性。例如，消息传递可能会有延迟，网络可能会发生分区，导致节点之间的信息不一致。因此，分布式系统需要考虑和处理这种不确定性情况。&lt;/li>
&lt;/ol>
&lt;p>这些特征使得分布式系统能够实现高性能、高可用性和可扩展性，但也带来了挑战，如一致性问题、并发控制、故障处理等。因此，在设计和开发分布式系统时，需要考虑这些特征，并选择合适的技术和算法来解决相关问题。&lt;/p></description></item><item><title>[译]《分布式系统：为了乐趣和利益》1.高层分布式系统</title><link>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-01/</link><pubDate>Fri, 10 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-01/</guid><description>&lt;blockquote>
&lt;p>《分布式系统：为了乐趣和利益》是一本广受欢迎的资源，用于理解和学习分布式系统。该书由作者 Mikito Takada 撰写，介绍了构建分布式系统的基本概念、原则和挑战。&lt;/p>
&lt;p>这本书涵盖了与分布式系统相关的广泛主题，包括网络、容错性、一致性模型、分布式算法、可扩展性等等。它旨在以清晰易懂的方式解释复杂的概念，适合初学者和有经验的分布式系统从业者阅读。&lt;/p>
&lt;p>在整本书中，作者提供了各种实际案例和案例研究，以说明分布式系统的实际应用和实践方面。它还强调了构建分布式系统涉及的权衡和设计考虑，帮助读者全面理解这个主题。&lt;/p>
&lt;p>《分布式系统：为了乐趣和利益》作为开源资源，可以免费在线获取，非常适合任何对学习分布式系统感兴趣的人。&lt;/p>
&lt;p>原文链接：&lt;a href="https://book.mixu.net/distsys/single-page.html" target="_blank">Distributed systems: for fun and profit&lt;/a>&lt;/p></description></item><item><title>[译]《分布式系统：为了乐趣和利益》2.抽象层次的上下</title><link>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-02/</link><pubDate>Fri, 10 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-02/</guid><description>&lt;blockquote>
&lt;p>《分布式系统：为了乐趣和利益》是一本广受欢迎的资源，用于理解和学习分布式系统。该书由作者 Mikito Takada 撰写，介绍了构建分布式系统的基本概念、原则和挑战。&lt;/p>
&lt;p>这本书涵盖了与分布式系统相关的广泛主题，包括网络、容错性、一致性模型、分布式算法、可扩展性等等。它旨在以清晰易懂的方式解释复杂的概念，适合初学者和有经验的分布式系统从业者阅读。&lt;/p>
&lt;p>在整本书中，作者提供了各种实际案例和案例研究，以说明分布式系统的实际应用和实践方面。它还强调了构建分布式系统涉及的权衡和设计考虑，帮助读者全面理解这个主题。&lt;/p>
&lt;p>《分布式系统：为了乐趣和利益》作为开源资源，可以免费在线获取，非常适合任何对学习分布式系统感兴趣的人。&lt;/p>
&lt;p>原文链接：&lt;a href="https://book.mixu.net/distsys/single-page.html" target="_blank">Distributed systems: for fun and profit&lt;/a>&lt;/p></description></item><item><title>[译]《分布式系统：为了乐趣和利益》3.时间及顺序</title><link>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-03/</link><pubDate>Fri, 10 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-03/</guid><description>&lt;blockquote>
&lt;p>《分布式系统：为了乐趣和利益》是一本广受欢迎的资源，用于理解和学习分布式系统。该书由作者 Mikito Takada 撰写，介绍了构建分布式系统的基本概念、原则和挑战。&lt;/p>
&lt;p>这本书涵盖了与分布式系统相关的广泛主题，包括网络、容错性、一致性模型、分布式算法、可扩展性等等。它旨在以清晰易懂的方式解释复杂的概念，适合初学者和有经验的分布式系统从业者阅读。&lt;/p>
&lt;p>在整本书中，作者提供了各种实际案例和案例研究，以说明分布式系统的实际应用和实践方面。它还强调了构建分布式系统涉及的权衡和设计考虑，帮助读者全面理解这个主题。&lt;/p>
&lt;p>《分布式系统：为了乐趣和利益》作为开源资源，可以免费在线获取，非常适合任何对学习分布式系统感兴趣的人。&lt;/p>
&lt;p>原文链接：&lt;a href="https://book.mixu.net/distsys/single-page.html" target="_blank">Distributed systems: for fun and profit&lt;/a>&lt;/p></description></item><item><title>[译]《分布式系统：为了乐趣和利益》4.复制</title><link>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-04/</link><pubDate>Fri, 10 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-04/</guid><description>&lt;blockquote>
&lt;p>《分布式系统：为了乐趣和利益》是一本广受欢迎的资源，用于理解和学习分布式系统。该书由作者 Mikito Takada 撰写，介绍了构建分布式系统的基本概念、原则和挑战。&lt;/p>
&lt;p>这本书涵盖了与分布式系统相关的广泛主题，包括网络、容错性、一致性模型、分布式算法、可扩展性等等。它旨在以清晰易懂的方式解释复杂的概念，适合初学者和有经验的分布式系统从业者阅读。&lt;/p>
&lt;p>在整本书中，作者提供了各种实际案例和案例研究，以说明分布式系统的实际应用和实践方面。它还强调了构建分布式系统涉及的权衡和设计考虑，帮助读者全面理解这个主题。&lt;/p>
&lt;p>《分布式系统：为了乐趣和利益》作为开源资源，可以免费在线获取，非常适合任何对学习分布式系统感兴趣的人。&lt;/p>
&lt;p>原文链接：&lt;a href="https://book.mixu.net/distsys/single-page.html" target="_blank">Distributed systems: for fun and profit&lt;/a>&lt;/p></description></item><item><title>[译]《分布式系统：为了乐趣和利益》5.复制：弱一致性模型协议</title><link>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-05/</link><pubDate>Fri, 10 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-05/</guid><description>&lt;blockquote>
&lt;p>《分布式系统：为了乐趣和利益》是一本广受欢迎的资源，用于理解和学习分布式系统。该书由作者 Mikito Takada 撰写，介绍了构建分布式系统的基本概念、原则和挑战。&lt;/p>
&lt;p>这本书涵盖了与分布式系统相关的广泛主题，包括网络、容错性、一致性模型、分布式算法、可扩展性等等。它旨在以清晰易懂的方式解释复杂的概念，适合初学者和有经验的分布式系统从业者阅读。&lt;/p>
&lt;p>在整本书中，作者提供了各种实际案例和案例研究，以说明分布式系统的实际应用和实践方面。它还强调了构建分布式系统涉及的权衡和设计考虑，帮助读者全面理解这个主题。&lt;/p>
&lt;p>《分布式系统：为了乐趣和利益》作为开源资源，可以免费在线获取，非常适合任何对学习分布式系统感兴趣的人。&lt;/p>
&lt;p>原文链接：&lt;a href="https://book.mixu.net/distsys/single-page.html" target="_blank">Distributed systems: for fun and profit&lt;/a>&lt;/p></description></item><item><title>[译]《分布式系统：为了乐趣和利益》6.进一步阅读和附录</title><link>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-06/</link><pubDate>Fri, 10 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-06/</guid><description>&lt;blockquote>
&lt;p>《分布式系统：为了乐趣和利益》是一本广受欢迎的资源，用于理解和学习分布式系统。该书由作者Mikito Takada撰写，介绍了构建分布式系统的基本概念、原则和挑战。&lt;/p>
&lt;p>这本书涵盖了与分布式系统相关的广泛主题，包括网络、容错性、一致性模型、分布式算法、可扩展性等等。它旨在以清晰易懂的方式解释复杂的概念，适合初学者和有经验的分布式系统从业者阅读。&lt;/p>
&lt;p>在整本书中，作者提供了各种实际案例和案例研究，以说明分布式系统的实际应用和实践方面。它还强调了构建分布式系统涉及的权衡和设计考虑，帮助读者全面理解这个主题。&lt;/p>
&lt;p>《分布式系统：为了乐趣和利益》作为开源资源，可以免费在线获取，非常适合任何对学习分布式系统感兴趣的人。&lt;/p>
&lt;p>原文链接：&lt;a href="https://book.mixu.net/distsys/single-page.html" target="_blank">Distributed systems: for fun and profit&lt;/a>&lt;/p></description></item><item><title>[译]给年轻的工程师们的关于分布式系统的一些笔记</title><link>https://blog.chensoul.cc/posts/2023/11/10/notes-on-distributed-systems-for-young-bloods/</link><pubDate>Fri, 10 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/11/10/notes-on-distributed-systems-for-young-bloods/</guid><description>&lt;p>我一直在思考分布式系统工程师在工作中学到的教训。我们大部分的教导都来自于在生产环境中犯过的错误留下的伤痕。这些伤痕固然是有用的提醒，但让更多的工程师能够完整地保留手指会更好。&lt;/p>
&lt;p>新的系统工程师在自我学习中会遇到分布式计算的谬论和CAP定理。但这些都是抽象的概念，缺乏针对经验不足的工程师直接可行的建议。让人惊讶的是，新工程师在开始工作时所了解到的背景信息是如此之少。&lt;/p>
&lt;p>下面是我作为一名分布式系统工程师学到的一些经验教训，值得告诉新工程师。其中一些经验是微妙的，一些是令人惊讶的，但没有一条是有争议的。这个列表是为了引导新的分布式系统工程师思考他们所从事领域的问题，虽然不是全面的，但是是一个很好的开始。&lt;/p>
&lt;p>这个列表最糟糕的特点是它主要关注技术问题，很少讨论工程师可能遇到的社交问题。由于分布式系统需要更多的机器和资本，它们的工程师往往需要与更多的团队和更大的组织合作。社交问题通常是任何软件开发者工作中最困难的部分，也许对于分布式系统的开发来说尤其如此。&lt;/p>
&lt;p>我们的背景、教育和经验使我们倾向于采用技术解决方案，即使社交解决方案可能更高效、更令人满意。让我们试着纠正这一点。与计算机相比，人们并不那么挑剔，即使他们的接口没有那么标准化。&lt;/p>
&lt;p>好了，我们开始吧。&lt;/p>
&lt;p>&lt;strong>分布式系统是不同的，因为它们经常失败。&lt;/strong> 当被问及是什么将分布式系统与软件工程的其他领域区分开来时，这位新工程师经常引用延迟，认为这是使分布式计算变得困难的原因。&lt;/p></description></item><item><title>[译]《分布式系统：为了乐趣和利益》介绍</title><link>https://blog.chensoul.cc/posts/2023/11/09/distributed-systems-intro/</link><pubDate>Thu, 09 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/11/09/distributed-systems-intro/</guid><description>&lt;blockquote>
&lt;p>《分布式系统：为了乐趣和利益》是一本广受欢迎的资源，用于理解和学习分布式系统。该书由作者Mikito Takada撰写，介绍了构建分布式系统的基本概念、原则和挑战。&lt;/p>
&lt;p>这本书涵盖了与分布式系统相关的广泛主题，包括网络、容错性、一致性模型、分布式算法、可扩展性等等。它旨在以清晰易懂的方式解释复杂的概念，适合初学者和有经验的分布式系统从业者阅读。&lt;/p>
&lt;p>在整本书中，作者提供了各种实际案例和案例研究，以说明分布式系统的实际应用和实践方面。它还强调了构建分布式系统涉及的权衡和设计考虑，帮助读者全面理解这个主题。&lt;/p>
&lt;p>《分布式系统：为了乐趣和利益》作为开源资源，可以免费在线获取，非常适合任何对学习分布式系统感兴趣的人。&lt;/p>
&lt;p>原文链接：&lt;a href="https://book.mixu.net/distsys/single-page.html" target="_blank">Distributed systems: for fun and profit&lt;/a>&lt;/p></description></item><item><title>JHipster安装和介绍</title><link>https://blog.chensoul.cc/posts/2023/11/02/jhipster-intro/</link><pubDate>Thu, 02 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/11/02/jhipster-intro/</guid><description>&lt;p>JHipster 是一个开发平台，可以快速生成，开发和部署现代 Web 应用程序+微服务架构。&lt;/p>
&lt;p>JHipster 或者称 Java Hipster，是一个应用代码产生器，能够创建 Spring Boot/Spring Cloud + React/VueJs/AngularJS 的应用。使用 JHipster，首先你要配置好 Java 、Git 以及 Maven 或者 Gradle 的环境，然后通过 NodeJs 管理工具安装 JHipster 。&lt;/p></description></item><item><title>[译]Spring Boot3和Spring6中的新特性</title><link>https://blog.chensoul.cc/posts/2023/10/13/new-features-in-spring-boot-3-and-spring-6/</link><pubDate>Fri, 13 Oct 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/10/13/new-features-in-spring-boot-3-and-spring-6/</guid><description>&lt;p>Spring Boot 3.0 于 2022 年 11 月正式发布，包含一些新功能和改进。这是继大约 4.5 年前发布 Spring Boot 2.0 后 Spring Boot 的第一个主要版本。它也是第一个支持 Spring Framework 6.0 的 Spring Boot GA 版本。作为开发人员，我们需要了解这些更新，才能顺利使用 Spring Boot。毫无疑问，新版本中最大的转变之一是放弃了对旧版本 Java 的支持。&lt;/p></description></item><item><title>[译]DevOps 和测试人员的 Git 面试问题</title><link>https://blog.chensoul.cc/posts/2023/10/12/git-interview-questions/</link><pubDate>Thu, 12 Oct 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/10/12/git-interview-questions/</guid><description>&lt;p>欢迎来到 Git 面试准备指南，我们将在这里向初学者和经验丰富的专业人士讨论最常见的 Git 面试问题。无论您是准备参加 DevOps 或测试面试，还是希望提高 Git 技能，此资源都可以通过深入研究一些与 Git 基本概念和实践相关的最常见面试问题来帮助您。&lt;/p></description></item><item><title>[译]Spring Security 面试问题</title><link>https://blog.chensoul.cc/posts/2023/10/12/spring-security-interview-questions/</link><pubDate>Thu, 12 Oct 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/10/12/spring-security-interview-questions/</guid><description>&lt;p>本面试准备指南将讨论一些常见的 Spring Security 面试问题。无论您是准备面试还是只是想增强对 Spring Security 的了解，这些问题都将帮助您理解关键概念并指导您设计常见安全问题的解决方案。&lt;/p>
&lt;h2 id="1-spring-security-的核心特性是什么">1. Spring Security 的核心特性是什么？&lt;/h2>
&lt;p>Spring Security 提供的两个最突出的功能是身份验证和授权。这些功能在确保应用程序的安全性方面发挥着至关重要的作用。然而，Spring Security 超越了身份验证和授权，还提供了额外的功能来防止漏洞利用并与其他框架集成。&lt;/p></description></item><item><title>[译]关于 HTTP 您需要了解的一切</title><link>https://blog.chensoul.cc/posts/2023/10/12/http-in-depth/</link><pubDate>Thu, 12 Oct 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/10/12/http-in-depth/</guid><description>&lt;p>HTTP 是每个 Web 开发人员都应该了解的协议，因为它为整个 Web 提供动力。了解 HTTP 当然可以帮助您开发更好的应用程序。&lt;/p></description></item><item><title>前端学习路线图</title><link>https://blog.chensoul.cc/posts/2023/10/12/frontend-roadmap/</link><pubDate>Thu, 12 Oct 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/10/12/frontend-roadmap/</guid><description>&lt;p>前端学习路线图:&lt;/p>
&lt;ul>
&lt;li>Internet：
&lt;ul>
&lt;li>HTTP&lt;/li>
&lt;li>DNS&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>HTML
&lt;ul>
&lt;li>Basic&lt;/li>
&lt;li>Semantic HTML&lt;/li>
&lt;li>Forms and Validations&lt;/li>
&lt;li>Accessibility&lt;/li>
&lt;li>SEO&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>CSS
&lt;ul>
&lt;li>Basic&lt;/li>
&lt;li>Layout&lt;/li>
&lt;li>Responsive Design&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>JavaScript
&lt;ul>
&lt;li>Baisc&lt;/li>
&lt;li>DOM&lt;/li>
&lt;li>Fetch API / Ajax&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Package Manager
&lt;ul>
&lt;li>npm&lt;/li>
&lt;li>pnpm&lt;/li>
&lt;li>yarn&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Framework
&lt;ul>
&lt;li>Angular&lt;/li>
&lt;li>Vue.js&lt;/li>
&lt;li>React&lt;/li>
&lt;li>Svelte&lt;/li>
&lt;li>Solid JS&lt;/li>
&lt;li>Qwik&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Writing CSS
&lt;ul>
&lt;li>Tailwind&lt;/li>
&lt;li>Radix UI&lt;/li>
&lt;li>Shadcn UI&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>CSS Architecture
&lt;ul>
&lt;li>BEM&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>CSS Preprocessors
&lt;ul>
&lt;li>SASS&lt;/li>
&lt;li>PostCSS&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Build
&lt;ul>
&lt;li>Module Bundlers
&lt;ul>
&lt;li>parcel&lt;/li>
&lt;li>Rollup&lt;/li>
&lt;li>Webpack&lt;/li>
&lt;li>esbuild&lt;/li>
&lt;li>Vite&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Task Runners
&lt;ul>
&lt;li>npm scripts&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Linters and Formatters
&lt;ul>
&lt;li>Prettier&lt;/li>
&lt;li>ESLint&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Test
&lt;ul>
&lt;li>Vitest&lt;/li>
&lt;li>Jest&lt;/li>
&lt;li>Playwirte&lt;/li>
&lt;li>Cypress&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Authentication Strategies
&lt;ul>
&lt;li>JWT&lt;/li>
&lt;li>OAuth&lt;/li>
&lt;li>SSO&lt;/li>
&lt;li>Basic Auth&lt;/li>
&lt;li>Session Auth&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Web Security Basics
&lt;ul>
&lt;li>CORS&lt;/li>
&lt;li>HTTPS&lt;/li>
&lt;li>CSP&lt;/li>
&lt;li>OWASP Security Risks&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Web Components
&lt;ul>
&lt;li>HTML Templates&lt;/li>
&lt;li>Custom Elements&lt;/li>
&lt;li>Shadow DOM&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Type Checkers
&lt;ul>
&lt;li>TypeScript&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Server Side Rendering(SSR)
&lt;ul>
&lt;li>Svelte
&lt;ul>
&lt;li>Svelte Kit&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Vue.js
&lt;ul>
&lt;li>Nuxt.js&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Angular
&lt;ul>
&lt;li>Universal&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>React
&lt;ul>
&lt;li>Next.js&lt;/li>
&lt;li>Remix&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>GraphQL
&lt;ul>
&lt;li>Apollo&lt;/li>
&lt;li>Relay Modern&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Static Site Generators
&lt;ul>
&lt;li>Vuepress&lt;/li>
&lt;li>Jekyll&lt;/li>
&lt;li>Hugo&lt;/li>
&lt;li>Nuxt.js&lt;/li>
&lt;li>Astro&lt;/li>
&lt;li>Eleventy&lt;/li>
&lt;li>Next.js&lt;/li>
&lt;li>Remix&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Progressive Web App&lt;/li>
&lt;li>Mobel Applications
&lt;ul>
&lt;li>React Native&lt;/li>
&lt;li>Flutter&lt;/li>
&lt;li>Ionic&lt;/li>
&lt;li>NativeScript&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Desktop Applications&lt;/li>
&lt;li>Bonus Content&lt;/li>
&lt;/ul></description></item><item><title>React入门：初始化应用的两种方法</title><link>https://blog.chensoul.cc/posts/2023/09/22/react-create-project/</link><pubDate>Fri, 22 Sep 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/09/22/react-create-project/</guid><description>&lt;p>在 React 中，您可以使用多种方法来初始化一个应用程序。以下是几种常见的方法：&lt;/p>
&lt;ol>
&lt;li>使用 Create React App（CRA）。Create React App 是一个官方提供的脚手架工具，用于快速创建 React 应用程序的基本结构和配置。&lt;/li>
&lt;li>使用 Vite。Vite 是一个快速、简单且现代化的前端构建工具。&lt;/li>
&lt;/ol>
&lt;h2 id="create-react-app">create-react-app&lt;/h2>
&lt;p>&lt;code>create-react-app&lt;/code> 是一个用于快速创建 React 应用程序的命令行工具。它提供了一个简单的方式来设置和配置一个全新的 React 项目，包括构建、开发服务器和其他常见的配置。&lt;/p></description></item><item><title>[译]Spring Security 与 JWT for REST API</title><link>https://blog.chensoul.cc/posts/2023/09/19/spring-security-tutorial/</link><pubDate>Tue, 19 Sep 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/09/19/spring-security-tutorial/</guid><description>&lt;p>&lt;strong>免责声明：Spring Security 5+ 已发布 OAuth JWT 支持。建议使用最新版本的 OAuth 来支持 JWT，而不是使用自定义安全性或过滤器。&lt;/strong>&lt;/p></description></item><item><title>[译]如何使用Spring Security和JWT保护您的REST API</title><link>https://blog.chensoul.cc/posts/2023/09/19/spring-security-jwt/</link><pubDate>Tue, 19 Sep 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/09/19/spring-security-jwt/</guid><description>&lt;p>原文链接：&lt;a href="https://www.danvega.dev/blog/spring-security-jwt" target="_blank">How to Secure your REST APIs with Spring Security &amp;amp; JSON Web Tokens (JWTs)&lt;/a>&lt;/p></description></item><item><title>[译]REST API 的自定义错误消息处理</title><link>https://blog.chensoul.cc/posts/2023/08/25/global-error-handler-in-a-spring-rest-api/</link><pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/25/global-error-handler-in-a-spring-rest-api/</guid><description>&lt;h2 id="1-概述">1. 概述&lt;/h2>
&lt;p>在本教程中，我们将讨论如何为 Spring REST API 实现全局错误处理程序。&lt;/p>
&lt;p>我们将使用每个异常的语义为客户端构建有意义的错误消息，其明确的目标是为客户端提供所有信息以轻松诊断问题。&lt;/p></description></item><item><title>[译]Spring Events</title><link>https://blog.chensoul.cc/posts/2023/08/25/spring-events/</link><pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/25/spring-events/</guid><description>&lt;h2 id="1-概述">1. 概述&lt;/h2>
&lt;p>在本教程中，我们将讨论如何在 Spring 中使用事件。&lt;/p>
&lt;p>事件是框架中最容易被忽视的功能之一，但也是最有用的功能之一。与 Spring 中的许多其他功能一样，事件发布是 &lt;code>ApplicationContext&lt;/code> 提供的功能之一。&lt;/p></description></item><item><title>[译]使用@Async进行Spring Security上下文传播</title><link>https://blog.chensoul.cc/posts/2023/08/25/spring-security-async-principal-propagation/</link><pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/25/spring-security-async-principal-propagation/</guid><description>&lt;h2 id="1-简介">1. 简介&lt;/h2>
&lt;p>在本教程中，我们将重点关注使用 &lt;code>@Async&lt;/code> 传播 Spring Security 主体
默认情况下，Spring Security 身份验证绑定到 &lt;code>ThreadLocal&lt;/code> - 因此，当执行流在带有 &lt;code>@Async&lt;/code> 的新线程中运行时，它不会是经过身份验证的上下文。&lt;/p></description></item><item><title>[译]使用Spring进行REST的错误处理</title><link>https://blog.chensoul.cc/posts/2023/08/25/exception-handling-for-rest-with-spring/</link><pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/25/exception-handling-for-rest-with-spring/</guid><description>&lt;h2 id="1-概述">1. 概述&lt;/h2>
&lt;p>本教程将说明如何使用 Spring 为 REST API 实现异常处理。我们还将获得一些历史概述，并了解不同版本引入了哪些新选项。&lt;/p></description></item><item><title>[译]如何在Spring中执行@Async</title><link>https://blog.chensoul.cc/posts/2023/08/25/spring-async/</link><pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/25/spring-async/</guid><description>&lt;h2 id="1-概述">1. 概述&lt;/h2>
&lt;p>在本教程中，我们将探讨 Spring 中的异步执行支持和 &lt;code>@Async&lt;/code> 注解。&lt;/p>
&lt;p>简单地说，用 &lt;code>@Async&lt;/code> 注解 bean 的方法将使其在单独的线程中执行。换句话说，调用者不会等待被调用方法的完成。&lt;/p></description></item><item><title>如何成为一名合格的架构师</title><link>https://blog.chensoul.cc/posts/2023/08/21/architecture/</link><pubDate>Mon, 21 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/21/architecture/</guid><description>&lt;h2 id="如何成为一名合格的架构师">如何成为一名合格的架构师&lt;/h2>
&lt;p>成为一名合格的架构师需要不断学习和积累经验。以下是一些步骤和建议，可以帮助你成为一名合格的架构师：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>学习基础知识：建立坚实的计算机科学和软件工程基础，包括数据结构、算法、操作系统、数据库等。深入学习编程语言和开发技术，了解不同技术栈的优缺点。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>实践项目开发：通过参与实际的软件开发项目，积累项目管理和开发经验。亲身经历软件开发的各个阶段，从需求分析到设计、开发、测试和部署，深入了解软件开发的流程和挑战。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>学习系统设计和架构：深入学习系统设计和架构的相关知识，包括架构模式、设计原则。阅读相关的书籍、文章和技术博客，参与架构设计讨论和社区活动。&lt;/p>
&lt;p>以下是关于架构模式、设计原则和一些常见架构的简要介绍：&lt;/p>
&lt;ol>
&lt;li>架构模式：
&lt;ul>
&lt;li>分层架构（Layered Architecture）：将系统划分为多个层次，每个层次有不同的职责和功能，实现松耦合和可维护性。&lt;/li>
&lt;li>客户端-服务器模式（Client-Server）：将系统分为客户端和服务器，客户端发送请求并接收响应，服务器处理请求并提供服务。&lt;/li>
&lt;li>发布-订阅模式（Publish-Subscribe）：基于事件的模式，发布者发布事件，订阅者订阅感兴趣的事件，实现解耦和扩展性。&lt;/li>
&lt;li>微服务架构（Microservices Architecture）：将系统拆分为一组小型、自治的服务，每个服务专注于一个特定的业务功能，通过轻量通信协议进行交互。&lt;/li>
&lt;li>事件驱动架构（Event-Driven Architecture）：系统的组成部分通过事件进行通信和协调，事件的发生触发相应的处理和反应。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>设计原则：
&lt;ul>
&lt;li>单一职责原则（Single Responsibility Principle）：一个模块或类应该有且只有一个单一的责任。&lt;/li>
&lt;li>开闭原则（Open-Closed Principle）：软件实体应该对扩展开放，对修改封闭。&lt;/li>
&lt;li>里氏替换原则（Liskov Substitution Principle）：子类应该能够替换掉父类，并且不会破坏程序的正确性。&lt;/li>
&lt;li>接口隔离原则（Interface Segregation Principle）：不应该强迫客户端依赖于它们不需要的接口。&lt;/li>
&lt;li>依赖倒置原则（Dependency Inversion Principle）：应该依赖于抽象而不是具体实现。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>实践架构设计：在实际项目中担任架构师的角色，负责系统的整体设计和架构决策。通过实践中的挑战和经验，不断提升自己的架构设计能力。&lt;/p></description></item><item><title>软件开发流程和常用开发方法</title><link>https://blog.chensoul.cc/posts/2023/08/21/the-software-development-process/</link><pubDate>Mon, 21 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/21/the-software-development-process/</guid><description>&lt;p>软件开发流程和常用开发方法，如敏捷开发和 DevOps，对于架构师来说非常重要。下面我将简要介绍这些概念：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>软件开发流程：&lt;/p>
&lt;p>软件开发流程是指在开发软件时，按照一定的步骤和阶段进行工作的过程。常见的软件开发流程包括瀑布模型、迭代模型和增量模型等。这些流程以不同的方式组织和管理开发过程，包括需求分析、设计、编码、测试和部署等阶段。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>敏捷开发：&lt;/p>
&lt;p>敏捷开发是一种迭代和增量的软件开发方法，强调团队协作、快速响应变化和持续交付。敏捷开发强调通过迭代周期（如 Scrum 中的 Sprint）来开发软件，每个迭代都会产生可部署的软件功能。常见的敏捷方法包括 Scrum、XP（极限编程）和 Kanban 等。&lt;/p></description></item><item><title>[译]Spring Boot项目如何实现JWT认证？</title><link>https://blog.chensoul.cc/posts/2023/08/18/how-to-implement-jwt-authentication-in-spring-boot-project/</link><pubDate>Fri, 18 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/18/how-to-implement-jwt-authentication-in-spring-boot-project/</guid><description>&lt;p>&lt;img src="https://blog.chensoul.cc/images/JWT_With_SpringBoot-1.webp" alt="How to implement JWT Authentication in Spring Boot Project?">&lt;/p></description></item><item><title>[译]Spring Boot项目如何实现Security？</title><link>https://blog.chensoul.cc/posts/2023/08/18/how-to-implement-security-in-spring-boot-project/</link><pubDate>Fri, 18 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/18/how-to-implement-security-in-spring-boot-project/</guid><description>&lt;p>&lt;img src="https://blog.chensoul.cc/images/SpringSecurityBasics-2.webp" alt="How to implement Security in Spring Boot Project?">&lt;/p></description></item><item><title>[译]如何在Spring Boot2中使用UserDetailsService实现安全性？</title><link>https://blog.chensoul.cc/posts/2023/08/18/how-to-implement-security-in-spring-boot2-using-userdetailsservice/</link><pubDate>Fri, 18 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/18/how-to-implement-security-in-spring-boot2-using-userdetailsservice/</guid><description>&lt;p>&lt;img src="https://blog.chensoul.cc/images/Thymeleaf_SpringSecurity-1.webp" alt="img">&lt;/p>
&lt;p>继续上一篇&lt;a href="https://javatechonline.com/how-to-implement-security-in-spring-boot-project/" target="_blank">关于实现 Spring Security 的两种不同方法&lt;/a>的文章，在本文中，我们将学习第三种方法“如何使用 UserDetailsS​​ervice 在 Spring Boot 中实现 Security？”。经过上一篇文章后，我希望我们都非常熟悉安全性的基础知识，甚至是 Spring Boot 应用程序中的安全性基础知识。这次我们将创建一个用户注册表并将用户及其角色保存到数据库中。&lt;/p></description></item><item><title>[译]如何在Spring Boot3中使用UserDetailsService实现安全性？</title><link>https://blog.chensoul.cc/posts/2023/08/18/how-to-implement-security-in-spring-boot3-using-userdetailsservice/</link><pubDate>Fri, 18 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/18/how-to-implement-security-in-spring-boot3-using-userdetailsservice/</guid><description>&lt;p>&lt;img src="https://blog.chensoul.cc/images/UserDetailsServiceSpringBoot3-1.webp" alt="Spring Security UserDetailsService Using Spring Boot 3">&lt;/p>
&lt;p>作为有关 Spring Security 的系列文章的继续，在本文中我们将学习“如何在 Spring Boot 3 中使用 UserDetailsService 实现 Spring Boot 中的安全性？”。经过前面的文章，我希望我们都非常熟悉安全性的基础知识，甚至 Spring Boot 应用程序中的安全性基础知识。 Spring Boot 3 发布后，我们将在这里实现“使用 Spring Boot 3 的 Spring Security UserDetailsService”。&lt;/p></description></item><item><title>[译]没有WebSecurityConfigurerAdapter的Spring Security.md</title><link>https://blog.chensoul.cc/posts/2023/08/18/spring-security-without-websecurityconfigureradapter/</link><pubDate>Fri, 18 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/18/spring-security-without-websecurityconfigureradapter/</guid><description>&lt;p>&lt;img src="https://blog.chensoul.cc/images/WebSecurityConfigurerAdapter-Deprecated-1.webp" alt="WebSecurityConfigurerAdapter Deprecated">&lt;/p>
&lt;p>在 Spring Security 模块的上下文中，WebSecurityConfigurerAdapter 是一个抽象类，根据 &lt;a href="https://spring.io/blog/2022/02/21/spring-security-without-the-websecurityconfigureradapter" target="_blank">Spring 官方网站&lt;/a> 2022 年 2 月 21 日发布的公告，该类已从 Spring Security 5.7.0-M2 中弃用。它通常用于扩展 configure() 方法由自定义配置子类实现。因此，它鼓励用户转向基于组件的安全配置。为了支持对这种新配置设计的更改，我们将讨论常见用例列表和未来建议的替代方案。因此，我们将讨论没有 WebSecurityConfigurerAdapter 的 Spring Security 用例的实现。&lt;/p></description></item><item><title>[译]Spring Security - JWT</title><link>https://blog.chensoul.cc/posts/2023/08/16/spring-security-with-jwt/</link><pubDate>Wed, 16 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/16/spring-security-with-jwt/</guid><description>&lt;h3 id="简介和概述">简介和概述&lt;/h3>
&lt;p>JSON Web Token 或 JWT（更常见的名称）是一种开放的互联网标准 (RFC 7519)，用于以紧凑的方式在各方之间安全地传输可信信息。令牌包含编码为 JSON 对象的声明，并使用私有密钥或公钥/私钥对进行数字签名。它们是独立且可验证的，因为它们经过数字签名。 JWT 可以进行签名和/或加密。&lt;/p></description></item><item><title>[译]Spring Security - OAuth2</title><link>https://blog.chensoul.cc/posts/2023/08/16/spring-security-with-oauth2/</link><pubDate>Wed, 16 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/16/spring-security-with-oauth2/</guid><description>&lt;h2 id="oauth-20-基础知识">OAuth 2.0 基础知识&lt;/h2>
&lt;p>&lt;img src="https://www.tutorialspoint.com/spring_security/images/oauth_2_fundamentals.webp" alt="OAuth 2.0 Fundamentals">&lt;/p>
&lt;p>OAuth 2.0 由 IETF OAuth 工作组开发并于 2012 年 10 月发布。它作为一种开放授权协议，使第三方应用程序能够代表资源所有者对 HTTP 服务进行有限访问。它可以在不泄露用户身份或长期凭证的情况下做到这一点。第三方应用程序本身也可以代表其使用它。&lt;/p></description></item><item><title>[译]Spring Security - 使用数据库表单登录</title><link>https://blog.chensoul.cc/posts/2023/08/16/spring-security-form-login-with-database/</link><pubDate>Wed, 16 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/16/spring-security-form-login-with-database/</guid><description>&lt;h2 id="内容">内容&lt;/h2>
&lt;ul>
&lt;li>简介和概述&lt;/li>
&lt;li>Spring Security 的基本组件
&lt;ul>
&lt;li>AuthenticationFilter 认证过滤器&lt;/li>
&lt;li>AuthenticationManager 认证管理器&lt;/li>
&lt;li>AuthenticationProvider 认证提供者&lt;/li>
&lt;li>UserDetailsService 用户详情服务&lt;/li>
&lt;li>PasswordEncoder 密码编码器&lt;/li>
&lt;li>Spring 安全上下文&lt;/li>
&lt;li>表单登录&lt;/li>
&lt;li>使用数据库登录&lt;/li>
&lt;li>登录尝试限制&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>入门（实用指南）&lt;/li>
&lt;/ul>
&lt;h2 id="简介和概述">简介和概述&lt;/h2>
&lt;p>除了提供各种内置的身份验证和授权选项之外，Spring Security 还允许我们根据需要自定义身份验证过程。从自定义登录页面到我们自己的自定义身份验证提供程序和身份验证过滤器，我们几乎可以自定义身份验证过程的各个方面。&lt;/p></description></item><item><title>[译]Spring Security - 表单登录、记住我和注销</title><link>https://blog.chensoul.cc/posts/2023/08/16/spring-security-form-login-remember-me-and-logout/</link><pubDate>Wed, 16 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/16/spring-security-form-login-remember-me-and-logout/</guid><description>&lt;h2 id="内容">内容&lt;/h2>
&lt;ul>
&lt;li>简介和概述&lt;/li>
&lt;li>入门（实用指南）&lt;/li>
&lt;/ul>
&lt;h2 id="简介和概述">简介和概述&lt;/h2>
&lt;p>Spring Security 附带了大量内置功能和工具，为我们提供方便。在这个例子中，我们将讨论其中三个有趣且有用的功能 -&lt;/p>
&lt;ul>
&lt;li>表单登录&lt;/li>
&lt;li>记住账号&lt;/li>
&lt;li>登出&lt;/li>
&lt;/ul>
&lt;h3 id="表单登录">表单登录&lt;/h3>
&lt;p>基于表单的登录是 Spring Security 提供支持的一种用户名/密码身份验证形式。这是通过 Html 表单提供的。&lt;/p></description></item><item><title>[译]Spring Security 和 Spring Boot 入门</title><link>https://blog.chensoul.cc/posts/2023/08/16/spring-security/</link><pubDate>Wed, 16 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/16/spring-security/</guid><description>&lt;p>&lt;a href="https://docs.spring.io/spring-security/reference/index.html" target="_blank">Spring Security&lt;/a> 是一个有助于保护企业应用程序安全的框架。通过与 Spring MVC、Spring Webflux 或 Spring Boot 集成，我们可以创建一个强大且高度可定制的身份验证和访问控制框架。在本文中，我们将解释核心概念并仔细研究 Spring Security 提供的默认配置及其工作原理。我们将进一步尝试自定义它们并分析它们对示例 Spring Boot 应用程序的影响。&lt;/p></description></item><item><title>[译]Spring Security：深入了解身份验证和授权</title><link>https://blog.chensoul.cc/posts/2023/08/16/spring-security-authentication-and-authorization/</link><pubDate>Wed, 16 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/16/spring-security-authentication-and-authorization/</guid><description>&lt;p>您可以使用本指南来了解 Spring Security 是什么以及其核心功能（如身份验证、授权或常见漏洞保护）如何工作。此外，还有全面的常见问题解答。&lt;/p>
&lt;p>（编者注：大约 6500 字，您可能不想尝试在移动设备上阅读本文。将其添加为书签，稍后再回来。）&lt;/p>
&lt;h2 id="介绍">介绍&lt;/h2>
&lt;p>迟早每个人都需要为其项目添加安全性，在 Spring 生态系统中，您可以借助 Spring Security 库来实现这一点。&lt;/p></description></item><item><title>[译]为 Spring Boot 应用程序创建优化的 Docker 映像</title><link>https://blog.chensoul.cc/posts/2023/08/16/spring-boot-docker/</link><pubDate>Wed, 16 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/16/spring-boot-docker/</guid><description>&lt;p>容器已成为打包具有所有软件和操作系统依赖项的应用程序，然后将其传送到不同环境的首选方式。&lt;/p>
&lt;p>本文着眼于容器化 Spring Boot 应用程序的不同方法：&lt;/p>
&lt;ul>
&lt;li>使用 Docker 文件构建 Docker 镜像，&lt;/li>
&lt;li>使用 Cloud-Native Buildpack 从源代码构建 OCI 映像，&lt;/li>
&lt;li>通过使用分层工具将 JAR 的各个部分拆分为不同的层，在运行时优化映像。&lt;/li>
&lt;/ul>
&lt;h2 id="示例代码">示例代码&lt;/h2>
&lt;p>本文附有 &lt;a href="https://github.com/thombergs/code-examples/tree/master/spring-boot/spring-boot-docker" target="_blank">GitHub&lt;/a> 上的工作代码示例。&lt;/p></description></item><item><title>[译]深入了解Spring事务管理：@Transactional</title><link>https://blog.chensoul.cc/posts/2023/08/16/spring-transaction-management-transactional-in-depth/</link><pubDate>Wed, 16 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/16/spring-transaction-management-transactional-in-depth/</guid><description>&lt;p>您可以使用本指南来简单实用地了解 Spring 使用 @Transactional 注释进行事务管理的工作原理。&lt;/p>
&lt;p>唯一的先决条件？您需要对 ACID 有一个粗略的了解，即什么是数据库事务以及为什么使用它们。此外，这里不讨论分布式事务或反应式事务，但就 Spring 而言，一般原则仍然适用。&lt;/p></description></item><item><title>Spring Security和OAuth2发展过程</title><link>https://blog.chensoul.cc/posts/2023/08/15/spring-security-oauth2-history/</link><pubDate>Tue, 15 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/15/spring-security-oauth2-history/</guid><description>&lt;h2 id="spring-security-的发展过程">Spring Security 的发展过程&lt;/h2>
&lt;p>Spring Security 是一个功能强大且广泛使用的安全框架，为企业级应用程序提供了全面的安全性。Spring Security 最初是 Acegi Security 项目的一部分，于 2004 年发布，现在已经成为 Spring 生态系统的核心组件。 Spring Security 的发展过程可以分为三个阶段：&lt;/p></description></item><item><title>数据库如何设计树形结构</title><link>https://blog.chensoul.cc/posts/2023/08/15/tree-structure-in-database/</link><pubDate>Tue, 15 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/15/tree-structure-in-database/</guid><description>&lt;p>在 MySQL 中，设计树形结构的区域表有多种方式。以下是一些常见的方案：&lt;/p>
&lt;ol>
&lt;li>父子关系（Parent-Child Relationship）模型：在这种模型中，每个行记录包含一个指向其父级的引用。可以使用一个额外的列来存储父级 ID，或者使用自连接表来表示关系。这种模型简单直观，易于理解和管理。&lt;/li>
&lt;li>路径（Path）模型：在这种模型中，每个行记录都包含一个代表其完整路径的字段。路径可以是以某种分隔符（如斜杠）分隔的字符串，例如：/地区/国家/城市。通过解析和处理路径字段，可以轻松地查询父级、子级和兄弟节点。&lt;/li>
&lt;li>嵌套集模型（Nested Set Model）：这是一种基于左右值的模型，通过预先计算每个节点的左右值，可以高效地查询树形结构。每个节点都有一个左值和一个右值，用于表示其在树中的位置。这种模型适用于大型树结构，但需要特殊的操作来维护左右值。&lt;/li>
&lt;li>物化路径（Materialized Path）模型：这是路径模型的一种改进版本，它使用额外的列来存储节点的层级关系。除了路径字段外，还可以添加一个表示节点级别的字段。这样可以更高效地进行查询，并且可以轻松地获取节点的父级、子级和兄弟节点。&lt;/li>
&lt;/ol>
&lt;h2 id="父子关系parent-child-relationship模型">父子关系（Parent-Child Relationship）模型&lt;/h2>
&lt;p>父子关系（Parent-Child Relationship）模型是一种在 MySQL 中设计树形结构的方式。在该模型中，每个区域记录包含一个指向其父级区域的引用。通过这种父子关系，可以建立区域之间的层级结构。&lt;/p></description></item><item><title>周报-28｜技术文档范例</title><link>https://blog.chensoul.cc/posts/2023/07/27/weekly_review_28/</link><pubDate>Thu, 27 Jul 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/07/27/weekly_review_28/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>本篇是对 &lt;code>2023-07-10&lt;/code> 到 &lt;code>2023-07-16&lt;/code> 这周生活的记录与思考。首发在我的个人 &lt;a href="https://blog.chensoul.cc/" target="_blank">博客&lt;/a>，你可以移步了解更多或者给我留言。&lt;/p>
&lt;blockquote>
&lt;p>读书、健身、投资、帮朋友、陪家人。&lt;/p>&lt;/blockquote>
&lt;p>这是我的第 27 篇周报，由于工作的原因，前两周的周报是一起发布的，所以第 27 篇周报被跳过去了。&lt;/p></description></item><item><title>[译]Spring Boot异常处理完整指南</title><link>https://blog.chensoul.cc/posts/2023/07/26/spring-boot-exception-handling/</link><pubDate>Wed, 26 Jul 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/07/26/spring-boot-exception-handling/</guid><description>&lt;p>处理异常是构建健壮应用程序的重要部分。 Spring Boot 提供了不止一种方法。&lt;/p>
&lt;p>本文将探讨这些方法，并提供一些关于何时某种给定方法可能优于另一种方法的指导。&lt;/p>
&lt;h2 id="示例代码">示例代码&lt;/h2>
&lt;p>本文附有 GitHub 上的工作&lt;a href="https://github.com/thombergs/code-examples/tree/master/spring-boot/exception-handling" target="_blank">代码示例&lt;/a>。&lt;/p></description></item><item><title>[译]Spring Boot授权服务器 - 使用 Java 的资源服务器和客户端凭证示例</title><link>https://blog.chensoul.cc/posts/2023/07/26/spring-boot-authorization-server/</link><pubDate>Wed, 26 Jul 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/07/26/spring-boot-authorization-server/</guid><description>&lt;h1 id="概述">概述&lt;/h1>
&lt;p>在本文中，我们将创建一个授权服务器，为任何客户端生成 access_token。这称为 OAuth2 的 &lt;code>client_credentials&lt;/code> 流程。它主要用于服务间通信。&lt;/p>
&lt;p>我们将使用 spring boot oauth2 授权服务器依赖项来创建身份验证服务器。我们还将创建一个资源服务器和客户端来对其进行端到端测试。&lt;/p></description></item><item><title>[译]使用 Spring Boot 和 Spring Security 配置 CORS</title><link>https://blog.chensoul.cc/posts/2023/07/26/spring-cors/</link><pubDate>Wed, 26 Jul 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/07/26/spring-cors/</guid><description>&lt;p>跨源资源共享 (CORS) 是一种基于 HTTP 标头的机制，允许服务器显式将某些源列入白名单，并帮助绕过同源策略。&lt;/p>
&lt;p>这是必需的，因为浏览器默认应用同源策略以确保安全。通过在 Web 应用程序中实施 CORS，网页可以请求额外的资源并从其他域加载到浏览器中。&lt;/p></description></item><item><title>[译]使用 Spring 的 Null-Safety 注解保护您的代码免受 NullPointerExceptions 的影响</title><link>https://blog.chensoul.cc/posts/2023/07/26/spring-boot-null-safety-annotations/</link><pubDate>Wed, 26 Jul 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/07/26/spring-boot-null-safety-annotations/</guid><description>&lt;p>&lt;code>NullPointerExceptions&lt;/code> （通常缩写为“NPE”）对于每个 Java 程序员来说都是一场噩梦。&lt;/p>
&lt;p>我们可以在互联网上找到大量解释如何编写空安全代码的文章。空安全确保我们在代码中添加了适当的检查，以保证对象引用不能为空，或者毕竟在对象为空时采取可能的安全措施。&lt;/p>
&lt;p>由于 &lt;code>NullPointerException&lt;/code> 是一个运行时异常，因此在代码编译过程中很难找出这种情况。 Java 的类型系统没有办法快速消除危险的空对象引用。&lt;/p></description></item><item><title>[译]使用Spring Boot Actuator公开有用的信息端点</title><link>https://blog.chensoul.cc/posts/2023/07/26/spring-boot-info-endpoint/</link><pubDate>Wed, 26 Jul 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/07/26/spring-boot-info-endpoint/</guid><description>&lt;p>在分布式、快节奏的环境中，开发团队通常希望了解他们部署应用程序的时间、部署的应用程序版本、部署的 Git 提交等等。&lt;/p>
&lt;p>Spring Boot Actuator 帮助我们监控和管理应用程序。它公开了提供应用程序运行状况、指标和其他相关信息的各种端点。&lt;/p>
&lt;p>在本文中，我们将了解如何使用 Spring Boot Actuator 和 Maven/Gradle 构建插件将此类信息添加到我们的项目中。&lt;/p></description></item><item><title>[译]在 Spring 中实现 OAuth2：使用范围（第 2 部分）</title><link>https://blog.chensoul.cc/posts/2023/07/26/using-oauth2-in-spring-scopes/</link><pubDate>Wed, 26 Jul 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/07/26/using-oauth2-in-spring-scopes/</guid><description>&lt;p>我们在&lt;a href="https://blog.chensoul.cc/posts/2023/07/26/using-oauth2-in-spring/">上一篇文章&lt;/a>中了解了基本的 OAuth2 概念以及如何在 Spring 中实现和执行不同的授权。在这篇文章中，我们将介绍 OAuth2 的另一个重要概念：范围。&lt;/p>
&lt;h2 id="oauth-范围">OAuth 范围&lt;/h2>
&lt;p>保护对应用程序的访问通常分两个步骤进行：身份验证和授权。要理解这两个概念，假设您在绝密政府大楼工作。在开始之前，你会得到一张卡片，可以让你进入建筑物。 OAuth 令牌可以看作是允许您访问的卡片。&lt;/p></description></item><item><title>[译]在 Spring 中实现 OAuth2：第 1 部分</title><link>https://blog.chensoul.cc/posts/2023/07/26/using-oauth2-in-spring/</link><pubDate>Wed, 26 Jul 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/07/26/using-oauth2-in-spring/</guid><description>&lt;p>OAuth2 是一组规范，主要提供对 Rest API 的安全访问的方法。 OAuth 的主要目的是允许通过使用令牌来执行身份验证和授权，而不必为每个操作提供凭据。由于本文的重点是实现，并且为了不重新发明轮子，可以查看 &lt;a href="https://tools.ietf.org/html/rfc6749" target="_blank">OAuth RFC&lt;/a> 或&lt;a href="https://en.wikipedia.org/wiki/OAuth" target="_blank">维基百科&lt;/a>以获取更多理论背景。在这篇文章中，我们将深入探讨 Spring 中的 OAuth2 实现以及如何使用不同的授权类型，但在此之前值得提供一些重要概念的简要定义。&lt;/p></description></item><item><title>[译]使用Spring Boot2和Spring Security 5以及JDBC令牌存储进行Oauth2集中授权</title><link>https://blog.chensoul.cc/posts/2023/07/14/oauth-2-centralized-authorization-with-spring-boot-2-and-spring-security-5-and-jdbc-token-store/</link><pubDate>Fri, 14 Jul 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/07/14/oauth-2-centralized-authorization-with-spring-boot-2-and-spring-security-5-and-jdbc-token-store/</guid><description>&lt;p>在这篇文章中，我们将了解如何使用 Spring Boot 2 和 Spring Security 5 OAuth2 来实现集中授权的授权服务器以及如何通过 GUI 对其进行管理，还将提供资源服务器演示以及 github 下的整个项目。&lt;/p></description></item><item><title>周报-26｜上半年的绩效总结</title><link>https://blog.chensoul.cc/posts/2023/07/11/weekly_review_26/</link><pubDate>Tue, 11 Jul 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/07/11/weekly_review_26/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>本篇是对 &lt;code>2023-06-26&lt;/code> 到 &lt;code>2023-07-09&lt;/code> 这周生活的记录与思考。首发在我的个人 &lt;a href="https://blog.chensoul.cc/" target="_blank">博客&lt;/a>，你可以移步了解更多或者给我留言。&lt;/p>
&lt;blockquote>
&lt;p>读书、健身、投资、帮朋友、陪家人。&lt;/p>&lt;/blockquote>
&lt;p>这两周主要是忙于工作，Wekatime 上统计的上周每天平均编程时间达到了 &lt;strong>6 hrs 52 mins&lt;/strong>，基本上每天都是早七晚七的上班节奏。于是，学习的时间都被工作占用了。工作的内容主要是整合多个系统实现 sso 登录，用到的技术有 SpringCloud、Spring Security Oauth2 等等。&lt;/p></description></item><item><title>Python学习7：输入和输出</title><link>https://blog.chensoul.cc/posts/2023/07/08/python-input-and-output/</link><pubDate>Sat, 08 Jul 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/07/08/python-input-and-output/</guid><description>&lt;p>在 Python 中，可以使用 input() 函数从标准输入读取用户输入的数据，并使用 print() 函数将数据输出到标准输出。下面是一些常用的输入输出方法：&lt;/p>
&lt;p>1、使用 input() 函数读取用户输入&lt;/p></description></item><item><title>Python学习6：模块和包</title><link>https://blog.chensoul.cc/posts/2023/07/06/python-module-package/</link><pubDate>Thu, 06 Jul 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/07/06/python-module-package/</guid><description>&lt;p>在 Python 中，模块（module）是指一个包含 Python 代码的文件，而包（package）则是指一个包含多个模块的文件夹。模块和包可以用来组织和管理 Python 代码，使得代码更加易于维护和扩展。&lt;/p>
&lt;p>以下是一些有关 Python 模块和包的基本知识：&lt;/p></description></item><item><title>周报-25｜端午安康</title><link>https://blog.chensoul.cc/posts/2023/06/28/weekly_review_25/</link><pubDate>Wed, 28 Jun 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/06/28/weekly_review_25/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>本篇是对 &lt;code>2023-06-19&lt;/code> 到 &lt;code>2023-06-25&lt;/code> 这周生活的记录与思考。首发在我的个人 &lt;a href="https://blog.chensoul.cc/" target="_blank">博客&lt;/a>，你可以移步了解更多或者给我留言。&lt;/p>
&lt;blockquote>
&lt;p>读书、健身、投资、帮朋友、陪家人。&lt;/p>&lt;/blockquote>
&lt;p>这周因为端午节，只上三天班，放三天假。祝愿所有父母端午安康！&lt;/p></description></item><item><title>[译]微服务设计模式</title><link>https://blog.chensoul.cc/posts/2023/06/26/microservice-design-patterns/</link><pubDate>Mon, 26 Jun 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/06/26/microservice-design-patterns/</guid><description>&lt;p>基于微服务的应用程序的主要特征在 &lt;a href="http://web.archive.org/web/20190705163602/http://blog.arungupta.me/microservices-monoliths-noops/" target="_blank">微服务、单体和 NoOps&lt;/a> 中定义。它们是功能分解或领域驱动设计、定义良好的接口、明确发布的接口、单一责任原则和潜在的多语言。每项服务都是完全自主和全栈的。&lt;/p>
&lt;p>因此，更改服务实现不会影响其他服务，因为它们使用定义良好的接口进行通信。这种应用程序有几个优点，但它不是 &lt;a href="http://web.archive.org/web/20190705163602/http://highscalability.com/blog/2014/4/8/microservices-not-a-free-lunch.html" target="_blank">免费的午餐&lt;/a>，需要在 NoOps 方面付出大量努力。&lt;/p>
&lt;p>但是假设您了解构建此类应用程序所需的工作或至少其中的一部分，并且愿意跳槽。你做什么工作？您构建此类应用程序的方法是什么？&lt;/p>
&lt;p>是否有任何关于这些微服务如何相互协作的设计模式？&lt;/p></description></item><item><title>[译]Python模块和包-简介</title><link>https://blog.chensoul.cc/posts/2023/06/25/python-modules-packages/</link><pubDate>Sun, 25 Jun 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/06/25/python-modules-packages/</guid><description>&lt;p>&lt;img src="https://blog.chensoul.cc/images/Python-Modules-and-Packages-An-Introduction_Watermarked.webp" alt="Python Modules &amp;amp; Packages">&lt;/p>
&lt;p>本文探讨了 Python 模块和 Python 包，这两种机制有助于模块化编程。&lt;/p></description></item><item><title>[译]用 Bottle 开发</title><link>https://blog.chensoul.cc/posts/2023/06/25/developing-with-bottle/</link><pubDate>Sun, 25 Jun 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/06/25/developing-with-bottle/</guid><description>&lt;p>&lt;img src="https://blog.chensoul.cc/images/bottle-logo.webp" alt="Bottle logo">&lt;/p>
&lt;p>我喜欢 &lt;a href="http://bottlepy.org/docs/stable/" target="_blank">bottle&lt;/a>。它是一个简单、快速且功能强大的 Python 微框架，非常适合小型 Web 应用程序和快速原型设计。对于那些刚刚开始 Web 开发的人来说，它也是一个出色的学习工具。&lt;/p></description></item><item><title>Python学习5：函数</title><link>https://blog.chensoul.cc/posts/2023/06/25/python-function/</link><pubDate>Sun, 25 Jun 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/06/25/python-function/</guid><description>&lt;h2 id="函数的定义">函数的定义&lt;/h2>
&lt;p>在 Python 中，函数是一段可重复使用的代码块，它接受一些输入（也称为参数）并产生一些输出。函数可以通过 &lt;code>def&lt;/code> 关键字来定义，语法如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">function_name&lt;/span>(parameters):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 	&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;This is a function&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># function body&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> value
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中，&lt;code>function_name&lt;/code> 是函数的名称，&lt;code>parameters&lt;/code> 是函数的参数列表，&lt;code>function body&lt;/code> 是函数的主体部分，包括需要执行的代码和可能的返回语句，&lt;code>return value&lt;/code> 是函数的返回值（如果有的话）。&lt;/p></description></item><item><title>[译]为恐龙解释现代CSS</title><link>https://blog.chensoul.cc/posts/2023/06/21/modern-css-explained-for-dinosaurs/</link><pubDate>Wed, 21 Jun 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/06/21/modern-css-explained-for-dinosaurs/</guid><description>&lt;p>&lt;img src="https://blog.chensoul.cc/images/modern-css-explained-for-dinosaurs-01.webp" alt="Dinosaur comic panel 1">&lt;/p>
&lt;p>奇怪的是，CSS 被认为是作为 Web 开发人员最容易学习和最难学习的语言之一。开始使用它当然很容易 - 您可以定义样式属性和值以应用于特定元素，然后&amp;hellip;&amp;hellip;这几乎就是您开始所需的一切！但是，对于大型项目，以有意义的方式组织 CSS 会变得纠结和复杂。更改任何一行 CSS 以设置一个页面上元素的样式通常会导致其他页面上的元素发生意外更改。&lt;/p></description></item><item><title>周报-24｜如果没有疼痛</title><link>https://blog.chensoul.cc/posts/2023/06/21/weekly_review_24/</link><pubDate>Wed, 21 Jun 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/06/21/weekly_review_24/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>本篇是对 &lt;code>2023-06-12&lt;/code> 到 &lt;code>2023-06-18&lt;/code> 这周生活的记录与思考。首发在我的个人 &lt;a href="https://blog.chensoul.cc/" target="_blank">博客&lt;/a>，你可以移步了解更多或者给我留言。&lt;/p>
&lt;blockquote>
&lt;p>读书、健身、投资、帮朋友、陪家人。&lt;/p>&lt;/blockquote>
&lt;h2 id="读书">读书&lt;/h2>
&lt;p>本周尚未读书。&lt;/p></description></item><item><title>[译]为恐龙解释现代HTML</title><link>https://blog.chensoul.cc/posts/2023/06/20/modern-html-explained-for-dinosaurs/</link><pubDate>Tue, 20 Jun 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/06/20/modern-html-explained-for-dinosaurs/</guid><description>&lt;p>&lt;img src="https://blog.chensoul.cc/images/raw-images/modern-html-explained-for-dinosaurs-01.webp" alt="Dinosaur comic panel 1">&lt;/p>
&lt;p>在三种主要的前端技术（ HTML，CSS 和 JavaScript ）中，HTML 仍然是最一致的。如果您唯一关心的是创建内容，那么 1990 年代的 HTML 文档看起来与 2018 年创建的文档非常相似：&lt;/p></description></item><item><title>[译]为恐龙解释现代JavaScript</title><link>https://blog.chensoul.cc/posts/2023/06/19/modern-javascript-explained-for-dinosaurs/</link><pubDate>Mon, 19 Jun 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/06/19/modern-javascript-explained-for-dinosaurs/</guid><description>&lt;p>&lt;img src="https://blog.chensoul.cc/images/modern-javascript-explained-for-dinosaurs-01.webp" alt="Images from Dinosaur Comics by Ryan North">&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>如果你从一开始就没有去过那里，那么学习现代 JavaScript 是很困难的。生态系统的发展和变化如此之快，以至于很难理解不同工具试图解决的问题。我从 1998 年开始编程，但直到 2014 年才开始认真学习 JavaScript。当时我记得遇到 &lt;a href="http://browserify.org/" target="_blank">Browserify&lt;/a> 并盯着它的标语：&lt;/p></description></item><item><title>Python学习4：流程控制</title><link>https://blog.chensoul.cc/posts/2023/06/14/python-flow-control/</link><pubDate>Wed, 14 Jun 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/06/14/python-flow-control/</guid><description>&lt;p>在 Python 中，流程控制语句包括条件语句（if-elif-else）、循环语句（for 和 while）、跳转语句（break、continue 和 return）和异常处理语句。&lt;/p>
&lt;h2 id="条件语句">条件语句&lt;/h2>
&lt;p>条件语句用于在不同的条件下执行不同的代码块。Python 中的条件语句是 if-elif-else 结构。&lt;/p></description></item><item><title>周报-23｜读书、健身、定投、帮朋友、陪家人</title><link>https://blog.chensoul.cc/posts/2023/06/14/weekly_review_23/</link><pubDate>Wed, 14 Jun 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/06/14/weekly_review_23/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>本篇是对 &lt;code>2023-06-05&lt;/code> 到 &lt;code>2023-06-11&lt;/code> 这周生活的记录与思考。首发在我的个人 &lt;a href="https://blog.chensoul.cc/" target="_blank">博客&lt;/a>，你可以移步了解更多或者给我留言。&lt;/p>
&lt;blockquote>
&lt;p>读书、健身、投资、帮朋友、陪家人。&lt;/p>&lt;/blockquote>
&lt;p>以后周报的主题，会包括这几个部分：读书、健身、投资、帮朋友、陪家人，再加上工作和本周分享两块内容。&lt;/p></description></item><item><title>Python学习3：运算符和表达式</title><link>https://blog.chensoul.cc/posts/2023/06/11/python-operator-and-expression/</link><pubDate>Sun, 11 Jun 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/06/11/python-operator-and-expression/</guid><description>&lt;p>在 Python 中，运算符是用于执行各种操作的符号或关键字；表达式是由操作符、变量、常量和函数调用等组成的，它们可以被计算求值并返回一个结果。&lt;/p>
&lt;p>以下是一些常用的运算符和表达式：&lt;/p>
&lt;h2 id="算术运算符">算术运算符&lt;/h2>
&lt;p>Python 中的算术运算符用于执行基本的算术运算，包括加、减、乘、除、取模和幂运算。以下是一些常用的算术运算符：&lt;/p>
&lt;ul>
&lt;li>&lt;code>+&lt;/code>：加法运算&lt;/li>
&lt;li>&lt;code>-&lt;/code>：减法运算&lt;/li>
&lt;li>&lt;code>*&lt;/code>：乘法运算&lt;/li>
&lt;li>&lt;code>/&lt;/code>：除法运算&lt;/li>
&lt;li>&lt;code>%&lt;/code>：取模运算，返回两个数相除的余数&lt;/li>
&lt;li>&lt;code>**&lt;/code>：幂运算，返回一个数的指定次幂&lt;/li>
&lt;/ul>
&lt;p>例如：&lt;/p></description></item><item><title>Python学习2：数据类型</title><link>https://blog.chensoul.cc/posts/2023/06/10/python-data-type/</link><pubDate>Sat, 10 Jun 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/06/10/python-data-type/</guid><description>&lt;p>Python 中的数据类型包括：&lt;/p>
&lt;ol>
&lt;li>数字类型：包括整型、浮点型、复数型和布尔类型：只有两个取值，True 和 False，用于表示逻辑值。&lt;/li>
&lt;li>字符串类型：由一系列字符组成，可以是单引号、双引号或三引号括起来的文本。&lt;/li>
&lt;li>列表类型：由一系列有序的元素组成，可以包含任何类型的数据。&lt;/li>
&lt;li>元组类型：与列表类似，但是&lt;code>元素不能被修改&lt;/code>。&lt;/li>
&lt;li>集合类型：由一组唯一的元素组成，支持集合的基本操作，如并集、交集和差集等。&lt;/li>
&lt;li>字典类型：由一组键值对组成，其中键是唯一的，用于查找和存储值。&lt;/li>
&lt;li>None 类型：表示空值或缺失值。&lt;/li>
&lt;/ol>
&lt;h2 id="数字">数字&lt;/h2>
&lt;p>在 Python 中，数字类型包括整数（int）、浮点数（float）、复数（complex）和布尔值（bool）。&lt;/p></description></item><item><title>周报-22｜微信读书笔记助手</title><link>https://blog.chensoul.cc/posts/2023/06/09/weekly_review_22/</link><pubDate>Fri, 09 Jun 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/06/09/weekly_review_22/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>本篇是对 &lt;code>2023-05-29&lt;/code> 到 &lt;code>2023-06-04&lt;/code> 这周生活的记录与思考。首发在我的个人 &lt;a href="https://blog.chensoul.cc/" target="_blank">博客&lt;/a>，你可以移步了解更多或者给我留言。&lt;/p>
&lt;p>读书、健身、定投、帮朋友、陪家人，本周周报增加一块内容：读书，记录每周读书的时间。&lt;/p>
&lt;h2 id="微信读书笔记助手">微信读书笔记助手&lt;/h2>
&lt;p>最近注销了微信阅读账号，清空了历史数据。本着宁缺毋滥的原则，书架重新添加了几本书。计划是重新使用微信阅读养成读书的习惯。&lt;/p></description></item><item><title>[译]什么是 Python Wheels，你为什么要关心它？</title><link>https://blog.chensoul.cc/posts/2023/06/01/python-wheels/</link><pubDate>Thu, 01 Jun 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/06/01/python-wheels/</guid><description>&lt;p>&lt;img src="https://blog.chensoul.cc/images/What-are-Python-Wheels-and-Why-Should-You-Care_Watermarked.22246cad13be.webp" alt="What Are Python Wheels and Why Should You Care?">&lt;/p></description></item><item><title>[译]使用 Python 的 pip 管理项目的依赖关系</title><link>https://blog.chensoul.cc/posts/2023/06/01/what-is-pip/</link><pubDate>Thu, 01 Jun 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/06/01/what-is-pip/</guid><description>&lt;p>&lt;img src="https://files.realpython.com/media/What-is-PIP_Watermarked.4944e95d83ad.jpg" alt="Using Python&amp;rsquo;s pip to Manage Your Projects&amp;rsquo; Dependencies">&lt;/p></description></item><item><title>周报-21｜Python之禅、产品经理被优化、端午节送节</title><link>https://blog.chensoul.cc/posts/2023/05/31/weekly_review_21/</link><pubDate>Wed, 31 May 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/05/31/weekly_review_21/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>&lt;img src="https://blog.chensoul.cc/images/weekly-review-21-00.webp" alt="weekly-review-21-00">&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>本篇是对 &lt;code>2023-05-22&lt;/code> 到 &lt;code>2023-05-28&lt;/code> 这周生活的记录与思考。首发在我的个人 &lt;a href="https://blog.chensoul.cc/" target="_blank">博客&lt;/a>，你可以移步了解更多或者给我留言。&lt;/p></description></item><item><title>周报-20｜自动生成每日早报、周末团建</title><link>https://blog.chensoul.cc/posts/2023/05/25/weekly_review_20/</link><pubDate>Thu, 25 May 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/05/25/weekly_review_20/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>&lt;img src="https://blog.chensoul.cc/images/weekly-review-20-00.webp" alt="weekly-review-20-00">&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted -->
&lt;p>本篇是对 &lt;code>2023-05-15&lt;/code> 到 &lt;code>2023-05-21&lt;/code> 这周生活的记录与思考。首发在我的个人 &lt;a href="https://blog.chensoul.cc/" target="_blank">博客&lt;/a>，你可以移步了解更多或者给我留言。&lt;/p></description></item><item><title>Python学习1：注释、变量和常量</title><link>https://blog.chensoul.cc/posts/2023/05/23/python-comment-and-variable/</link><pubDate>Tue, 23 May 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/05/23/python-comment-and-variable/</guid><description>&lt;p>Python 注释、变量和常量是编写 Python 代码时非常重要的概念，下面分别介绍它们的基本用法和语法。&lt;/p>
&lt;h2 id="hello-world">Hello World&lt;/h2>
&lt;p>创建一个 00_helloworld.py 文件，打印 hello world：&lt;/p></description></item><item><title>[译]Build Robust Continuous Integration With Docker and Friends</title><link>https://blog.chensoul.cc/posts/2023/05/22/docker-continuous-integration/</link><pubDate>Mon, 22 May 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/05/22/docker-continuous-integration/</guid><description>&lt;p>&lt;img src="https://blog.chensoul.cc/images/UPDATE-Docker-in-Action-Fitter-Happier-More-Productive_Watermarked-0765910.webp" alt="Build Robust Continuous Integration With Docker and Friends">&lt;/p></description></item><item><title>JSR 166规范</title><link>https://blog.chensoul.cc/posts/2023/05/18/jsr-166/</link><pubDate>Thu, 18 May 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/05/18/jsr-166/</guid><description>&lt;h2 id="jsr-介绍">JSR 介绍&lt;/h2>
&lt;p>JSR，全称 Java Specification Requests， 即 Java 规范提案， 主要是用于向 JCP(Java Community Process) 提出新增标准化技术规范的正式请求。每次 JAVA 版本更新都会有对应的 JSR 更新，比如在 Java 8 版本中，其新特性 Lambda 表达式对应的是 &lt;a href="http://jcp.org/en/jsr/detail?id=335" target="_blank">JSR 335&lt;/a>，新的日期和时间 API 对应的是 &lt;a href="http://jcp.org/en/jsr/detail?id=310" target="_blank">JSR 310&lt;/a>。&lt;/p></description></item><item><title>周报-19｜武功山看日出、Python初学建议</title><link>https://blog.chensoul.cc/posts/2023/05/18/weekly_review_19/</link><pubDate>Thu, 18 May 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/05/18/weekly_review_19/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>&lt;img src="https://blog.chensoul.cc/images/weekly-review-19-00.webp" alt="weekly-review-19-00">&lt;/p>
&lt;p>本篇是对 &lt;code>2023-05-08&lt;/code> 到 &lt;code>2023-05-14&lt;/code> 这周生活的记录与思考。首发在我的个人 &lt;a href="https://blog.chensoul.cc/" target="_blank">博客&lt;/a>，你可以移步了解更多或者给我留言。&lt;/p>
&lt;p>本周继续学习 python，发现一个质量非常高的 python 学习网站 &lt;a href="https://realpython.com/" target="_blank">Real Python&lt;/a>，该网站有学习 python 的一些教程，是收费的，部分章节是可以免费观看的。&lt;/p></description></item><item><title>Git Flow分支模型和使用</title><link>https://blog.chensoul.cc/posts/2023/05/11/git-flow-model-and-usage/</link><pubDate>Thu, 11 May 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/05/11/git-flow-model-and-usage/</guid><description>&lt;h2 id="介绍">介绍&lt;/h2>
&lt;p>&lt;a href="https://nvie.com/posts/a-successful-git-branching-model/" target="_blank">Git Flow&lt;/a> 是由 Vincent Driessen 在 2010 年提出的一种 Git 工作流。在这之前，Git 没有一个明确的标准工作流，导致团队在使用 Git 时往往会遇到一些问题，如分支管理、版本控制等。为了解决这些问题，Vincent Driessen 提出了 Git Flow 分支模型，成为了 Git 在实际应用中的一种标准工作流。&lt;/p></description></item><item><title>周报-18｜导出豆瓣数据、Effective Java 3第二章总结</title><link>https://blog.chensoul.cc/posts/2023/05/10/weekly_review_18/</link><pubDate>Wed, 10 May 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/05/10/weekly_review_18/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>本篇是对 &lt;code>2023-05-01&lt;/code> 到 &lt;code>2023-05-07&lt;/code> 这周生活的记录与思考。首发在我的个人 &lt;a href="https://blog.chensoul.cc/" target="_blank">博客&lt;/a>，你可以移步了解更多或者给我留言。&lt;/p>
&lt;p>继上周实现导出苹果接口数据之后，这周又实现了自动导出豆瓣数据。此外，还萌生了导出每天阅读的数据的想法。奈何现在阅读 app 都需要收费，只能暂且搁置这个想法。&lt;/p></description></item><item><title>Python包和环境管理</title><link>https://blog.chensoul.cc/posts/2023/05/09/python-package-and-env-management/</link><pubDate>Tue, 09 May 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/05/09/python-package-and-env-management/</guid><description>&lt;h2 id="发展历史">发展历史&lt;/h2>
&lt;p>Python 包管理工具是 Python 生态系统中的一个重要组成部分，它们为 Python 开发者提供了方便、快捷的包管理方式。以下是 Python 包管理工具的发展历史概述：&lt;/p></description></item><item><title>Python安装、构建、发布、下载和运行</title><link>https://blog.chensoul.cc/posts/2023/05/09/python-install-build-publish-run/</link><pubDate>Tue, 09 May 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/05/09/python-install-build-publish-run/</guid><description>&lt;p>最近开始学习 python，这篇文章记录如何安装 python、搭建 python 开发环境，以及如何构建、发布 python 包。我使用的是 macos 系统，所以本篇文章中的一些命令是基于 macos ，特此说明。&lt;/p></description></item><item><title>周报-17｜导出苹果健康数据、自动化收集个人数据、FlexyPool动态连接池</title><link>https://blog.chensoul.cc/posts/2023/05/06/weekly_review_17/</link><pubDate>Sat, 06 May 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/05/06/weekly_review_17/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>本篇是对 &lt;code>2023-04-24&lt;/code> 到 &lt;code>2023-04-30&lt;/code> 这周生活的记录与思考。首发在我的个人 &lt;a href="https://blog.chensoul.cc/" target="_blank">博客&lt;/a>，你可以移步了解更多或者给我留言。&lt;/p>
&lt;p>本周二早上跑步右小腿抽筋，跑步暂停了两天，所以有两天走路没有到一万步。在小腿恢复之后，继续跑步，查看 strava 上的统计，这周总共跑了 27 公里，比上周 41 公里少了 14 公里。&lt;/p></description></item><item><title>周报-16｜《灌篮高手》电影、《春山如笑》话剧</title><link>https://blog.chensoul.cc/posts/2023/04/25/weekly_review_16/</link><pubDate>Tue, 25 Apr 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/04/25/weekly_review_16/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>&lt;img src="https://blog.chensoul.cc/images/weekly-review-16-01.webp" alt="weekly-review-16-01">&lt;/p>
&lt;p>本篇是对 &lt;code>2023-04-17&lt;/code> 到 &lt;code>2023-04-23&lt;/code> 这周生活的记录与思考。首发在我的个人 &lt;a href="https://blog.chensoul.cc/" target="_blank">博客&lt;/a>，你可以移步了解更多或者给我留言。&lt;/p>
&lt;p>这周的工作，手上累积了三个迭代版本，因为临近五一及其他原因，短期内无法发布上线。开发过程中，想着这些版本都会一个个上线，所以三个版本之间合并了代码，存在了依赖关系。以后，还是需要小版本迭代、上一个版本发布之后再从 main 分支合并代码。&lt;/p></description></item><item><title>周报-15｜Umami升级到2.0、汉街蜡像馆、使用Strava跑步</title><link>https://blog.chensoul.cc/posts/2023/04/18/weekly_review_15/</link><pubDate>Tue, 18 Apr 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/04/18/weekly_review_15/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>&lt;img src="https://blog.chensoul.cc/images/weekly-review-15-01.webp" alt="weekly-review-15-01">&lt;/p>
&lt;p>&lt;em>题图：楚河汉街蜡像馆&lt;/em>&lt;/p>
&lt;p>本篇是对 &lt;code>2023-04-10&lt;/code> 到 &lt;code>2023-04-16&lt;/code> 这周生活的记录与思考。首发在我的个人 &lt;a href="https://blog.chensoul.cc/" target="_blank">博客&lt;/a>，你可以移步了解更多或者给我留言。&lt;/p></description></item><item><title>周报-14｜如何学习一门编程语言</title><link>https://blog.chensoul.cc/posts/2023/04/13/weekly_review_14/</link><pubDate>Thu, 13 Apr 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/04/13/weekly_review_14/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>&lt;img src="https://blog.chensoul.cc/images/weekl-review-14-01.webp" alt="weekl-review-14-01">&lt;/p>
&lt;p>本篇是对 &lt;code>2023-04-03&lt;/code> 到 &lt;code>2023-04-09&lt;/code> 这周生活的记录与思考。首发在我的个人 &lt;a href="https://blog.chensoul.cc/" target="_blank">博客&lt;/a>，你可以移步了解更多或者给我留言。&lt;/p>
&lt;p>这周还是和以前一样每天运动，并开始施行断食。因为是刚开始断食，有时候忍不住饥饿感而吃了一些东西。&lt;/p></description></item><item><title>周报-13｜健身、记账、更新SSL证书、代码提交百度站点收录</title><link>https://blog.chensoul.cc/posts/2023/04/04/weekly_review_13/</link><pubDate>Tue, 04 Apr 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/04/04/weekly_review_13/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>&lt;img src="https://blog.chensoul.cc/images/weekly-review-13-01.webp" alt="weekly-review-13-01">&lt;/p>
&lt;p>本篇是对 &lt;code>2023-03-27&lt;/code> 到 &lt;code>2023-04-02&lt;/code> 这周生活的记录与思考。首发在我的个人 &lt;a href="https://blog.chensoul.cc/" target="_blank">博客&lt;/a>，你可以移步了解更多或者给我留言。&lt;/p>
&lt;p>本周是三月的最后一周，想到这，就想对随便对三月份做个总结。总结的方面，大概包括工作、生活、学习、健身、财务、娱乐几个方面。万事开头难，不知道能者多少，但是，相信不管写多少，都是有意义的。&lt;/p></description></item><item><title>周报-12｜车辆被堵、开车总结、Effective Java3笔记</title><link>https://blog.chensoul.cc/posts/2023/03/28/weekly_review_12/</link><pubDate>Tue, 28 Mar 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/03/28/weekly_review_12/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>&lt;img src="https://blog.chensoul.cc/images/weekly-review-12-01.webp" alt="weekly-review-12-01">&lt;/p>
&lt;p>本篇是对 &lt;code>2023-03-20&lt;/code> 到 &lt;code>2023-03-26&lt;/code> 这周生活的记录与思考。首发在我的个人 &lt;a href="https://blog.chensoul.cc/" target="_blank">博客&lt;/a>，你可以移步了解更多或者给我留言。&lt;/p>
&lt;p>上周去同济医院检查鼾症，检查结果是轻度症状，医生建议多运动减肥。这周每天走路 1 万步的目标已达成。&lt;/p></description></item><item><title>周报-11｜从语雀迁移到Obsidian</title><link>https://blog.chensoul.cc/posts/2023/03/20/weekly_review_11/</link><pubDate>Mon, 20 Mar 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/03/20/weekly_review_11/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>&lt;img src="https://blog.chensoul.cc/images/weekly-review-11-04.webp" alt="weekly-review-11-04">&lt;/p>
&lt;p>图片：&lt;em>涨渡湖湿地水上森林公园&lt;/em>&lt;/p>
&lt;p>本篇是对 &lt;code>2023-03-13&lt;/code> 到 &lt;code>2023-03-19&lt;/code> 这周生活的记录与思考。首发在我的个人 &lt;a href="https://blog.chensoul.cc/" target="_blank">博客&lt;/a>，你可以移步了解更多或者给我留言。&lt;/p></description></item><item><title>周报-10｜通过Cloudflare Tunnel访问服务、Vercel部署Cusdis和Umami</title><link>https://blog.chensoul.cc/posts/2023/03/13/weekly_review_10/</link><pubDate>Mon, 13 Mar 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/03/13/weekly_review_10/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>&lt;img src="https://blog.chensoul.cc/images/weekly-review-10-00.webp" alt="weekly-review-10-00">&lt;/p>
&lt;p>本篇是对 &lt;code>2023-03-06&lt;/code> 到 &lt;code>2023-03-12&lt;/code> 这周生活的记录与思考。首发在我的个人 &lt;a href="https://blog.chensoul.cc/" target="_blank">博客&lt;/a>，你可以移步了解更多或者给我留言。&lt;/p>
&lt;p>这周发现 VPS 上 &lt;a href="https://blog.chensoul.cc/posts/2023/01/25/notes-about-deploy-services-in-vps/" target="_blank">某些使用 docker 部署的服务&lt;/a>（cusdis、umami、uptime、n8n、rsshub、memos）国内用户无法访问了，于是就折腾了一下使用 Cloudflare Tunnel 来代理这些服务。配置成功之后，又发现本地如果开启 VPN，Cloudflare Tunnel 代理的域名还是无法访问，于是放弃了使用 Cloudflare Tunnel，改为将这些国内无法访问的服务部署到免费的 VPS 服务器上，比如：Railway、Vercel。&lt;/p></description></item><item><title>周报-9｜开车总结、博客该写什么、Web3批量空投</title><link>https://blog.chensoul.cc/posts/2023/03/07/weekly_review_9/</link><pubDate>Tue, 07 Mar 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/03/07/weekly_review_9/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>&lt;img src="https://blog.chensoul.cc/images/weekly-review-09-07.webp" alt="将军山">&lt;/p>
&lt;p>本篇是对 &lt;code>2023-02-27&lt;/code> 到 &lt;code>2023-03-05&lt;/code> 这周生活的记录与思考。首发在我的个人 &lt;a href="https://blog.chensoul.cc/" target="_blank">博客&lt;/a>，你可以移步了解更多或者给我留言。&lt;/p>
&lt;p>这周的主要工作是版本测试和项目上线，在大家的共同努力下，最后是成功上线。&lt;/p></description></item><item><title>周报-8｜内存泄漏、公司裁员、练车</title><link>https://blog.chensoul.cc/posts/2023/02/27/weekly_review_8/</link><pubDate>Mon, 27 Feb 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/02/27/weekly_review_8/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>本篇是对 &lt;code>2023-02-20&lt;/code> 到 &lt;code>2023-02-26&lt;/code> 这周生活的记录与思考。首发在我的个人 &lt;a href="https://blog.chensoul.cc/" target="_blank">博客&lt;/a>，你可以移步了解更多或者给我留言。&lt;/p>
&lt;p>这篇周报又是在地铁上完成编写的。回顾这一周的工作，还是项目测试、修复 bug 和准备上线发布。平静的工作节奏因为突如其来的裁员消息而变得内卷起来，大家下班的时间都纷纷往后移到了 20 点左右。周末的时候，还是练车，从汉口开车到新洲。刚开始有点不敢，后来还是鼓起勇气，平安的到达。&lt;/p></description></item><item><title>周报-7｜练车、博客优化、注册ChatGPT账号</title><link>https://blog.chensoul.cc/posts/2023/02/21/weekly_review_7/</link><pubDate>Tue, 21 Feb 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/02/21/weekly_review_7/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>本篇是对 &lt;code>2023-02-13&lt;/code> 到 &lt;code>2023-02-19&lt;/code> 这周生活的记录与思考。首发在我的个人 &lt;a href="https://blog.chensoul.cc/" target="_blank">博客&lt;/a>，你可以移步了解更多或者给我留言。&lt;/p>
&lt;h2 id="练车">练车&lt;/h2>
&lt;p>这周末开始练车，周六是第一次开自己的车，简单试驾了一样；周日则开了一百多公里，具体行程是从阳逻到新洲，从新洲单汉口，从汉口到光谷，从光谷回汉口。&lt;/p></description></item><item><title>周报-6｜买车和选号、粉色理论</title><link>https://blog.chensoul.cc/posts/2023/02/13/weekly_review_6/</link><pubDate>Mon, 13 Feb 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/02/13/weekly_review_6/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>本篇是对 &lt;code>2023-02-06&lt;/code> 到 &lt;code>2023-02-12&lt;/code> 这周生活的记录与思考。首发在我的个人 &lt;a href="https://blog.chensoul.cc/" target="_blank">博客&lt;/a>，你可以移步了解更多或者给我留言。&lt;/p>
&lt;p>这篇周报又是在坐地铁的时候完成编写的，一边坐地铁，一边回顾上一周发生的事情，一边复盘和总结。坐地铁大概有一个半小时，从家到公司的一段通勤路程。现在还没有买车，所以都是坐地铁上下班。&lt;/p>
&lt;p>说到车，周六去二手市场买了一辆 17 年出产的上汽宝来，今天周一去过了户并且选了一个幸运的车牌号，尾号是 8688，寓意着要发发发！&lt;/p></description></item><item><title>周报-5｜项目事故、牙疼、Damus</title><link>https://blog.chensoul.cc/posts/2023/02/07/weekly_review_5/</link><pubDate>Tue, 07 Feb 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/02/07/weekly_review_5/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>本篇是对 &lt;code>2023-01-30&lt;/code> 到 &lt;code>2023-02-05&lt;/code> 这周生活的记录与思考。首发在我的个人 &lt;a href="https://blog.chensoul.cc/" target="_blank">博客&lt;/a>，你可以移步了解更多或者给我留言。&lt;/p>
&lt;p>这周是过年后的第一个工作周，被国家安排了连上七天班，算是体会了一次 “过年七天乐，上班七天累” 的过山车。七天的工作主要是测试并发布项目，每天忙的焦头乱额，生怕项目出了问题。有句话说，怕什么来什么。没想到周六还是报出了一个故障，还在睡觉中的我被一个电话吵醒，接着忙着找问题和解决方法，一天的时间就都花在这上面。万幸的是事故影响不大，发布了一个小版本进行修复。事故原因，还是值得警惕。&lt;/p></description></item><item><title>周报-4｜过年、向上管理、工作周总结</title><link>https://blog.chensoul.cc/posts/2023/01/30/weekly_review_4/</link><pubDate>Mon, 30 Jan 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/01/30/weekly_review_4/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>本篇是对 &lt;code>2023-01-23&lt;/code> 到 &lt;code>2023-01-29&lt;/code> 这周生活的记录与思考。首发在我的个人 &lt;a href="https://blog.chensoul.cc/" target="_blank">博客&lt;/a>，你可以移步了解更多或者给我留言。&lt;/p>
&lt;h2 id="过年">过年&lt;/h2>
&lt;p>这周处于过年吃喝拜年模式，除了腊月二十九和正月初一，其他时间都是和老婆在路上。因为是结婚第一个新年，需要带着老婆去各个亲戚家拜年。因为是第一次在新房过年，就把老爸从农村接过来一起过年。因为年前没有来得及买车，去哪里都不方便，都要需要滴滴打车。为此，打车花了不少钱，当然，给红包也给了不少钱。趁初一不用拜年的缝隙时间，带老婆和老爸去看了两场电影《无名》和《交换人生》。老爸很少去看电影院看电影，听到要去看电影，像个小孩似的，饭还吃完，就跑去电梯门口等电梯。这两场电影，看的我瞌睡来了，倒是初二晚上看《满江红》睡意全无。&lt;/p></description></item><item><title>周报-3｜博客定制、VPS部署服务</title><link>https://blog.chensoul.cc/posts/2023/01/25/weekly_review_3/</link><pubDate>Wed, 25 Jan 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/01/25/weekly_review_3/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>本篇是对 &lt;code>2023-01-16&lt;/code> 到 &lt;code>2023-01-22&lt;/code> 这周生活的记录与思考。首发在我的个人 &lt;a href="https://blog.chensoul.cc/" target="_blank">博客&lt;/a>，你可以移步了解更多或者给我留言。&lt;/p>
&lt;p>这是过年前的最后一周，上了三天班，请了两天假回去准备年货、去亲戚家吃年饭。趁放假之前，继续对博客做了一些定制，也在我的 VPS 上通过 Docker 部署了一些服务。&lt;/p></description></item><item><title>我的VPS服务部署记录</title><link>https://blog.chensoul.cc/posts/2023/01/25/notes-about-deploy-services-in-vps/</link><pubDate>Wed, 25 Jan 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/01/25/notes-about-deploy-services-in-vps/</guid><description>&lt;p>我的 VPS 使用的是 centos 服务器，所以以下操作都是基于 centos 系统。&lt;/p>
&lt;h2 id="服务器设置">服务器设置&lt;/h2>
&lt;p>设置 yum 源：&lt;/p></description></item><item><title>周报-2｜博客重构</title><link>https://blog.chensoul.cc/posts/2023/01/15/weekly_review_2/</link><pubDate>Sun, 15 Jan 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/01/15/weekly_review_2/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>本篇是对 &lt;code>2023-01-09&lt;/code> 到 &lt;code>2023-01-15&lt;/code> 这周生活的记录与思考。首发在我的个人 &lt;a href="https://blog.chensoul.cc/" target="_blank">博客&lt;/a>，你可以移步了解更多或者给我留言。&lt;/p>
&lt;p>这是年前倒数第二个工作周，工作上主要是完成项目一个版本的测试和发布。这个博客主要是分享一些技术相关笔记和个人的生活记录与思考，所以不会涉及具体的工作内容。&lt;/p>
&lt;p>周三晚上是部门年会，领导提出了 2023 年收入 6.2 亿的目标，比 2022 年收入增长 140%。从公司领导层这乐观的年度规划，看得出来公司的发展属于上升趋势，同时意味着 2023 年又是忙碌和压力巨大的一年。&lt;/p></description></item><item><title>周报-1｜开始写周报、冥想</title><link>https://blog.chensoul.cc/posts/2023/01/08/weekly_review_1/</link><pubDate>Sun, 08 Jan 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/01/08/weekly_review_1/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>本篇是对 &lt;code>2023-01-02&lt;/code> 到 &lt;code>2023-01-08&lt;/code> 这周生活的记录与思考。首发在我的个人 &lt;a href="https://blog.chensoul.cc/" target="_blank">博客&lt;/a>，你可以移步了解更多或者给我留言。&lt;/p>
&lt;p>这是 2023 年的第一周，元旦放了三天假之后，就用投入了工作之中。元旦已过，过年就没多远了，很多公司也开始准备年会了。因为疫情，这个年注定不好过。现在疫情放开，不知道有多少公司能够熬过这个年，进入百废待兴的节奏。&lt;/p></description></item><item><title>博客中如何使用图床服务</title><link>https://blog.chensoul.cc/posts/2022/08/19/using-images-in-blog/</link><pubDate>Fri, 19 Aug 2022 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2022/08/19/using-images-in-blog/</guid><description>&lt;p>最近编写文档或者写博客，喜欢用 Typora 编辑器通过 Markdown 语法完成编写所有内容。为此，还付费购买了许可证。&lt;/p>
&lt;p>&lt;img src="https://blog.chensoul.cc/images/using-images-in-blog-01.webp" alt="my-typora-license">&lt;/p>
&lt;p>喜欢 Typora 的理由：&lt;/p></description></item><item><title>Mac开发环境配置</title><link>https://blog.chensoul.cc/posts/2021/09/09/mac-development-environment-setup/</link><pubDate>Thu, 09 Sep 2021 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2021/09/09/mac-development-environment-setup/</guid><description>&lt;p>这是我的第一篇文章，作为程序员，首先要做得第一件事情，就是配置好开发环境，因为我使用的是 Mac 开发环境，所以，这篇文章主要是基于 Mac 操作系统，记录开发环境搭建过程。&lt;/p>
&lt;h2 id="重装系统后设置">重装系统后设置&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ git clone https://github.com/chensoul/dotfiles.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cd dotfiles
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ./install.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="安装插件">安装插件&lt;/h2>
&lt;h3 id="idea-插件">Idea 插件&lt;/h3>
&lt;ul>
&lt;li>.ignore&lt;/li>
&lt;li>Atom Material Icons&lt;/li>
&lt;li>InlineProblems&lt;/li>
&lt;li>Laconic POM for Maven&lt;/li>
&lt;li>plantar-java-format&lt;/li>
&lt;li>Maven Helper&lt;/li>
&lt;li>Rainbow Brackets&lt;/li>
&lt;/ul>
&lt;h3 id="chrome-插件">Chrome 插件&lt;/h3>
&lt;ul>
&lt;li>JsonVue&lt;/li>
&lt;li>1Password&lt;/li>
&lt;li>Inoreader&lt;/li>
&lt;/ul>
&lt;h2 id="安装其他软件">安装其他软件&lt;/h2>
&lt;h3 id="安装-mysql">安装 MySQL&lt;/h3>
&lt;p>安装 MySQL：&lt;/p></description></item><item><title>从零开始搭建个人博客</title><link>https://blog.chensoul.cc/posts/2021/09/09/build-personal-blog-from-zero/</link><pubDate>Thu, 09 Sep 2021 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2021/09/09/build-personal-blog-from-zero/</guid><description>&lt;p>从零开始搭建博客，包括注册域名、购买服务器、部署程序及网站配置和优化。&lt;/p>
&lt;h2 id="域名">域名&lt;/h2>
&lt;p>搭建一个博客或者网站，需要有一个域名。那什么是域名呢？看看百度百科上的解释：&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>域名&lt;/strong>（英语：&lt;strong>Domain Name&lt;/strong>），又称&lt;strong>网域&lt;/strong>，是由一串用点分隔的名字组成的&lt;a href="https://baike.baidu.com/item/Internet" target="_blank">Internet&lt;/a>上某一台&lt;a href="https://baike.baidu.com/item/%e8%ae%a1%e7%ae%97%e6%9c%ba/140338" target="_blank">计算机&lt;/a>或计算机组的名称，用于在数据传输时对计算机的定位标识（有时也指地理位置）。&lt;/p>
&lt;p>由于&lt;a href="https://baike.baidu.com/item/IP%e5%9c%b0%e5%9d%80/150859" target="_blank">IP 地址&lt;/a>具有不方便记忆并且不能显示地址组织的名称和性质等缺点，人们设计出了域名，并通过网域名称系统（&lt;a href="https://baike.baidu.com/item/DNS" target="_blank">DNS&lt;/a>，Domain Name System）来将域名和&lt;a href="https://baike.baidu.com/item/IP%e5%9c%b0%e5%9d%80" target="_blank">IP 地址&lt;/a>相互&lt;a href="https://baike.baidu.com/item/%e6%98%a0%e5%b0%84/20402621" target="_blank">映射&lt;/a>，使人更方便地访问&lt;a href="https://baike.baidu.com/item/%e4%ba%92%e8%81%94%e7%bd%91/199186" target="_blank">互联网&lt;/a>，而不用去记住能够被机器直接读取的&lt;a href="https://baike.baidu.com/item/IP%e5%9c%b0%e5%9d%80" target="_blank">IP 地址&lt;/a>数串。&lt;/p></description></item></channel></rss>