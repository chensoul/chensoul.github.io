<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Spring-Boot on ChenSoul</title><link>https://blog.chensoul.cc/categories/spring-boot/</link><description>Recent content in Spring-Boot on ChenSoul</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 04 Nov 2024 21:00:00 +0800</lastBuildDate><atom:link href="https://blog.chensoul.cc/categories/spring-boot/index.xml" rel="self" type="application/rss+xml"/><item><title>Microservice Tutorials</title><link>https://blog.chensoul.cc/microservice-tutorials/</link><pubDate>Mon, 04 Nov 2024 21:00:00 +0800</pubDate><guid>https://blog.chensoul.cc/microservice-tutorials/</guid><description/></item><item><title>Spring Boot Tutorials</title><link>https://blog.chensoul.cc/spring-boot-tutorials/</link><pubDate>Mon, 04 Nov 2024 21:00:00 +0800</pubDate><guid>https://blog.chensoul.cc/spring-boot-tutorials/</guid><description>&lt;h2 id="spring-boot">Spring Boot&lt;/h2></description></item><item><title>[译]Spring Security 和 JWT 入门</title><link>https://blog.chensoul.cc/posts/2024/10/15/spring-security-jwt/</link><pubDate>Tue, 15 Oct 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/10/15/spring-security-jwt/</guid><description>&lt;p>&lt;a href="https:/docs.spring.io/spring-security/reference/index.html" target="_blank">Spring Security&lt;/a> 为 Java 应用程序提供了一套全面的安全功能，涵盖身份验证、授权、会话管理以及针对&lt;a href="https:/reflectoring.io/spring-csrf/" target="_blank">CSRF（跨站点请求伪造）&lt;/a>等常见安全威胁的防护。Spring Security 框架具有高度可定制性，允许开发人员根据其应用程序需求来管理安全配置。它提供了一个灵活的架构，支持各种身份验证机制，如基本身份验证、JWT 和 OAuth。&lt;/p></description></item><item><title>[译]测试 Spring Boot 应用程序：最佳实践和框架</title><link>https://blog.chensoul.cc/posts/2024/10/14/testing-spring-boot-applications-best-practices-and-frameworks/</link><pubDate>Mon, 14 Oct 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/10/14/testing-spring-boot-applications-best-practices-and-frameworks/</guid><description>&lt;p>测试是软件开发不可或缺的一部分。它可确保您的 Spring Boot 应用程序按预期运行，并在不断发展的过程中继续保持这种状态。在本文中，我们将探讨如何使用最佳实践和工具测试 Spring Boot 应用程序。&lt;/p>
&lt;h1 id="为什么测试很重要">为什么测试很重要&lt;/h1>
&lt;p>测试至关重要，原因如下：&lt;/p></description></item><item><title>Spring Boot集成SpringDoc生成Api文档</title><link>https://blog.chensoul.cc/posts/2024/07/10/springdoc-with-spring-boot/</link><pubDate>Wed, 10 Jul 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/07/10/springdoc-with-spring-boot/</guid><description>&lt;p>以下以 Maven 为例介绍 Spring Boot集成SpringDoc生成Api文档。&lt;/p>
&lt;ol>
&lt;li>添加依赖&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;groupId&amp;gt;&lt;/span>org.springdoc&lt;span style="color:#f92672">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;artifactId&amp;gt;&lt;/span>springdoc-openapi-starter-webmvc-ui&lt;span style="color:#f92672">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>配置 annotationProcessor，实现通过 javadoc 生成文档。&lt;/li>
&lt;/ol>
&lt;p>每个 maven 模块都需要配置：&lt;/p></description></item><item><title>Spring Boot项目创建Docker镜像并运行应用</title><link>https://blog.chensoul.cc/posts/2024/06/06/spring-boot-docker-image/</link><pubDate>Thu, 06 Jun 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/06/06/spring-boot-docker-image/</guid><description>&lt;h2 id="手动创建-dockerfile">手动创建 Dockerfile&lt;/h2>
&lt;p>在您的 Spring Boot 项目根目录下创建一个名为 &lt;code>Dockerfile&lt;/code> 的文件，并添加以下内容:&lt;/p></description></item><item><title>[译]OAuth2 with Spring 第1部分：了解基本概念</title><link>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-1-knowing-the-basic-concepts/</link><pubDate>Wed, 05 Jun 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-1-knowing-the-basic-concepts/</guid><description>&lt;p>原文地址：&lt;a href="https:/mainul35.medium.com/oauth2-with-spring-part-1-knowing-the-basic-concepts-5c4aa17884a" target="_blank">https:/mainul35.medium.com/oauth2-with-spring-part-1-knowing-the-basic-concepts-5c4aa17884a&lt;/a>&lt;/p>
&lt;p>在本系列&lt;strong>关于 Spring 的 OAuth2&lt;/strong>的文章中，我将尝试介绍和解释与 OAuth2 相关的每一个问题以及如何在 Spring 框架中实现这些问题。请记住，OAuth2 完全是一个概念性的东西，在不同的框架中，它有自己的实现。此外，许多应用程序开发人员开发自己的 OAuth2 实现，而不使用 Spring 框架提供的 OAuth2 框架支持。因此，我将就这个主题撰写一系列文章。&lt;/p></description></item><item><title>[译]OAuth2 with Spring 第2部分：授权服务器入门</title><link>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-2-getting-started-with-authorization-server/</link><pubDate>Wed, 05 Jun 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-2-getting-started-with-authorization-server/</guid><description>&lt;p>原文地址：&lt;a href="https:/mainul35.medium.com/oauth2-with-spring-part-2-getting-started-with-authorization-server-13804910cb2a" target="_blank">https:/mainul35.medium.com/oauth2-with-spring-part-2-getting-started-with-authorization-server-13804910cb2a&lt;/a>&lt;/p>
&lt;p>Spring 团队最近发布了他们的授权服务器。OAuth2 一直是一个热门话题，而构建或理解授权服务器一直是一个谜。在本系列的&lt;a href="https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-1-knowing-the-basic-concepts/">第 1 部分&lt;/a>中，我描述了几乎所有您需要了解的有关 OAuth2 的概念性内容。在本系列的这篇文章中，我将尝试演示如何构建具有&lt;strong>client_credential&lt;/strong>授权类型的授权服务器。我将从使用配置属性进行自动配置开始解释它们，并通过编写 Java 代码自定义配置。让我们开始吧。&lt;/p></description></item><item><title>[译]OAuth2 with Spring 第3部分：使用Spring授权服务器授予authorization_code OIDC客户端</title><link>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-3-authorizing-oidc-client-with-via-authorization-code-grant-from-spring/</link><pubDate>Wed, 05 Jun 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-3-authorizing-oidc-client-with-via-authorization-code-grant-from-spring/</guid><description>&lt;p>原文地址：&lt;a href="https:/mainul35.medium.com/oauth2-with-spring-part-3-authorizing-oidc-client-with-via-authorization-code-grant-from-spring-67769f9dd68a" target="_blank">https:/mainul35.medium.com/oauth2-with-spring-part-3-authorizing-oidc-client-with-via-authorization-code-grant-from-spring-67769f9dd68a&lt;/a>&lt;/p>
&lt;p>在&lt;a href="https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-2-getting-started-with-authorization-server/">上一篇文章&lt;/a>中，我们讨论了使用 client_credential 的 OAuth2 授权服务器配置。在本文中，我们将讨论使用 authorization_code 授予类型的授权服务器配置。此授权流程将有一个 OIDC 客户端，它将通过使用授权码进行请求来获取 JWT 令牌。&lt;/p></description></item><item><title>[译]OAuth2 with Spring 第4部分：Spring授权客户端与Google授权服务器的社交登录演示</title><link>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-4-spring-authorization-client-social-login-demo-with-google/</link><pubDate>Wed, 05 Jun 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-4-spring-authorization-client-social-login-demo-with-google/</guid><description>&lt;p>原文地址：&lt;a href="https:/mainul35.medium.com/oauth2-with-spring-part-4-spring-authorization-client-social-login-demo-with-google-be6097ec18a5" target="_blank">https:/mainul35.medium.com/oauth2-with-spring-part-4-spring-authorization-client-social-login-demo-with-google-be6097ec18a5&lt;/a>&lt;/p>
&lt;p>在&lt;a href="https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-3-authorizing-oidc-client-with-via-authorization-code-grant-from-spring/">之前的文章&lt;/a>中，我们学习了如何使用 OIDC 连接到我们自己的授权服务器。我们在自托管授权服务器中定义了我们自己的客户端应用程序。在今天的文章中，我们将使用 Google 和 GitHub 作为我们的授权服务器，并将我们的授权客户端应用程序连接到这些授权服务器并从它们接收令牌。应用程序登录屏幕将如下所示。&lt;/p></description></item><item><title>[译]OAuth2 with Spring 第5部分：使用PKCE保护您的Spring Boot应用程序以增强安全性</title><link>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-5-securing-your-spring-boot-application-with-pkce-for-enhanced-security/</link><pubDate>Wed, 05 Jun 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/06/05/oauth2-with-spring-part-5-securing-your-spring-boot-application-with-pkce-for-enhanced-security/</guid><description>&lt;p>原文地址：&lt;a href="https:/mainul35.medium.com/oauth2-with-spring-part-5-securing-your-spring-boot-application-with-pkce-for-enhanced-security-d8025cd08769" target="_blank">https:/mainul35.medium.com/oauth2-with-spring-part-5-securing-your-spring-boot-application-with-pkce-for-enhanced-security-d8025cd08769&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>免责声明：本文技术性很强，需要清楚了解本系列前几篇文章，特别是第 1 部分和第 3 部分。&lt;/p>&lt;/blockquote>
&lt;p>带有代码交换证明密钥 (PKCE) 的授权代码流用于无法存储客户端机密的应用程序。此类应用程序包括：&lt;/p></description></item><item><title>[译]使用 Spring Boot 构建 RESTful API：集成 DDD 和六边形架构</title><link>https://blog.chensoul.cc/posts/2024/05/30/building-a-restful-api-with-spring-boot-integrating-ddd-and-hexagonal-architecture/</link><pubDate>Thu, 30 May 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/05/30/building-a-restful-api-with-spring-boot-integrating-ddd-and-hexagonal-architecture/</guid><description>&lt;p>原文链接：&lt;a href="https:/medium.com/@juannegrin/building-a-restful-api-with-spring-boot-integrating-ddd-and-hexagonal-architecture-df50fe24a1ff" target="_blank">Building a RESTful API with Spring Boot: Integrating DDD and Hexagonal Architecture&lt;/a>&lt;/p></description></item><item><title>[译]如何组织代码</title><link>https://blog.chensoul.cc/posts/2024/05/30/how-to-structure-our-code/</link><pubDate>Thu, 30 May 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/05/30/how-to-structure-our-code/</guid><description>&lt;p>原文链接：&lt;a href="https:/medium.com/@minadev/how-to-structure-our-code-b5e7b1c32c21" target="_blank">How to Structure Code&lt;/a>&lt;/p>
&lt;p>&lt;em>软件设计最佳实践，逐层发现包、按功能发现包以及六角形架构/端口和适配器。&lt;/em>&lt;/p>
&lt;p>在这篇博文中，我将探讨如何构建我们的代码并讨论最佳实践，涵盖三种不同的方法：按层打包、按功能打包以及六边形架构/端口和适配器及其优缺点。&lt;/p>
&lt;p>在探索构建代码的不同方法之前，我们需要了解基本的软件设计原则：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>内聚力&lt;/strong>：指模块内各类之间的相互关联程度。&lt;/li>
&lt;li>&lt;strong>耦合度&lt;/strong>：指不同模块之间的依赖程度。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="../../../static/images/how-to-structure-our-code-01-0766764.webp" alt="img">&lt;/p></description></item><item><title>[译]Spring Boot3和Spring6中的新特性</title><link>https://blog.chensoul.cc/posts/2023/10/13/new-features-in-spring-boot-3-and-spring-6/</link><pubDate>Fri, 13 Oct 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/10/13/new-features-in-spring-boot-3-and-spring-6/</guid><description>&lt;p>Spring Boot 3.0 于 2022 年 11 月正式发布，包含一些新功能和改进。这是继大约 4.5 年前发布 Spring Boot 2.0 后 Spring Boot 的第一个主要版本。它也是第一个支持 Spring Framework 6.0 的 Spring Boot GA 版本。作为开发人员，我们需要了解这些更新，才能顺利使用 Spring Boot。毫无疑问，新版本中最大的转变之一是放弃了对旧版本 Java 的支持。&lt;/p></description></item><item><title>[译]Spring Security 面试问题</title><link>https://blog.chensoul.cc/posts/2023/10/12/spring-security-interview-questions/</link><pubDate>Thu, 12 Oct 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/10/12/spring-security-interview-questions/</guid><description>&lt;p>本面试准备指南将讨论一些常见的 Spring Security 面试问题。无论您是准备面试还是只是想增强对 Spring Security 的了解，这些问题都将帮助您理解关键概念并指导您设计常见安全问题的解决方案。&lt;/p>
&lt;h2 id="1-spring-security-的核心特性是什么">1. Spring Security 的核心特性是什么？&lt;/h2>
&lt;p>Spring Security 提供的两个最突出的功能是身份验证和授权。这些功能在确保应用程序的安全性方面发挥着至关重要的作用。然而，Spring Security 超越了身份验证和授权，还提供了额外的功能来防止漏洞利用并与其他框架集成。&lt;/p></description></item><item><title>[译]Spring Security 与 JWT for REST API</title><link>https://blog.chensoul.cc/posts/2023/09/19/spring-security-tutorial/</link><pubDate>Tue, 19 Sep 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/09/19/spring-security-tutorial/</guid><description>&lt;p>&lt;strong>免责声明：Spring Security 5+ 已发布 OAuth JWT 支持。建议使用最新版本的 OAuth 来支持 JWT，而不是使用自定义安全性或过滤器。&lt;/strong>&lt;/p></description></item><item><title>[译]如何使用Spring Security和JWT保护您的REST API</title><link>https://blog.chensoul.cc/posts/2023/09/19/spring-security-jwt/</link><pubDate>Tue, 19 Sep 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/09/19/spring-security-jwt/</guid><description>&lt;p>原文链接：&lt;a href="https:/www.danvega.dev/blog/spring-security-jwt" target="_blank">How to Secure your REST APIs with Spring Security &amp;amp; JSON Web Tokens (JWTs)&lt;/a>&lt;/p></description></item><item><title>[译]REST API 的自定义错误消息处理</title><link>https://blog.chensoul.cc/posts/2023/08/25/global-error-handler-in-a-spring-rest-api/</link><pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/25/global-error-handler-in-a-spring-rest-api/</guid><description>&lt;h2 id="1-概述">1. 概述&lt;/h2>
&lt;p>在本教程中，我们将讨论如何为 Spring REST API 实现全局错误处理程序。&lt;/p>
&lt;p>我们将使用每个异常的语义为客户端构建有意义的错误消息，其明确的目标是为客户端提供所有信息以轻松诊断问题。&lt;/p></description></item><item><title>[译]Spring Events</title><link>https://blog.chensoul.cc/posts/2023/08/25/spring-events/</link><pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/25/spring-events/</guid><description>&lt;h2 id="1-概述">1. 概述&lt;/h2>
&lt;p>在本教程中，我们将讨论如何在 Spring 中使用事件。&lt;/p>
&lt;p>事件是框架中最容易被忽视的功能之一，但也是最有用的功能之一。与 Spring 中的许多其他功能一样，事件发布是 &lt;code>ApplicationContext&lt;/code> 提供的功能之一。&lt;/p></description></item><item><title>[译]使用@Async进行Spring Security上下文传播</title><link>https://blog.chensoul.cc/posts/2023/08/25/spring-security-async-principal-propagation/</link><pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/25/spring-security-async-principal-propagation/</guid><description>&lt;h2 id="1-简介">1. 简介&lt;/h2>
&lt;p>在本教程中，我们将重点关注使用 &lt;code>@Async&lt;/code> 传播 Spring Security 主体
默认情况下，Spring Security 身份验证绑定到 &lt;code>ThreadLocal&lt;/code> - 因此，当执行流在带有 &lt;code>@Async&lt;/code> 的新线程中运行时，它不会是经过身份验证的上下文。&lt;/p></description></item><item><title>[译]使用Spring进行REST的错误处理</title><link>https://blog.chensoul.cc/posts/2023/08/25/exception-handling-for-rest-with-spring/</link><pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/25/exception-handling-for-rest-with-spring/</guid><description>&lt;h2 id="1-概述">1. 概述&lt;/h2>
&lt;p>本教程将说明如何使用 Spring 为 REST API 实现异常处理。我们还将获得一些历史概述，并了解不同版本引入了哪些新选项。&lt;/p></description></item><item><title>[译]如何在Spring中执行@Async</title><link>https://blog.chensoul.cc/posts/2023/08/25/spring-async/</link><pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/25/spring-async/</guid><description>&lt;h2 id="1-概述">1. 概述&lt;/h2>
&lt;p>在本教程中，我们将探讨 Spring 中的异步执行支持和 &lt;code>@Async&lt;/code> 注解。&lt;/p>
&lt;p>简单地说，用 &lt;code>@Async&lt;/code> 注解 bean 的方法将使其在单独的线程中执行。换句话说，调用者不会等待被调用方法的完成。&lt;/p></description></item><item><title>[译]Spring Boot项目如何实现JWT认证？</title><link>https://blog.chensoul.cc/posts/2023/08/18/how-to-implement-jwt-authentication-in-spring-boot-project/</link><pubDate>Fri, 18 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/18/how-to-implement-jwt-authentication-in-spring-boot-project/</guid><description>&lt;p>&lt;img src="../../../static/images/JWT_With_SpringBoot-1.webp" alt="How to implement JWT Authentication in Spring Boot Project?">&lt;/p></description></item><item><title>[译]Spring Boot项目如何实现Security？</title><link>https://blog.chensoul.cc/posts/2023/08/18/how-to-implement-security-in-spring-boot-project/</link><pubDate>Fri, 18 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/18/how-to-implement-security-in-spring-boot-project/</guid><description>&lt;p>&lt;img src="../../../static/images/SpringSecurityBasics-2.webp" alt="How to implement Security in Spring Boot Project?">&lt;/p></description></item><item><title>[译]如何在Spring Boot2中使用UserDetailsService实现安全性？</title><link>https://blog.chensoul.cc/posts/2023/08/18/how-to-implement-security-in-spring-boot2-using-userdetailsservice/</link><pubDate>Fri, 18 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/18/how-to-implement-security-in-spring-boot2-using-userdetailsservice/</guid><description>&lt;p>&lt;img src="../../../static/images/Thymeleaf_SpringSecurity-1.webp" alt="img">&lt;/p>
&lt;p>继续上一篇&lt;a href="https:/javatechonline.com/how-to-implement-security-in-spring-boot-project/" target="_blank">关于实现 Spring Security 的两种不同方法&lt;/a>的文章，在本文中，我们将学习第三种方法“如何使用 UserDetailsS​​ervice 在 Spring Boot 中实现 Security？”。经过上一篇文章后，我希望我们都非常熟悉安全性的基础知识，甚至是 Spring Boot 应用程序中的安全性基础知识。这次我们将创建一个用户注册表并将用户及其角色保存到数据库中。&lt;/p></description></item><item><title>[译]如何在Spring Boot3中使用UserDetailsService实现安全性？</title><link>https://blog.chensoul.cc/posts/2023/08/18/how-to-implement-security-in-spring-boot3-using-userdetailsservice/</link><pubDate>Fri, 18 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/18/how-to-implement-security-in-spring-boot3-using-userdetailsservice/</guid><description>&lt;p>&lt;img src="../../../static/images/UserDetailsServiceSpringBoot3-1.webp" alt="Spring Security UserDetailsService Using Spring Boot 3">&lt;/p>
&lt;p>作为有关 Spring Security 的系列文章的继续，在本文中我们将学习“如何在 Spring Boot 3 中使用 UserDetailsService 实现 Spring Boot 中的安全性？”。经过前面的文章，我希望我们都非常熟悉安全性的基础知识，甚至 Spring Boot 应用程序中的安全性基础知识。 Spring Boot 3 发布后，我们将在这里实现“使用 Spring Boot 3 的 Spring Security UserDetailsService”。&lt;/p></description></item><item><title>[译]没有WebSecurityConfigurerAdapter的Spring Security.md</title><link>https://blog.chensoul.cc/posts/2023/08/18/spring-security-without-websecurityconfigureradapter/</link><pubDate>Fri, 18 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/18/spring-security-without-websecurityconfigureradapter/</guid><description>&lt;p>&lt;img src="../../../static/images/WebSecurityConfigurerAdapter-Deprecated-1.webp" alt="WebSecurityConfigurerAdapter Deprecated">&lt;/p>
&lt;p>在 Spring Security 模块的上下文中，WebSecurityConfigurerAdapter 是一个抽象类，根据 &lt;a href="https:/spring.io/blog/2022/02/21/spring-security-without-the-websecurityconfigureradapter" target="_blank">Spring 官方网站&lt;/a> 2022 年 2 月 21 日发布的公告，该类已从 Spring Security 5.7.0-M2 中弃用。它通常用于扩展 configure() 方法由自定义配置子类实现。因此，它鼓励用户转向基于组件的安全配置。为了支持对这种新配置设计的更改，我们将讨论常见用例列表和未来建议的替代方案。因此，我们将讨论没有 WebSecurityConfigurerAdapter 的 Spring Security 用例的实现。&lt;/p></description></item><item><title>[译]Spring Security - JWT</title><link>https://blog.chensoul.cc/posts/2023/08/16/spring-security-with-jwt/</link><pubDate>Wed, 16 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/16/spring-security-with-jwt/</guid><description>&lt;h3 id="简介和概述">简介和概述&lt;/h3>
&lt;p>JSON Web Token 或 JWT（更常见的名称）是一种开放的互联网标准 (RFC 7519)，用于以紧凑的方式在各方之间安全地传输可信信息。令牌包含编码为 JSON 对象的声明，并使用私有密钥或公钥/私钥对进行数字签名。它们是独立且可验证的，因为它们经过数字签名。 JWT 可以进行签名和/或加密。&lt;/p></description></item><item><title>[译]Spring Security - OAuth2</title><link>https://blog.chensoul.cc/posts/2023/08/16/spring-security-with-oauth2/</link><pubDate>Wed, 16 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/16/spring-security-with-oauth2/</guid><description>&lt;h2 id="oauth-20-基础知识">OAuth 2.0 基础知识&lt;/h2>
&lt;p>&lt;img src="https:/www.tutorialspoint.com/spring_security../../../static/images/oauth_2_fundamentals.webp" alt="OAuth 2.0 Fundamentals">&lt;/p>
&lt;p>OAuth 2.0 由 IETF OAuth 工作组开发并于 2012 年 10 月发布。它作为一种开放授权协议，使第三方应用程序能够代表资源所有者对 HTTP 服务进行有限访问。它可以在不泄露用户身份或长期凭证的情况下做到这一点。第三方应用程序本身也可以代表其使用它。&lt;/p></description></item><item><title>[译]Spring Security - 使用数据库表单登录</title><link>https://blog.chensoul.cc/posts/2023/08/16/spring-security-form-login-with-database/</link><pubDate>Wed, 16 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/16/spring-security-form-login-with-database/</guid><description>&lt;h2 id="内容">内容&lt;/h2>
&lt;ul>
&lt;li>简介和概述&lt;/li>
&lt;li>Spring Security 的基本组件
&lt;ul>
&lt;li>AuthenticationFilter 认证过滤器&lt;/li>
&lt;li>AuthenticationManager 认证管理器&lt;/li>
&lt;li>AuthenticationProvider 认证提供者&lt;/li>
&lt;li>UserDetailsService 用户详情服务&lt;/li>
&lt;li>PasswordEncoder 密码编码器&lt;/li>
&lt;li>Spring 安全上下文&lt;/li>
&lt;li>表单登录&lt;/li>
&lt;li>使用数据库登录&lt;/li>
&lt;li>登录尝试限制&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>入门（实用指南）&lt;/li>
&lt;/ul>
&lt;h2 id="简介和概述">简介和概述&lt;/h2>
&lt;p>除了提供各种内置的身份验证和授权选项之外，Spring Security 还允许我们根据需要自定义身份验证过程。从自定义登录页面到我们自己的自定义身份验证提供程序和身份验证过滤器，我们几乎可以自定义身份验证过程的各个方面。&lt;/p></description></item><item><title>[译]Spring Security - 表单登录、记住我和注销</title><link>https://blog.chensoul.cc/posts/2023/08/16/spring-security-form-login-remember-me-and-logout/</link><pubDate>Wed, 16 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/16/spring-security-form-login-remember-me-and-logout/</guid><description>&lt;h2 id="内容">内容&lt;/h2>
&lt;ul>
&lt;li>简介和概述&lt;/li>
&lt;li>入门（实用指南）&lt;/li>
&lt;/ul>
&lt;h2 id="简介和概述">简介和概述&lt;/h2>
&lt;p>Spring Security 附带了大量内置功能和工具，为我们提供方便。在这个例子中，我们将讨论其中三个有趣且有用的功能 -&lt;/p>
&lt;ul>
&lt;li>表单登录&lt;/li>
&lt;li>记住账号&lt;/li>
&lt;li>登出&lt;/li>
&lt;/ul>
&lt;h3 id="表单登录">表单登录&lt;/h3>
&lt;p>基于表单的登录是 Spring Security 提供支持的一种用户名/密码身份验证形式。这是通过 Html 表单提供的。&lt;/p></description></item><item><title>[译]Spring Security 和 Spring Boot 入门</title><link>https://blog.chensoul.cc/posts/2023/08/16/spring-security/</link><pubDate>Wed, 16 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/16/spring-security/</guid><description>&lt;p>&lt;a href="https:/docs.spring.io/spring-security/reference/index.html" target="_blank">Spring Security&lt;/a> 是一个有助于保护企业应用程序安全的框架。通过与 Spring MVC、Spring Webflux 或 Spring Boot 集成，我们可以创建一个强大且高度可定制的身份验证和访问控制框架。在本文中，我们将解释核心概念并仔细研究 Spring Security 提供的默认配置及其工作原理。我们将进一步尝试自定义它们并分析它们对示例 Spring Boot 应用程序的影响。&lt;/p></description></item><item><title>[译]Spring Security：深入了解身份验证和授权</title><link>https://blog.chensoul.cc/posts/2023/08/16/spring-security-authentication-and-authorization/</link><pubDate>Wed, 16 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/16/spring-security-authentication-and-authorization/</guid><description>&lt;p>您可以使用本指南来了解 Spring Security 是什么以及其核心功能（如身份验证、授权或常见漏洞保护）如何工作。此外，还有全面的常见问题解答。&lt;/p>
&lt;p>（编者注：大约 6500 字，您可能不想尝试在移动设备上阅读本文。将其添加为书签，稍后再回来。）&lt;/p>
&lt;h2 id="介绍">介绍&lt;/h2>
&lt;p>迟早每个人都需要为其项目添加安全性，在 Spring 生态系统中，您可以借助 Spring Security 库来实现这一点。&lt;/p></description></item><item><title>[译]为 Spring Boot 应用程序创建优化的 Docker 映像</title><link>https://blog.chensoul.cc/posts/2023/08/16/spring-boot-docker/</link><pubDate>Wed, 16 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/16/spring-boot-docker/</guid><description>&lt;p>容器已成为打包具有所有软件和操作系统依赖项的应用程序，然后将其传送到不同环境的首选方式。&lt;/p>
&lt;p>本文着眼于容器化 Spring Boot 应用程序的不同方法：&lt;/p>
&lt;ul>
&lt;li>使用 Docker 文件构建 Docker 镜像，&lt;/li>
&lt;li>使用 Cloud-Native Buildpack 从源代码构建 OCI 映像，&lt;/li>
&lt;li>通过使用分层工具将 JAR 的各个部分拆分为不同的层，在运行时优化映像。&lt;/li>
&lt;/ul>
&lt;h2 id="示例代码">示例代码&lt;/h2>
&lt;p>本文附有 &lt;a href="https:/github.com/thombergs/code-examples/tree/master/spring-boot/spring-boot-docker" target="_blank">GitHub&lt;/a> 上的工作代码示例。&lt;/p></description></item><item><title>[译]深入了解Spring事务管理：@Transactional</title><link>https://blog.chensoul.cc/posts/2023/08/16/spring-transaction-management-transactional-in-depth/</link><pubDate>Wed, 16 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/16/spring-transaction-management-transactional-in-depth/</guid><description>&lt;p>您可以使用本指南来简单实用地了解 Spring 使用 @Transactional 注释进行事务管理的工作原理。&lt;/p>
&lt;p>唯一的先决条件？您需要对 ACID 有一个粗略的了解，即什么是数据库事务以及为什么使用它们。此外，这里不讨论分布式事务或反应式事务，但就 Spring 而言，一般原则仍然适用。&lt;/p></description></item><item><title>Spring Security和OAuth2发展过程</title><link>https://blog.chensoul.cc/posts/2023/08/15/spring-security-oauth2-history/</link><pubDate>Tue, 15 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/15/spring-security-oauth2-history/</guid><description>&lt;h2 id="spring-security-的发展过程">Spring Security 的发展过程&lt;/h2>
&lt;p>Spring Security 是一个功能强大且广泛使用的安全框架，为企业级应用程序提供了全面的安全性。Spring Security 最初是 Acegi Security 项目的一部分，于 2004 年发布，现在已经成为 Spring 生态系统的核心组件。 Spring Security 的发展过程可以分为三个阶段：&lt;/p></description></item><item><title>[译]Spring Boot异常处理完整指南</title><link>https://blog.chensoul.cc/posts/2023/07/26/spring-boot-exception-handling/</link><pubDate>Wed, 26 Jul 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/07/26/spring-boot-exception-handling/</guid><description>&lt;p>处理异常是构建健壮应用程序的重要部分。 Spring Boot 提供了不止一种方法。&lt;/p>
&lt;p>本文将探讨这些方法，并提供一些关于何时某种给定方法可能优于另一种方法的指导。&lt;/p>
&lt;h2 id="示例代码">示例代码&lt;/h2>
&lt;p>本文附有 GitHub 上的工作&lt;a href="https:/github.com/thombergs/code-examples/tree/master/spring-boot/exception-handling" target="_blank">代码示例&lt;/a>。&lt;/p></description></item><item><title>[译]Spring Boot授权服务器 - 使用 Java 的资源服务器和客户端凭证示例</title><link>https://blog.chensoul.cc/posts/2023/07/26/spring-boot-authorization-server/</link><pubDate>Wed, 26 Jul 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/07/26/spring-boot-authorization-server/</guid><description>&lt;h1 id="概述">概述&lt;/h1>
&lt;p>在本文中，我们将创建一个授权服务器，为任何客户端生成 access_token。这称为 OAuth2 的 &lt;code>client_credentials&lt;/code> 流程。它主要用于服务间通信。&lt;/p>
&lt;p>我们将使用 spring boot oauth2 授权服务器依赖项来创建身份验证服务器。我们还将创建一个资源服务器和客户端来对其进行端到端测试。&lt;/p></description></item><item><title>[译]使用 Spring Boot 和 Spring Security 配置 CORS</title><link>https://blog.chensoul.cc/posts/2023/07/26/spring-cors/</link><pubDate>Wed, 26 Jul 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/07/26/spring-cors/</guid><description>&lt;p>跨源资源共享 (CORS) 是一种基于 HTTP 标头的机制，允许服务器显式将某些源列入白名单，并帮助绕过同源策略。&lt;/p>
&lt;p>这是必需的，因为浏览器默认应用同源策略以确保安全。通过在 Web 应用程序中实施 CORS，网页可以请求额外的资源并从其他域加载到浏览器中。&lt;/p></description></item><item><title>[译]使用 Spring 的 Null-Safety 注解保护您的代码免受 NullPointerExceptions 的影响</title><link>https://blog.chensoul.cc/posts/2023/07/26/spring-boot-null-safety-annotations/</link><pubDate>Wed, 26 Jul 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/07/26/spring-boot-null-safety-annotations/</guid><description>&lt;p>&lt;code>NullPointerExceptions&lt;/code> （通常缩写为“NPE”）对于每个 Java 程序员来说都是一场噩梦。&lt;/p>
&lt;p>我们可以在互联网上找到大量解释如何编写空安全代码的文章。空安全确保我们在代码中添加了适当的检查，以保证对象引用不能为空，或者毕竟在对象为空时采取可能的安全措施。&lt;/p>
&lt;p>由于 &lt;code>NullPointerException&lt;/code> 是一个运行时异常，因此在代码编译过程中很难找出这种情况。 Java 的类型系统没有办法快速消除危险的空对象引用。&lt;/p></description></item><item><title>[译]使用Spring Boot Actuator公开有用的信息端点</title><link>https://blog.chensoul.cc/posts/2023/07/26/spring-boot-info-endpoint/</link><pubDate>Wed, 26 Jul 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/07/26/spring-boot-info-endpoint/</guid><description>&lt;p>在分布式、快节奏的环境中，开发团队通常希望了解他们部署应用程序的时间、部署的应用程序版本、部署的 Git 提交等等。&lt;/p>
&lt;p>Spring Boot Actuator 帮助我们监控和管理应用程序。它公开了提供应用程序运行状况、指标和其他相关信息的各种端点。&lt;/p>
&lt;p>在本文中，我们将了解如何使用 Spring Boot Actuator 和 Maven/Gradle 构建插件将此类信息添加到我们的项目中。&lt;/p></description></item><item><title>[译]在 Spring 中实现 OAuth2：使用范围（第 2 部分）</title><link>https://blog.chensoul.cc/posts/2023/07/26/using-oauth2-in-spring-scopes/</link><pubDate>Wed, 26 Jul 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/07/26/using-oauth2-in-spring-scopes/</guid><description>&lt;p>我们在&lt;a href="https://blog.chensoul.cc/posts/2023/07/26/using-oauth2-in-spring/">上一篇文章&lt;/a>中了解了基本的 OAuth2 概念以及如何在 Spring 中实现和执行不同的授权。在这篇文章中，我们将介绍 OAuth2 的另一个重要概念：范围。&lt;/p>
&lt;h2 id="oauth-范围">OAuth 范围&lt;/h2>
&lt;p>保护对应用程序的访问通常分两个步骤进行：身份验证和授权。要理解这两个概念，假设您在绝密政府大楼工作。在开始之前，你会得到一张卡片，可以让你进入建筑物。 OAuth 令牌可以看作是允许您访问的卡片。&lt;/p></description></item><item><title>[译]在 Spring 中实现 OAuth2：第 1 部分</title><link>https://blog.chensoul.cc/posts/2023/07/26/using-oauth2-in-spring/</link><pubDate>Wed, 26 Jul 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/07/26/using-oauth2-in-spring/</guid><description>&lt;p>OAuth2 是一组规范，主要提供对 Rest API 的安全访问的方法。 OAuth 的主要目的是允许通过使用令牌来执行身份验证和授权，而不必为每个操作提供凭据。由于本文的重点是实现，并且为了不重新发明轮子，可以查看 &lt;a href="https:/tools.ietf.org/html/rfc6749" target="_blank">OAuth RFC&lt;/a> 或&lt;a href="https:/en.wikipedia.org/wiki/OAuth" target="_blank">维基百科&lt;/a>以获取更多理论背景。在这篇文章中，我们将深入探讨 Spring 中的 OAuth2 实现以及如何使用不同的授权类型，但在此之前值得提供一些重要概念的简要定义。&lt;/p></description></item><item><title>[译]使用Spring Boot2和Spring Security 5以及JDBC令牌存储进行Oauth2集中授权</title><link>https://blog.chensoul.cc/posts/2023/07/14/oauth-2-centralized-authorization-with-spring-boot-2-and-spring-security-5-and-jdbc-token-store/</link><pubDate>Fri, 14 Jul 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/07/14/oauth-2-centralized-authorization-with-spring-boot-2-and-spring-security-5-and-jdbc-token-store/</guid><description>&lt;p>在这篇文章中，我们将了解如何使用 Spring Boot 2 和 Spring Security 5 OAuth2 来实现集中授权的授权服务器以及如何通过 GUI 对其进行管理，还将提供资源服务器演示以及 github 下的整个项目。&lt;/p></description></item></channel></rss>