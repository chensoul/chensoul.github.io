<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Architecture on ChenSoul</title><link>https://blog.chensoul.cc/categories/architecture/</link><description>Recent content in Architecture on ChenSoul</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 05 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.chensoul.cc/categories/architecture/index.xml" rel="self" type="application/rss+xml"/><item><title>[译]关系数据库设计速成课程</title><link>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-on-relational-database/</link><pubDate>Mon, 05 Aug 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-on-relational-database/</guid><description>&lt;p>原文链接：&lt;a href="https:/blog.bytebytego.com/p/a-crash-course-on-relational-database" target="_blank">https:/blog.bytebytego.com/p/a-crash-course-on-relational-database&lt;/a>&lt;/p>
&lt;p>在当今数据驱动的世界中，高效存储和管理信息是各种规模的企业和组织的关键要求。&lt;/p>
&lt;p>关系数据库提供了一个强大的框架，用于根据实体之间明确定义的关系来存储和检索数据。它们提供了一种结构化的数据管理方法，使用户能够：&lt;/p>
&lt;ul>
&lt;li>定义表&lt;/li>
&lt;li>建立关系&lt;/li>
&lt;li>执行复杂查询以从存储的信息中提取有意义的见解&lt;/li>
&lt;/ul>
&lt;p>然而，仅仅使用关系数据库还不足以获得其好处。&lt;/p>
&lt;p>有效的数据库设计对于优化性能、确保数据完整性和促进高效的数据检索至关重要。数据库设计原则（例如规范化、索引、连接和关系）在创建结构良好且性能良好的数据库中起着至关重要的作用。&lt;/p></description></item><item><title>[译]分布式系统速成课程</title><link>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-on-distributed-systems/</link><pubDate>Mon, 05 Aug 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-on-distributed-systems/</guid><description>&lt;p>原文链接：&lt;a href="https:/blog.bytebytego.com/p/a-crash-course-on-distributed-systems" target="_blank">https:/blog.bytebytego.com/p/a-crash-course-on-distributed-systems&lt;/a>&lt;/p>
&lt;p>分布式系统是多台计算机（也称为节点）的集合，它们协作执行特定任务或提供服务。&lt;/p>
&lt;p>这些节点在物理上是分开的，并通过网络传递消息相互通信。分布式系统可以跨越地理边界，使其能够利用来自不同位置的资源。&lt;/p>
&lt;p>&lt;img src="../../../static/images/a-crash-course-on-distributed-systems-01.webp" alt="img">&lt;/p>
&lt;p>分布式系统有几个区别于传统集中式系统的特点：&lt;/p>
&lt;ul>
&lt;li>分布式系统中的计算机在物理上是分开的，并通过网络连接。它们不共享内存或公共时钟。&lt;/li>
&lt;li>从外部视角来看，分布式系统对于最终用户来说是一个单一、统一的实体。&lt;/li>
&lt;li>分布式系统提供了在系统中添加或删除计算机的灵活性。&lt;/li>
&lt;li>分布式系统中的节点需要相互协调并达成一致才能一致地执行操作。&lt;/li>
&lt;li>分布式系统中的节点可能独立发生故障，并且消息可能会在网络上丢失或延迟。&lt;/li>
&lt;/ul>
&lt;p>分布式系统在我们的日常生活中无处不在。例如 Google 搜索等大型 Web 应用程序、在线银行系统、多人游戏等。这些系统利用多台计算机协同工作，提供无缝且响应迅速的用户体验。&lt;/p></description></item><item><title>[译]数据库分片速成课程</title><link>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-in-database-sharding/</link><pubDate>Mon, 05 Aug 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-in-database-sharding/</guid><description>&lt;p>原文链接：&lt;a href="https:/blog.bytebytego.com/p/a-crash-course-in-database-sharding" target="_blank">https:/blog.bytebytego.com/p/a-crash-course-in-database-sharding&lt;/a>&lt;/p>
&lt;p>随着应用程序越来越受欢迎，它会吸引更多活跃用户并加入更多功能。这种增长导致每日数据生成量增加，从业务角度来看，这是一个积极的指标。&lt;/p>
&lt;p>然而，它也给应用程序的架构带来挑战，特别是在数据库可扩展性方面。&lt;/p>
&lt;p>数据库是任何应用程序的关键组件，但它也是最难水平扩展的组件之一。当应用程序的流量和数据量增加时，数据库可能会成为性能瓶颈，影响用户体验。&lt;/p>
&lt;p>分片是一种解决数据库横向扩展难题的技术。它涉及将数据库划分为更小、更易于管理的单元（称为分片）。&lt;/p>
&lt;p>在这篇文章中，我们将介绍数据库分片的基础知识，探讨其各种方法、技术考虑因素，以及展示公司如何实施分片来扩展其数据库的真实案例研究。&lt;/p>
&lt;p>&lt;img src="../../../static/images/a-crash-course-in-database-sharding-01.webp" alt="img">&lt;/p>
&lt;h2 id="什么是分片">什么是分片？&lt;/h2>
&lt;p>分片是一种架构模式，用于解决管理和查询数据库中大型数据集的难题。它涉及将大型数据库拆分为更小、更易于管理的部分（称为分片）。&lt;/p></description></item><item><title>[译]数据库扩展策略速成课程</title><link>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-in-database-scaling/</link><pubDate>Mon, 05 Aug 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-in-database-scaling/</guid><description>&lt;p>原文链接：&lt;a href="https:/blog.bytebytego.com/p/a-crash-course-in-database-scaling" target="_blank">https:/blog.bytebytego.com/p/a-crash-course-in-database-scaling&lt;/a>&lt;/p>
&lt;p>数据库是现代应用程序开发的支柱。它们在存储、管理和检索数据方面发挥着至关重要的作用，使应用程序和服务能够有效运行。&lt;/p>
&lt;p>随着应用程序越来越受欢迎并吸引越来越多的用户群，数据库面临着处理不断增加的数据量、并发用户和复杂查询的挑战。&lt;/p>
&lt;p>有效地扩展数据库以确保最佳性能和良好的用户体验变得至关重要。&lt;/p>
&lt;p>数据库扩展是调整和扩展数据库基础架构以适应增长并在负载增加的情况下保持性能的过程。它涉及采用各种技术和策略来有效地分配数据，优化查询执行并明智地利用硬件资源。&lt;/p>
&lt;p>组织和开发人员必须了解并实施正确的数据库扩展策略。针对特定情况选择错误的策略可能会弊大于利。&lt;/p>
&lt;p>在这篇文章中，我们将详细介绍最流行的数据库扩展策略，讨论它们的优点和权衡。&lt;/p>
&lt;p>&lt;img src="../../../static/images/a-crash-course-in-database-scaling-01.webp" alt="img">&lt;/p></description></item><item><title>[译]领域驱动设计速成课程</title><link>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-on-domain-driven-design/</link><pubDate>Mon, 05 Aug 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-on-domain-driven-design/</guid><description>&lt;p>原文链接：&lt;a href="https:/blog.bytebytego.com/p/a-crash-course-on-domain-driven-design" target="_blank">https:/blog.bytebytego.com/p/a-crash-course-on-domain-driven-design&lt;/a>&lt;/p>
&lt;p>为复杂领域开发软件是一项具有挑战性的任务。&lt;/p>
&lt;p>随着问题领域的复杂性不断增长，创建准确表示业务概念、规则和流程的软件变得越来越困难。设计不良的软件很快就会变成难以理解、难以维护和扩展的混乱代码。&lt;/p>
&lt;p>领域驱动设计（DDD）为这个问题提供了解决方案。&lt;/p>
&lt;p>DDD 是一种软件开发方法，它通过强调对核心领域和业务逻辑进行建模的重要性并使用这些模型作为软件设计的基础来解决领域复杂性。&lt;/p>
&lt;p>领域驱动设计的核心是：&lt;/p>
&lt;ul>
&lt;li>将主要焦点放在核心领域上。&lt;/li>
&lt;li>基于领域模型的复杂设计&lt;/li>
&lt;li>建立技术专家和领域专家之间的协作。&lt;/li>
&lt;/ul>
&lt;p>近年来，领域驱动设计的需求愈发迫切。基于微服务和云计算的架构已导致系统由众多以复杂方式交互的小组件组成。如果没有清晰且定义明确的领域模型来指导其设计，此类系统很快就会变成“一团泥球”。&lt;/p></description></item><item><title>[译]《Grokking the System Design Interview》设计Twitter</title><link>https://blog.chensoul.cc/posts/2023/12/14/designing-twitter/</link><pubDate>Thu, 14 Dec 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/12/14/designing-twitter/</guid><description>&lt;p>这是一篇双语翻译的文章，原文出自 &lt;a href="https:/github.com/sharanyaa/grok_sdi_educative/blob/master/grok_system_design_interview.pdf" target="_blank">grok_system_design_interview.pdf&lt;/a> 的一篇文章《Designing Twitter》设计 Twitter。&lt;/p>
&lt;hr>
&lt;p>Let’s design a Twitter-like social networking service. Users of the service will be able to post tweets, follow other people, and favorite tweets. Difficulty Level: Medium&lt;/p></description></item><item><title>如何设计一个分布式ID生成器保证ID按时间有序？</title><link>https://blog.chensoul.cc/posts/2023/12/05/distributed-id-generator/</link><pubDate>Tue, 05 Dec 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/12/05/distributed-id-generator/</guid><description>&lt;p>很多业务有生成唯一 ID 并作为数据库主键的需求。数据库会在这个字段上建立聚集索引（参考 MySQL InnoDB），即该字段会影响各条数据再物理存储上的顺序。&lt;/p>
&lt;p>ID还要尽可能&lt;strong>短&lt;/strong>，节省内存，让数据库索引效率更高。基本上64位整数能够满足绝大多数的场景，但是如果能做到比64位更短那就更好了。需要根据具体业务进行分析，预估出ID的最大值，这个最大值通常比64位整数的上限小很多，于是我们可以用更少的bit表示这个ID。&lt;/p>
&lt;p>查询的时候，往往有分页或者&lt;strong>排序&lt;/strong>的需求，所以需要给每条数据添加一个时间字段，并在其上建立普通索引(Secondary Index)。但是普通索引的访问效率比聚集索引慢，如果能够让ID&lt;strong>按照时间粗略有序&lt;/strong>，则可以省去这个时间字段。为什么不是按照时间精确有序呢？因为按照时间精确有序是做不到的，除非用一个单机算法，在分布式场景下做到精确有序性能一般很差。&lt;/p></description></item><item><title>[译]《Grokking the System Design Interview》设计Dropbox</title><link>https://blog.chensoul.cc/posts/2023/11/24/designing-dropbox/</link><pubDate>Fri, 24 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/11/24/designing-dropbox/</guid><description>&lt;p>这是一篇双语翻译的文章，原文出自 &lt;a href="https:/github.com/sharanyaa/grok_sdi_educative/blob/master/grok_system_design_interview.pdf" target="_blank">grok_system_design_interview.pdf&lt;/a> 的一篇文章《Designing Dropbox》设计 Dropbox。&lt;/p>
&lt;hr>
&lt;p>Let’s design a file hosting service like Dropbox or Google Drive. Cloud file storage enables users to store their data on remote servers. Usually, these servers are maintained by cloud storage providers and made available to users over a network (typically through the Internet). Users pay for their cloud data storage on a monthly basis. Similar Services: OneDrive, Google Drive Difficulty Level: Medium&lt;/p></description></item><item><title>[译]《Grokking the System Design Interview》设计Facebook Messenger</title><link>https://blog.chensoul.cc/posts/2023/11/24/designing-facebook-messenger/</link><pubDate>Fri, 24 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/11/24/designing-facebook-messenger/</guid><description>&lt;p>这是一篇双语翻译的文章，原文出自 &lt;a href="https:/github.com/sharanyaa/grok_sdi_educative/blob/master/grok_system_design_interview.pdf" target="_blank">grok_system_design_interview.pdf&lt;/a> 的一篇文章《Designing Facebook Messenger》设计 Facebook Messenger。&lt;/p>
&lt;hr>
&lt;p>Let’s design an instant messaging service like Facebook Messenger where users can send text messages to each other through web and mobile interfaces.
让我们设计一个像 Facebook Messenger 这样的即时消息服务，用户可以通过网络和移动界面互相发送短信。&lt;/p></description></item><item><title>[译]《Grokking the System Design Interview》设计Instagram</title><link>https://blog.chensoul.cc/posts/2023/11/24/designing-instagram/</link><pubDate>Fri, 24 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/11/24/designing-instagram/</guid><description>&lt;p>这是一篇双语翻译的文章，原文出自 &lt;a href="https:/github.com/sharanyaa/grok_sdi_educative/blob/master/grok_system_design_interview.pdf" target="_blank">grok_system_design_interview.pdf&lt;/a> 的一篇文章《Designing Instagram》设计 Instagram。&lt;/p>
&lt;hr>
&lt;p>Let’s design a photo-sharing service like Instagram, where users can upload photos to share them with other users. Similar Services: Flickr, Picasa Difficulty Level: Medium&lt;/p></description></item><item><title>[译]《Grokking the System Design Interview》设计Pastebin</title><link>https://blog.chensoul.cc/posts/2023/11/24/designing-pastebin/</link><pubDate>Fri, 24 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/11/24/designing-pastebin/</guid><description>&lt;p>这是一篇双语翻译的文章，原文出自 &lt;a href="https:/github.com/sharanyaa/grok_sdi_educative/blob/master/grok_system_design_interview.pdf" target="_blank">grok_system_design_interview.pdf&lt;/a> 的一篇文章《Designing Pastebin》设计 Pastebin。&lt;/p>
&lt;hr>
&lt;p>Let’s design a Pastebin like web service, where users can store plain text. Users of the service will enter a piece of text and get a randomly generated URL to access it. Similar Services: pastebin.com, pasted.co, chopapp.com Difficulty Level: Easy&lt;/p></description></item><item><title>[译]《Grokking the System Design Interview》域名系统</title><link>https://blog.chensoul.cc/posts/2023/11/17/dns/</link><pubDate>Fri, 17 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/11/17/dns/</guid><description>&lt;p>这是一篇双语翻译的文章，原文出自《Grokking the System Design Interview》教程的 &lt;a href="https:/www.educative.io/courses/grokking-modern-system-design-interview-for-engineers-managers/introduction-to-domain-name-system-dns" target="_blank">Domain Name System&lt;/a> 这篇章节。&lt;/p></description></item><item><title>如何设计一个短网址服务</title><link>https://blog.chensoul.cc/posts/2023/11/17/designing-a-url-shortening-service/</link><pubDate>Fri, 17 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/11/17/designing-a-url-shortening-service/</guid><description>&lt;p>如何生成一个短网址服务，参考 &lt;a href="https:/www.educative.io/courses/grokking-modern-system-design-interview-for-engineers-managers/system-design-tinyurl" target="_blank">Design a URL Shortening Service / TinyURL&lt;/a> 和 &lt;a href="https:/www.designgurus.io/course-play/grokking-the-system-design-interview/doc/638c0b5dac93e7ae59a1af6b" target="_blank">Designing a URL Shortening service like TinyURL&lt;/a> 两篇文章，整理如下笔记。&lt;/p></description></item><item><title>[译]《Grokking the System Design Interview》系统设计主模板</title><link>https://blog.chensoul.cc/posts/2023/11/16/system-design-master-template/</link><pubDate>Thu, 16 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/11/16/system-design-master-template/</guid><description>&lt;p>这是一篇双语翻译的文章，原文出自《Grokking the System Design Interview》教程的 &lt;a href="https:/www.designgurus.io/course-play/grokking-the-system-design-interview/doc/645d5161fff33a24ccce4bb1" target="_blank">System Design Master Template&lt;/a> 这篇章节。&lt;/p></description></item><item><title>[译]《Grokking the System Design Interview》系统设计访谈：分步指南</title><link>https://blog.chensoul.cc/posts/2023/11/16/sdi-a-step-by-step-guide/</link><pubDate>Thu, 16 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/11/16/sdi-a-step-by-step-guide/</guid><description>&lt;p>这是一篇双语翻译的文章，原文出自 &lt;a href="https:/github.com/sharanyaa/grok_sdi_educative/blob/master/grok_system_design_interview.pdf" target="_blank">grok_system_design_interview.pdf&lt;/a> 的一篇文章《System Design Interviews: A step by step guide》系统设计访谈：分步指南。&lt;/p></description></item><item><title>[译]《Grokking the System Design Interview》设计类似 TinyURL 的 URL 缩短服务</title><link>https://blog.chensoul.cc/posts/2023/11/16/designing-a-url-shortening-service/</link><pubDate>Thu, 16 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/11/16/designing-a-url-shortening-service/</guid><description>&lt;p>这是一篇双语翻译的文章，原文出自 &lt;a href="https:/github.com/sharanyaa/grok_sdi_educative/blob/master/grok_system_design_interview.pdf" target="_blank">grok_system_design_interview.pdf&lt;/a> 的一篇文章《Designing a URL Shortening service like TinyURL》设计类似 TinyURL 的 URL 缩短服务。&lt;/p></description></item><item><title>分布式基础知识</title><link>https://blog.chensoul.cc/posts/2023/11/14/distributed-system-basic/</link><pubDate>Tue, 14 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/11/14/distributed-system-basic/</guid><description>&lt;h2 id="什么是分布式系统">什么是分布式系统？&lt;/h2>
&lt;p>分布式系统是指由多个独立的计算机节点（或服务器）通过网络相互连接和协作，共同完成某个任务或提供某个服务的系统。在分布式系统中，各个节点可以同时进行计算、存储和通信，并通过消息传递等方式进行协调和同步。&lt;/p>
&lt;p>&lt;strong>分布式系统的设计目标是提高系统的性能、可靠性和可扩展性，同时减少单点故障和提高系统的容错性&lt;/strong>。通过将任务和数据分布到多个节点上，分布式系统可以实现更高的并行性和处理能力。此外，分布式系统还可以提供更好的负载均衡，以应对不断增长的工作负载。&lt;/p>
&lt;h2 id="分布式系统的主要特征">分布式系统的主要特征&lt;/h2>
&lt;p>分布式系统具有以下主要特征：&lt;/p>
&lt;ol>
&lt;li>分布性：分布式系统中的计算机节点分布在不同的物理或逻辑位置上，可以是同一局域网内的多台机器，也可以是分布在全球不同地区的服务器。&lt;/li>
&lt;li>并行性：分布式系统中的节点可以同时进行计算和处理任务，从而实现并行处理和提高系统的性能。并行性可以通过将任务划分为子任务，并在不同节点上并行执行来实现。&lt;/li>
&lt;li>通信：分布式系统通过网络进行节点之间的通信和数据传输，以实现协作和信息交换。节点之间的通信可以通过消息传递、远程过程调用（RPC）或分布式共享内存等方式实现。&lt;/li>
&lt;li>缺乏全局时钟：由于节点之间的通信延迟和不可靠性，分布式系统往往无法依赖全局时钟来进行同步。因此，分布式系统需要采用一些分布式算法来实现一致性和协调，如分布式锁、一致性协议等。&lt;/li>
&lt;li>容错性：分布式系统需要具备容错机制，以应对节点故障、网络故障或其他异常情况。容错性的实现通常包括备份和冗余，例如使用冗余节点、数据复制和副本机制，以确保系统的可用性和数据的完整性。&lt;/li>
&lt;li>可扩展性：分布式系统应具备良好的可扩展性，即能够方便地扩展节点数量和处理能力，以适应不断增长的工作负载。可扩展性的实现可能包括水平扩展、垂直扩展、负载均衡等技术手段。&lt;/li>
&lt;li>不确定性：由于节点之间的通信延迟和不可靠性，分布式系统中的操作可能存在不确定性。例如，消息传递可能会有延迟，网络可能会发生分区，导致节点之间的信息不一致。因此，分布式系统需要考虑和处理这种不确定性情况。&lt;/li>
&lt;/ol>
&lt;p>这些特征使得分布式系统能够实现高性能、高可用性和可扩展性，但也带来了挑战，如一致性问题、并发控制、故障处理等。因此，在设计和开发分布式系统时，需要考虑这些特征，并选择合适的技术和算法来解决相关问题。&lt;/p></description></item><item><title>[译]《分布式系统：为了乐趣和利益》1.高层分布式系统</title><link>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-01/</link><pubDate>Fri, 10 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-01/</guid><description>&lt;blockquote>
&lt;p>《分布式系统：为了乐趣和利益》是一本广受欢迎的资源，用于理解和学习分布式系统。该书由作者 Mikito Takada 撰写，介绍了构建分布式系统的基本概念、原则和挑战。&lt;/p>
&lt;p>这本书涵盖了与分布式系统相关的广泛主题，包括网络、容错性、一致性模型、分布式算法、可扩展性等等。它旨在以清晰易懂的方式解释复杂的概念，适合初学者和有经验的分布式系统从业者阅读。&lt;/p>
&lt;p>在整本书中，作者提供了各种实际案例和案例研究，以说明分布式系统的实际应用和实践方面。它还强调了构建分布式系统涉及的权衡和设计考虑，帮助读者全面理解这个主题。&lt;/p>
&lt;p>《分布式系统：为了乐趣和利益》作为开源资源，可以免费在线获取，非常适合任何对学习分布式系统感兴趣的人。&lt;/p>
&lt;p>原文链接：&lt;a href="https:/book.mixu.net/distsys/single-page.html" target="_blank">Distributed systems: for fun and profit&lt;/a>&lt;/p></description></item><item><title>[译]《分布式系统：为了乐趣和利益》2.抽象层次的上下</title><link>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-02/</link><pubDate>Fri, 10 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-02/</guid><description>&lt;blockquote>
&lt;p>《分布式系统：为了乐趣和利益》是一本广受欢迎的资源，用于理解和学习分布式系统。该书由作者 Mikito Takada 撰写，介绍了构建分布式系统的基本概念、原则和挑战。&lt;/p>
&lt;p>这本书涵盖了与分布式系统相关的广泛主题，包括网络、容错性、一致性模型、分布式算法、可扩展性等等。它旨在以清晰易懂的方式解释复杂的概念，适合初学者和有经验的分布式系统从业者阅读。&lt;/p>
&lt;p>在整本书中，作者提供了各种实际案例和案例研究，以说明分布式系统的实际应用和实践方面。它还强调了构建分布式系统涉及的权衡和设计考虑，帮助读者全面理解这个主题。&lt;/p>
&lt;p>《分布式系统：为了乐趣和利益》作为开源资源，可以免费在线获取，非常适合任何对学习分布式系统感兴趣的人。&lt;/p>
&lt;p>原文链接：&lt;a href="https:/book.mixu.net/distsys/single-page.html" target="_blank">Distributed systems: for fun and profit&lt;/a>&lt;/p></description></item><item><title>[译]《分布式系统：为了乐趣和利益》3.时间及顺序</title><link>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-03/</link><pubDate>Fri, 10 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-03/</guid><description>&lt;blockquote>
&lt;p>《分布式系统：为了乐趣和利益》是一本广受欢迎的资源，用于理解和学习分布式系统。该书由作者 Mikito Takada 撰写，介绍了构建分布式系统的基本概念、原则和挑战。&lt;/p>
&lt;p>这本书涵盖了与分布式系统相关的广泛主题，包括网络、容错性、一致性模型、分布式算法、可扩展性等等。它旨在以清晰易懂的方式解释复杂的概念，适合初学者和有经验的分布式系统从业者阅读。&lt;/p>
&lt;p>在整本书中，作者提供了各种实际案例和案例研究，以说明分布式系统的实际应用和实践方面。它还强调了构建分布式系统涉及的权衡和设计考虑，帮助读者全面理解这个主题。&lt;/p>
&lt;p>《分布式系统：为了乐趣和利益》作为开源资源，可以免费在线获取，非常适合任何对学习分布式系统感兴趣的人。&lt;/p>
&lt;p>原文链接：&lt;a href="https:/book.mixu.net/distsys/single-page.html" target="_blank">Distributed systems: for fun and profit&lt;/a>&lt;/p></description></item><item><title>[译]《分布式系统：为了乐趣和利益》4.复制</title><link>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-04/</link><pubDate>Fri, 10 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-04/</guid><description>&lt;blockquote>
&lt;p>《分布式系统：为了乐趣和利益》是一本广受欢迎的资源，用于理解和学习分布式系统。该书由作者 Mikito Takada 撰写，介绍了构建分布式系统的基本概念、原则和挑战。&lt;/p>
&lt;p>这本书涵盖了与分布式系统相关的广泛主题，包括网络、容错性、一致性模型、分布式算法、可扩展性等等。它旨在以清晰易懂的方式解释复杂的概念，适合初学者和有经验的分布式系统从业者阅读。&lt;/p>
&lt;p>在整本书中，作者提供了各种实际案例和案例研究，以说明分布式系统的实际应用和实践方面。它还强调了构建分布式系统涉及的权衡和设计考虑，帮助读者全面理解这个主题。&lt;/p>
&lt;p>《分布式系统：为了乐趣和利益》作为开源资源，可以免费在线获取，非常适合任何对学习分布式系统感兴趣的人。&lt;/p>
&lt;p>原文链接：&lt;a href="https:/book.mixu.net/distsys/single-page.html" target="_blank">Distributed systems: for fun and profit&lt;/a>&lt;/p></description></item><item><title>[译]《分布式系统：为了乐趣和利益》5.复制：弱一致性模型协议</title><link>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-05/</link><pubDate>Fri, 10 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-05/</guid><description>&lt;blockquote>
&lt;p>《分布式系统：为了乐趣和利益》是一本广受欢迎的资源，用于理解和学习分布式系统。该书由作者 Mikito Takada 撰写，介绍了构建分布式系统的基本概念、原则和挑战。&lt;/p>
&lt;p>这本书涵盖了与分布式系统相关的广泛主题，包括网络、容错性、一致性模型、分布式算法、可扩展性等等。它旨在以清晰易懂的方式解释复杂的概念，适合初学者和有经验的分布式系统从业者阅读。&lt;/p>
&lt;p>在整本书中，作者提供了各种实际案例和案例研究，以说明分布式系统的实际应用和实践方面。它还强调了构建分布式系统涉及的权衡和设计考虑，帮助读者全面理解这个主题。&lt;/p>
&lt;p>《分布式系统：为了乐趣和利益》作为开源资源，可以免费在线获取，非常适合任何对学习分布式系统感兴趣的人。&lt;/p>
&lt;p>原文链接：&lt;a href="https:/book.mixu.net/distsys/single-page.html" target="_blank">Distributed systems: for fun and profit&lt;/a>&lt;/p></description></item><item><title>[译]《分布式系统：为了乐趣和利益》6.进一步阅读和附录</title><link>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-06/</link><pubDate>Fri, 10 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/11/10/distributed-systems-06/</guid><description>&lt;blockquote>
&lt;p>《分布式系统：为了乐趣和利益》是一本广受欢迎的资源，用于理解和学习分布式系统。该书由作者Mikito Takada撰写，介绍了构建分布式系统的基本概念、原则和挑战。&lt;/p>
&lt;p>这本书涵盖了与分布式系统相关的广泛主题，包括网络、容错性、一致性模型、分布式算法、可扩展性等等。它旨在以清晰易懂的方式解释复杂的概念，适合初学者和有经验的分布式系统从业者阅读。&lt;/p>
&lt;p>在整本书中，作者提供了各种实际案例和案例研究，以说明分布式系统的实际应用和实践方面。它还强调了构建分布式系统涉及的权衡和设计考虑，帮助读者全面理解这个主题。&lt;/p>
&lt;p>《分布式系统：为了乐趣和利益》作为开源资源，可以免费在线获取，非常适合任何对学习分布式系统感兴趣的人。&lt;/p>
&lt;p>原文链接：&lt;a href="https:/book.mixu.net/distsys/single-page.html" target="_blank">Distributed systems: for fun and profit&lt;/a>&lt;/p></description></item><item><title>[译]给年轻的工程师们的关于分布式系统的一些笔记</title><link>https://blog.chensoul.cc/posts/2023/11/10/notes-on-distributed-systems-for-young-bloods/</link><pubDate>Fri, 10 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/11/10/notes-on-distributed-systems-for-young-bloods/</guid><description>&lt;p>我一直在思考分布式系统工程师在工作中学到的教训。我们大部分的教导都来自于在生产环境中犯过的错误留下的伤痕。这些伤痕固然是有用的提醒，但让更多的工程师能够完整地保留手指会更好。&lt;/p>
&lt;p>新的系统工程师在自我学习中会遇到分布式计算的谬论和CAP定理。但这些都是抽象的概念，缺乏针对经验不足的工程师直接可行的建议。让人惊讶的是，新工程师在开始工作时所了解到的背景信息是如此之少。&lt;/p>
&lt;p>下面是我作为一名分布式系统工程师学到的一些经验教训，值得告诉新工程师。其中一些经验是微妙的，一些是令人惊讶的，但没有一条是有争议的。这个列表是为了引导新的分布式系统工程师思考他们所从事领域的问题，虽然不是全面的，但是是一个很好的开始。&lt;/p>
&lt;p>这个列表最糟糕的特点是它主要关注技术问题，很少讨论工程师可能遇到的社交问题。由于分布式系统需要更多的机器和资本，它们的工程师往往需要与更多的团队和更大的组织合作。社交问题通常是任何软件开发者工作中最困难的部分，也许对于分布式系统的开发来说尤其如此。&lt;/p>
&lt;p>我们的背景、教育和经验使我们倾向于采用技术解决方案，即使社交解决方案可能更高效、更令人满意。让我们试着纠正这一点。与计算机相比，人们并不那么挑剔，即使他们的接口没有那么标准化。&lt;/p>
&lt;p>好了，我们开始吧。&lt;/p>
&lt;p>&lt;strong>分布式系统是不同的，因为它们经常失败。&lt;/strong> 当被问及是什么将分布式系统与软件工程的其他领域区分开来时，这位新工程师经常引用延迟，认为这是使分布式计算变得困难的原因。&lt;/p></description></item><item><title>[译]《分布式系统：为了乐趣和利益》介绍</title><link>https://blog.chensoul.cc/posts/2023/11/09/distributed-systems-intro/</link><pubDate>Thu, 09 Nov 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/11/09/distributed-systems-intro/</guid><description>&lt;blockquote>
&lt;p>《分布式系统：为了乐趣和利益》是一本广受欢迎的资源，用于理解和学习分布式系统。该书由作者Mikito Takada撰写，介绍了构建分布式系统的基本概念、原则和挑战。&lt;/p>
&lt;p>这本书涵盖了与分布式系统相关的广泛主题，包括网络、容错性、一致性模型、分布式算法、可扩展性等等。它旨在以清晰易懂的方式解释复杂的概念，适合初学者和有经验的分布式系统从业者阅读。&lt;/p>
&lt;p>在整本书中，作者提供了各种实际案例和案例研究，以说明分布式系统的实际应用和实践方面。它还强调了构建分布式系统涉及的权衡和设计考虑，帮助读者全面理解这个主题。&lt;/p>
&lt;p>《分布式系统：为了乐趣和利益》作为开源资源，可以免费在线获取，非常适合任何对学习分布式系统感兴趣的人。&lt;/p>
&lt;p>原文链接：&lt;a href="https:/book.mixu.net/distsys/single-page.html" target="_blank">Distributed systems: for fun and profit&lt;/a>&lt;/p></description></item><item><title>如何成为一名合格的架构师</title><link>https://blog.chensoul.cc/posts/2023/08/21/architecture/</link><pubDate>Mon, 21 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/21/architecture/</guid><description>&lt;h2 id="如何成为一名合格的架构师">如何成为一名合格的架构师&lt;/h2>
&lt;p>成为一名合格的架构师需要不断学习和积累经验。以下是一些步骤和建议，可以帮助你成为一名合格的架构师：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>学习基础知识：建立坚实的计算机科学和软件工程基础，包括数据结构、算法、操作系统、数据库等。深入学习编程语言和开发技术，了解不同技术栈的优缺点。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>实践项目开发：通过参与实际的软件开发项目，积累项目管理和开发经验。亲身经历软件开发的各个阶段，从需求分析到设计、开发、测试和部署，深入了解软件开发的流程和挑战。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>学习系统设计和架构：深入学习系统设计和架构的相关知识，包括架构模式、设计原则。阅读相关的书籍、文章和技术博客，参与架构设计讨论和社区活动。&lt;/p>
&lt;p>以下是关于架构模式、设计原则和一些常见架构的简要介绍：&lt;/p>
&lt;ol>
&lt;li>架构模式：
&lt;ul>
&lt;li>分层架构（Layered Architecture）：将系统划分为多个层次，每个层次有不同的职责和功能，实现松耦合和可维护性。&lt;/li>
&lt;li>客户端-服务器模式（Client-Server）：将系统分为客户端和服务器，客户端发送请求并接收响应，服务器处理请求并提供服务。&lt;/li>
&lt;li>发布-订阅模式（Publish-Subscribe）：基于事件的模式，发布者发布事件，订阅者订阅感兴趣的事件，实现解耦和扩展性。&lt;/li>
&lt;li>微服务架构（Microservices Architecture）：将系统拆分为一组小型、自治的服务，每个服务专注于一个特定的业务功能，通过轻量通信协议进行交互。&lt;/li>
&lt;li>事件驱动架构（Event-Driven Architecture）：系统的组成部分通过事件进行通信和协调，事件的发生触发相应的处理和反应。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>设计原则：
&lt;ul>
&lt;li>单一职责原则（Single Responsibility Principle）：一个模块或类应该有且只有一个单一的责任。&lt;/li>
&lt;li>开闭原则（Open-Closed Principle）：软件实体应该对扩展开放，对修改封闭。&lt;/li>
&lt;li>里氏替换原则（Liskov Substitution Principle）：子类应该能够替换掉父类，并且不会破坏程序的正确性。&lt;/li>
&lt;li>接口隔离原则（Interface Segregation Principle）：不应该强迫客户端依赖于它们不需要的接口。&lt;/li>
&lt;li>依赖倒置原则（Dependency Inversion Principle）：应该依赖于抽象而不是具体实现。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>实践架构设计：在实际项目中担任架构师的角色，负责系统的整体设计和架构决策。通过实践中的挑战和经验，不断提升自己的架构设计能力。&lt;/p></description></item><item><title>软件开发流程和常用开发方法</title><link>https://blog.chensoul.cc/posts/2023/08/21/the-software-development-process/</link><pubDate>Mon, 21 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/21/the-software-development-process/</guid><description>&lt;p>软件开发流程和常用开发方法，如敏捷开发和 DevOps，对于架构师来说非常重要。下面我将简要介绍这些概念：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>软件开发流程：&lt;/p>
&lt;p>软件开发流程是指在开发软件时，按照一定的步骤和阶段进行工作的过程。常见的软件开发流程包括瀑布模型、迭代模型和增量模型等。这些流程以不同的方式组织和管理开发过程，包括需求分析、设计、编码、测试和部署等阶段。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>敏捷开发：&lt;/p>
&lt;p>敏捷开发是一种迭代和增量的软件开发方法，强调团队协作、快速响应变化和持续交付。敏捷开发强调通过迭代周期（如 Scrum 中的 Sprint）来开发软件，每个迭代都会产生可部署的软件功能。常见的敏捷方法包括 Scrum、XP（极限编程）和 Kanban 等。&lt;/p></description></item><item><title>数据库如何设计树形结构</title><link>https://blog.chensoul.cc/posts/2023/08/15/tree-structure-in-database/</link><pubDate>Tue, 15 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/15/tree-structure-in-database/</guid><description>&lt;p>在 MySQL 中，设计树形结构的区域表有多种方式。以下是一些常见的方案：&lt;/p>
&lt;ol>
&lt;li>父子关系（Parent-Child Relationship）模型：在这种模型中，每个行记录包含一个指向其父级的引用。可以使用一个额外的列来存储父级 ID，或者使用自连接表来表示关系。这种模型简单直观，易于理解和管理。&lt;/li>
&lt;li>路径（Path）模型：在这种模型中，每个行记录都包含一个代表其完整路径的字段。路径可以是以某种分隔符（如斜杠）分隔的字符串，例如：/地区/国家/城市。通过解析和处理路径字段，可以轻松地查询父级、子级和兄弟节点。&lt;/li>
&lt;li>嵌套集模型（Nested Set Model）：这是一种基于左右值的模型，通过预先计算每个节点的左右值，可以高效地查询树形结构。每个节点都有一个左值和一个右值，用于表示其在树中的位置。这种模型适用于大型树结构，但需要特殊的操作来维护左右值。&lt;/li>
&lt;li>物化路径（Materialized Path）模型：这是路径模型的一种改进版本，它使用额外的列来存储节点的层级关系。除了路径字段外，还可以添加一个表示节点级别的字段。这样可以更高效地进行查询，并且可以轻松地获取节点的父级、子级和兄弟节点。&lt;/li>
&lt;/ol>
&lt;h2 id="父子关系parent-child-relationship模型">父子关系（Parent-Child Relationship）模型&lt;/h2>
&lt;p>父子关系（Parent-Child Relationship）模型是一种在 MySQL 中设计树形结构的方式。在该模型中，每个区域记录包含一个指向其父级区域的引用。通过这种父子关系，可以建立区域之间的层级结构。&lt;/p></description></item></channel></rss>