<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Microservice on ChenSoul</title><link>https://blog.chensoul.cc/categories/microservice/</link><description>Recent content in Microservice on ChenSoul</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 26 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.chensoul.cc/categories/microservice/index.xml" rel="self" type="application/rss+xml"/><item><title>[译]微服务设计模式</title><link>https://blog.chensoul.cc/posts/2023/06/26/microservice-design-patterns/</link><pubDate>Mon, 26 Jun 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/06/26/microservice-design-patterns/</guid><description>&lt;p>基于微服务的应用程序的主要特征在 &lt;a href="http://web.archive.org/web/20190705163602/http://blog.arungupta.me/microservices-monoliths-noops/" target="_blank">微服务、单体和 NoOps&lt;/a> 中定义。它们是功能分解或领域驱动设计、定义良好的接口、明确发布的接口、单一责任原则和潜在的多语言。每项服务都是完全自主和全栈的。&lt;/p>
&lt;p>因此，更改服务实现不会影响其他服务，因为它们使用定义良好的接口进行通信。这种应用程序有几个优点，但它不是 &lt;a href="http://web.archive.org/web/20190705163602/http://highscalability.com/blog/2014/4/8/microservices-not-a-free-lunch.html" target="_blank">免费的午餐&lt;/a>，需要在 NoOps 方面付出大量努力。&lt;/p>
&lt;p>但是假设您了解构建此类应用程序所需的工作或至少其中的一部分，并且愿意跳槽。你做什么工作？您构建此类应用程序的方法是什么？&lt;/p>
&lt;p>是否有任何关于这些微服务如何相互协作的设计模式？&lt;/p></description></item></channel></rss>