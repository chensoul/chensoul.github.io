<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rabbitmq on ChenSoul Blog</title><link>https://blog.chensoul.cc/tags/rabbitmq/</link><description>Recent content in Rabbitmq on ChenSoul Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Tue, 07 May 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.chensoul.cc/tags/rabbitmq/index.xml" rel="self" type="application/rss+xml"/><item><title>[译]Apache Kafka、RabbitMQ 与 AWS SNSSQS：哪个消息代理最好？</title><link>https://blog.chensoul.cc/posts/2024/05/07/apache-kafka-vs-rabbitmq-vs-aws-sns-sqs/</link><pubDate>Tue, 07 May 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/05/07/apache-kafka-vs-rabbitmq-vs-aws-sns-sqs/</guid><description>&lt;p&gt;原文链接：&lt;a href="https://ably.com/topic/apache-kafka-vs-rabbitmq-vs-aws-sns-sqs" target="_blank"&gt;https://ably.com/topic/apache-kafka-vs-rabbitmq-vs-aws-sns-sqs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;将消息从一个组件获取到另一个组件是微服务架构中最重要的部分之一。每个服务必须能够与任何其他服务异步、可靠且大规模地通信。&lt;/p&gt;
&lt;p&gt;这就是消息代理的用武之地。消息代理（例如 Apache Kafka、RabbitMQ 和&lt;a href="https://ably.com/topic/aws-sns-vs-sqs" target="_blank"&gt;AWS SNS/SQS&lt;/a&gt;）为您提供一个通用接口和一组保证，而不是手动协调可能数千个微服务之间的通信。这简化了集成并更容易推理您的系统。&lt;/p&gt;</description></item><item><title>2024-01-18｜今天做了什么</title><link>https://blog.chensoul.cc/posts/2024/01/18/til/</link><pubDate>Thu, 18 Jan 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/01/18/til/</guid><description>&lt;p&gt;今天做了什么：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;修改瑞吉外卖项目 &lt;a href="https://github.com/chensoul/reggie" target="_blank"&gt;reggie&lt;/a&gt;：
&lt;ul&gt;
&lt;li&gt;修改数据源配置，使用 HikariCP 数据源&lt;/li&gt;
&lt;li&gt;修改接口返回字段和前端文件，code=0 表示成功&lt;/li&gt;
&lt;li&gt;添加 mysql、redis 安装文档&lt;/li&gt;
&lt;li&gt;添加 openresty lua 脚本实现 redis 缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</description></item></channel></rss>