<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ddd on ChenSoul</title><link>https://blog.chensoul.cc/tags/ddd/</link><description>Recent content in Ddd on ChenSoul</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 05 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.chensoul.cc/tags/ddd/index.xml" rel="self" type="application/rss+xml"/><item><title>[译]领域驱动设计速成课程</title><link>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-on-domain-driven-design/</link><pubDate>Mon, 05 Aug 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/08/05/a-crash-course-on-domain-driven-design/</guid><description>&lt;p>原文链接：&lt;a href="https://blog.bytebytego.com/p/a-crash-course-on-domain-driven-design" target="_blank">https://blog.bytebytego.com/p/a-crash-course-on-domain-driven-design&lt;/a>&lt;/p>
&lt;p>为复杂领域开发软件是一项具有挑战性的任务。&lt;/p>
&lt;p>随着问题领域的复杂性不断增长，创建准确表示业务概念、规则和流程的软件变得越来越困难。设计不良的软件很快就会变成难以理解、难以维护和扩展的混乱代码。&lt;/p>
&lt;p>领域驱动设计（DDD）为这个问题提供了解决方案。&lt;/p>
&lt;p>DDD 是一种软件开发方法，它通过强调对核心领域和业务逻辑进行建模的重要性并使用这些模型作为软件设计的基础来解决领域复杂性。&lt;/p>
&lt;p>领域驱动设计的核心是：&lt;/p>
&lt;ul>
&lt;li>将主要焦点放在核心领域上。&lt;/li>
&lt;li>基于领域模型的复杂设计&lt;/li>
&lt;li>建立技术专家和领域专家之间的协作。&lt;/li>
&lt;/ul>
&lt;p>近年来，领域驱动设计的需求愈发迫切。基于微服务和云计算的架构已导致系统由众多以复杂方式交互的小组件组成。如果没有清晰且定义明确的领域模型来指导其设计，此类系统很快就会变成“一团泥球”。&lt;/p></description></item><item><title>[译]使用 Spring Boot 构建 RESTful API：集成 DDD 和六边形架构</title><link>https://blog.chensoul.cc/posts/2024/05/30/building-a-restful-api-with-spring-boot-integrating-ddd-and-hexagonal-architecture/</link><pubDate>Thu, 30 May 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/05/30/building-a-restful-api-with-spring-boot-integrating-ddd-and-hexagonal-architecture/</guid><description>&lt;p>原文链接：&lt;a href="https://medium.com/@juannegrin/building-a-restful-api-with-spring-boot-integrating-ddd-and-hexagonal-architecture-df50fe24a1ff" target="_blank">Building a RESTful API with Spring Boot: Integrating DDD and Hexagonal Architecture&lt;/a>&lt;/p></description></item><item><title>[译]如何组织代码</title><link>https://blog.chensoul.cc/posts/2024/05/30/how-to-structure-our-code/</link><pubDate>Thu, 30 May 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/05/30/how-to-structure-our-code/</guid><description>&lt;p>原文链接：&lt;a href="https://medium.com/@minadev/how-to-structure-our-code-b5e7b1c32c21" target="_blank">How to Structure Code&lt;/a>&lt;/p>
&lt;p>&lt;em>软件设计最佳实践，逐层发现包、按功能发现包以及六角形架构/端口和适配器。&lt;/em>&lt;/p>
&lt;p>在这篇博文中，我将探讨如何构建我们的代码并讨论最佳实践，涵盖三种不同的方法：按层打包、按功能打包以及六边形架构/端口和适配器及其优缺点。&lt;/p>
&lt;p>在探索构建代码的不同方法之前，我们需要了解基本的软件设计原则：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>内聚力&lt;/strong>：指模块内各类之间的相互关联程度。&lt;/li>
&lt;li>&lt;strong>耦合度&lt;/strong>：指不同模块之间的依赖程度。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="../../../static/images/how-to-structure-our-code-01-0766764.webp" alt="img">&lt;/p></description></item></channel></rss>