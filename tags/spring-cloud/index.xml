<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Spring-Cloud on ChenSoul</title><link>https://blog.chensoul.cc/tags/spring-cloud/</link><description>Recent content in Spring-Cloud on ChenSoul</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 20 Feb 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.chensoul.cc/tags/spring-cloud/index.xml" rel="self" type="application/rss+xml"/><item><title>2024-02-20｜RateLimitAspect请求限流、调整spring-cloud-examples项目结构</title><link>https://blog.chensoul.cc/posts/2024/02/20/til/</link><pubDate>Tue, 20 Feb 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/02/20/til/</guid><description>&lt;p>今天做了什么：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>ChatGPT 编写一个 RateLimitAspect 类，实现基于用户的 get 查询请求的限流功能&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Aspect&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Component&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">RateLimitAspect&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> RedisTemplate&lt;span style="color:#f92672">&amp;lt;&lt;/span>String, Object&lt;span style="color:#f92672">&amp;gt;&lt;/span> redisTemplate;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> Logger logger &lt;span style="color:#f92672">=&lt;/span> LoggerFactory.&lt;span style="color:#a6e22e">getLogger&lt;/span>(RateLimitAspect.&lt;span style="color:#a6e22e">class&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> maxRequests; &lt;span style="color:#f92672">/&lt;/span> Maximum number of requests
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> timeWindow; &lt;span style="color:#f92672">/&lt;/span> Time window in seconds
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Autowired&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">RateLimitAspect&lt;/span>(RedisTemplate&lt;span style="color:#f92672">&amp;lt;&lt;/span>String, Object&lt;span style="color:#f92672">&amp;gt;&lt;/span> redisTemplate) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">redisTemplate&lt;/span> &lt;span style="color:#f92672">=&lt;/span> redisTemplate;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">maxRequests&lt;/span> &lt;span style="color:#f92672">=&lt;/span> 100; &lt;span style="color:#f92672">/&lt;/span> Default maximum number of requests is 100
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">timeWindow&lt;/span> &lt;span style="color:#f92672">=&lt;/span> 60; &lt;span style="color:#f92672">/&lt;/span> Default time window is 60 seconds
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Before&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;@annotation(getMapping)&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">applyRateLimit&lt;/span>(JoinPoint joinPoint, GetMapping getMapping) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HttpServletRequest request &lt;span style="color:#f92672">=&lt;/span> ((ServletRequestAttributes) RequestContextHolder
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">getRequestAttributes&lt;/span>()).&lt;span style="color:#a6e22e">getRequest&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (request &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> HttpMethod.&lt;span style="color:#a6e22e">GET&lt;/span>.&lt;span style="color:#a6e22e">matches&lt;/span>(request.&lt;span style="color:#a6e22e">getMethod&lt;/span>())) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String username &lt;span style="color:#f92672">=&lt;/span> request.&lt;span style="color:#a6e22e">getUserPrincipal&lt;/span>().&lt;span style="color:#a6e22e">getName&lt;/span>(); &lt;span style="color:#f92672">/&lt;/span> Get the username
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">if&lt;/span> (username &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#f92672">!&lt;/span>username.&lt;span style="color:#a6e22e">isEmpty&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String rateLimitKey &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;rate_limit:&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> username;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> incrementAndCheckRateLimit(rateLimitKey, request);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">incrementAndCheckRateLimit&lt;/span>(String rateLimitKey, HttpServletRequest request) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Long currentRequests &lt;span style="color:#f92672">=&lt;/span> redisTemplate.&lt;span style="color:#a6e22e">execute&lt;/span>((RedisCallback&lt;span style="color:#f92672">&amp;lt;&lt;/span>Long&lt;span style="color:#f92672">&amp;gt;&lt;/span>) connection &lt;span style="color:#f92672">-&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Object nativeConnection &lt;span style="color:#f92672">=&lt;/span> connection.&lt;span style="color:#a6e22e">getNativeConnection&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String script &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;local current = redis.call(&amp;#39;INCR&amp;#39;, KEYS[1])\n&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;if tonumber(current) == 1 then\n&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; redis.call(&amp;#39;EXPIRE&amp;#39;, KEYS[1], ARGV[1])\n&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;end\n&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;return current&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> (Long) ((RedisOperations&lt;span style="color:#f92672">&amp;lt;?&lt;/span>, &lt;span style="color:#f92672">?&amp;gt;&lt;/span>) nativeConnection).&lt;span style="color:#a6e22e">execute&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (RedisCallback&lt;span style="color:#f92672">&amp;lt;&lt;/span>Object&lt;span style="color:#f92672">&amp;gt;&lt;/span>) connection1 &lt;span style="color:#f92672">-&amp;gt;&lt;/span> connection1.&lt;span style="color:#a6e22e">eval&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> script.&lt;span style="color:#a6e22e">getBytes&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> redisTemplate.&lt;span style="color:#a6e22e">getKeySerializer&lt;/span>(), &lt;span style="color:#f92672">/&lt;/span> Use custom Key serializer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> redisTemplate.&lt;span style="color:#a6e22e">getValueSerializer&lt;/span>(), &lt;span style="color:#f92672">/&lt;/span> Use custom Value serializer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Collections.&lt;span style="color:#a6e22e">singletonList&lt;/span>(rateLimitKey.&lt;span style="color:#a6e22e">getBytes&lt;/span>()),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Collections.&lt;span style="color:#a6e22e">singletonList&lt;/span>(String.&lt;span style="color:#a6e22e">valueOf&lt;/span>(timeWindow).&lt;span style="color:#a6e22e">getBytes&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (currentRequests &lt;span style="color:#f92672">&amp;gt;&lt;/span> maxRequests) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String urlWithParams &lt;span style="color:#f92672">=&lt;/span> getRequestUrlWithParams(request);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> logger.&lt;span style="color:#a6e22e">warn&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Rate limit exceeded for key: {}. Request URL with Params: {}&amp;#34;&lt;/span>, 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rateLimitKey, urlWithParams);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> RateLimitException();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> String &lt;span style="color:#a6e22e">getRequestUrlWithParams&lt;/span>(HttpServletRequest request) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String url &lt;span style="color:#f92672">=&lt;/span> request.&lt;span style="color:#a6e22e">getRequestURL&lt;/span>().&lt;span style="color:#a6e22e">toString&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String queryString &lt;span style="color:#f92672">=&lt;/span> request.&lt;span style="color:#a6e22e">getQueryString&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (queryString &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#f92672">!&lt;/span>queryString.&lt;span style="color:#a6e22e">isEmpty&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> url &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;?&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> queryString;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> url;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>调整 &lt;a href="https:/github.com/chensoul/spring-cloud-examples" target="_blank">spring-cloud-examples&lt;/a> 目录，通过源码分析 &lt;a href="https:/github.com/chensoul/spring-cloud-examples/blob/main/lesson-01-bootstrap/SpringBoot%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B.md" target="_blank">SpringBoot 2.7.18 启动过程&lt;/a>&lt;/p></description></item><item><title>2024-02-19｜foodie-cloud集成Sharding Sphere实现读写分离</title><link>https://blog.chensoul.cc/posts/2024/02/19/til/</link><pubDate>Mon, 19 Feb 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/02/19/til/</guid><description>&lt;p>今天做了什么：&lt;/p>
&lt;ol>
&lt;li>重构 foodie-cloud 项目
&lt;ul>
&lt;li>基于 docker 实现数据库配置主从复制，集成 Sharding Sphere 实现读写分离&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol></description></item><item><title>2024-02-05｜Spring Cloud Config快速入门</title><link>https://blog.chensoul.cc/posts/2024/02/05/til/</link><pubDate>Mon, 05 Feb 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/02/05/til/</guid><description>&lt;p>今天做了什么：&lt;/p>
&lt;ol>
&lt;li>创建项目 &lt;a href="https:/github.com/chensoul/spring-cloud-examples" target="_blank">spring-cloud-examples&lt;/a>，测试 &lt;em>Spring Cloud&lt;/em> Config 使用本地文件和 git 仓库作为配置中心&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>&lt;em>Spring Cloud&lt;/em> Config 是一个基于http协议的远程配置实现方式。通过统一的配置管理服务器进行配置管理，客户端通过http协议主动的拉取服务的的配置信息，完成配置获取。&lt;/p></description></item><item><title>2024-02-04｜foodie-cloud集成Resilience4j</title><link>https://blog.chensoul.cc/posts/2024/02/04/til/</link><pubDate>Sun, 04 Feb 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/02/04/til/</guid><description>&lt;p>今天做了什么：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>重构 foodie-cloud 项目&lt;/p>
&lt;ul>
&lt;li>集成 &lt;strong>Resilience4j&lt;/strong>&lt;/li>
&lt;li>修改 README.md 文档&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>阅读博客 &lt;a href="https:/blog.csdn.net/weixin_42189048" target="_blank">https:/blog.csdn.net/weixin_42189048&lt;/a>&lt;/p></description></item><item><title>2024-02-02｜foodie-cloud集成Spring Cloud Config和SpringDoc</title><link>https://blog.chensoul.cc/posts/2024/02/02/til/</link><pubDate>Fri, 02 Feb 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/02/02/til/</guid><description>&lt;p>今天做了什么：&lt;/p>
&lt;ol>
&lt;li>参考 《&lt;a href="https:/download.packt.com/free-ebook/9781805128694" target="_blank">Microservices with Spring Boot 3 and Spring Cloud&lt;/a>》，重构 foodie-cloud 项目
&lt;ul>
&lt;li>
&lt;p>集成 Spring Cloud Config 使用文件保存配置文件&lt;/p></description></item><item><title>2024-01-03｜今天做了什么</title><link>https://blog.chensoul.cc/posts/2024/01/03/til/</link><pubDate>Wed, 03 Jan 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/01/03/til/</guid><description>&lt;p>今天做了什么：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https:/github.com/bingoohuang/idworker-client" target="_blank">idworker-client&lt;/a> ，一个开源的 ID 生成器，适合在单机使用&lt;/li>
&lt;li>github 上创建了一个使用 spring cloud netflix 相关组件的微服务项目&lt;/li>
&lt;li>重构了狂野架构师课程中的微服务版本的源码&lt;/li>
&lt;/ul>
&lt;h1 id="foodie-cloud">foodie-cloud&lt;/h1>
&lt;p>重构慕课网 &lt;a href="https:/class.imooc.com/sale/javaarchitect" target="_blank">Java架构师-技术专家&lt;/a> 课程中的 &lt;a href="https:/github.com/liuhouer/np-architect/" target="_blank">源码&lt;/a>，我做了一些改动：&lt;/p></description></item><item><title>2024-01-02｜雪崩问题、Spring Cloud微服务集成 Sentinel</title><link>https://blog.chensoul.cc/posts/2024/01/02/til/</link><pubDate>Tue, 02 Jan 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/01/02/til/</guid><description>&lt;p>今天做了什么：&lt;/p>
&lt;ul>
&lt;li>雪崩问题&lt;/li>
&lt;li>Spring Cloud微服务集成 Sentinel&lt;/li>
&lt;li>扩展 Sentinel 集成 OpenFeign，实现自动降级&lt;/li>
&lt;/ul>
&lt;h2 id="雪崩问题">雪崩问题&lt;/h2>
&lt;p>1、什么是雪崩问题？&lt;/p></description></item></channel></rss>