<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Spring-Boot on ChenSoul Blog</title><link>https://blog.chensoul.cc/tags/spring-boot/</link><description>Recent content in Spring-Boot on ChenSoul Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Wed, 13 Nov 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.chensoul.cc/tags/spring-boot/index.xml" rel="self" type="application/rss+xml"/><item><title>2024-11-13｜今天我做了什么</title><link>https://blog.chensoul.cc/posts/2024/11/13/til/</link><pubDate>Wed, 13 Nov 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/11/13/til/</guid><description>&lt;h2 id="spring-周报">Spring 周报&lt;/h2>
&lt;p>&lt;a href="https://spring.io/blog/2024/11/12/this-week-in-spring-november-12th-2024" target="_blank">This Week in Spring - November 12th, 2024&lt;/a>&lt;/p></description></item><item><title>2024-11-06｜今天我做了什么</title><link>https://blog.chensoul.cc/posts/2024/11/06/til/</link><pubDate>Wed, 06 Nov 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/11/06/til/</guid><description>&lt;ul>
&lt;li>&lt;a href="https://x.com/david_syer/status/1849839624325157198?s=12" target="_blank">David Syer 博士宣布推出 Spring GRPC 项目&lt;/a>&lt;/li>
&lt;li>Spring Boot 和 GraalVM 原生镜像应用程序，&lt;a href="https://x.com/alina_yurenko/status/1850945616500965809?s=12" target="_blank">由出色的 Oracle GraalVM 开发倡导者 Alina Yurenko演示。&lt;/a>&lt;/li>
&lt;li>《&lt;a href="https://learning.oreilly.com/course/cloud-native-java/9780137834051/" target="_blank">Cloud Native Java with Kubernetes, 2nd Edition&lt;/a>》，代码在 &lt;a href="https://github.com/cloud-native-java-with-k8s-livelessons/packaging-for-production" target="_blank">github&lt;/a> 上&lt;/li>
&lt;li>Junit4 转换为 Junit5：
&lt;ul>
&lt;li>&lt;a href="https://github.com/junit-pioneer/convert-junit4-to-junit5" target="_blank">https://github.com/junit-pioneer/convert-junit4-to-junit5&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.arhohuttunen.com/junit-5-migration/" target="_blank">https://www.arhohuttunen.com/junit-5-migration/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://shivamarora.medium.com/a-guide-to-manage-your-environment-variables-in-a-better-way-using-direnv-2c1cd475c8e" target="_blank">使用 direnv 以更好的方式管理环境变量的指南&lt;/a>，spring-tips 的 &lt;a href="https://github.com/spring-tips/auth0" target="_blank">auth0&lt;/a> 项目中就使用了 direnv&lt;/li>
&lt;li>发现一个使用 SpringBoot 构建微服务的课程 &lt;a href="https://learning.oreilly.com/course/building-microservices-with/9780134192468/" target="_blank">Building Microservices with Spring Boot LiveLessons (Video Training)&lt;/a>，代码在 &lt;a href="https://github.com/livelessons-spring/building-microservices" target="_blank">github&lt;/a> 上可以找到。&lt;strong>需要注意的是里面的 Sprint Boot 和 Spring Cloud 的版本依赖比较旧。&lt;/strong>&lt;/li>
&lt;li>如何学习新技术？油管上有一个视频 &lt;a href="https://www.youtube.com/watch?v=oOAaGvpQTCo" target="_blank">How do I upskill myself, and what tools &amp;amp; techniques do I use?&lt;/a>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/oOAaGvpQTCo?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video">&lt;/iframe>
 &lt;/div>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>我的学习过程：&lt;/p></description></item><item><title>2024-11-04｜SivaLabs博客文章</title><link>https://blog.chensoul.cc/posts/2024/11/04/sivalabs-blog-posts/</link><pubDate>Mon, 04 Nov 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/11/04/sivalabs-blog-posts/</guid><description>&lt;p>以下是 &lt;a href="https://www.sivalabs.in/" target="_blank">SivaLabs 博客&lt;/a> 中的一些文章，记录在此，方便后面阅读。&lt;/p>
&lt;ul>
&lt;li>如果你正在寻找使用 SpringBoot 实现微服务的详细实用指南，那么 &lt;a href="https://www.marcobehler.com/guides/java-microservices-a-practical-guide" target="_blank">Java 微服务：实用指南就是你的最佳选择&lt;/a>&lt;/li>
&lt;li>在使用 JPA 时，我们多少次希望看到使用实际参数值而不是占位符生成的 SQL 查询？我们可以使用&lt;a href="https://github.com/gavlyukovskiy/spring-boot-data-source-decorator" target="_blank">p6spy-spring-boot-starter&lt;/a>来记录使用实际参数生成的 SQL 语句。&lt;/li>
&lt;li>如果你刚刚开始使用&lt;strong>GitHub Actions&lt;/strong>或考虑从&lt;strong>TravisCI&lt;/strong>迁移，那么 &lt;a href="https://medium.com/faun/continuous-integration-of-java-project-with-github-actions-7a8a0e8246ef" target="_blank">使用 GitHub Actions 进行 Java 项目的持续集成&lt;/a>&lt;/li>
&lt;li>您可能听说过&lt;strong>六边形架构&lt;/strong>，并且想知道如何使用 Spring 实现它，那么本文适合您。利用 &lt;a href="https://rskupnik.github.io/framework-independence-with-hexagonal-architecture" target="_blank">接口和六边形架构的力量实现独立于框架的禅宗&lt;/a>&lt;/li>
&lt;li>&lt;strong>Docker&lt;/strong>已成为日常工作的一部分，有时我们想清理一些不必要的东西。 &lt;a href="https://linuxize.com/post/how-to-remove-docker-images-containers-volumes-and-networks/" target="_blank">如何删除 Docker 容器、镜像、卷和网络&lt;/a>&lt;/li>
&lt;li>如果你正在尝试学习&lt;strong>在 Kubernetes 上部署 SpringBoot + SpringCloud 应用程序&lt;/strong>，那么我强烈推荐这门课程https://udemy.com/course/kubernetes-crash-course-for-java-developers/ by &lt;strong>Ranga Karanam&lt;/strong> &lt;a href="https://twitter.com/In28Minutes" target="_blank">In28Minutes&lt;/a>。这是一门非常实用和动手的课程，涵盖了从基础到高级主题。&lt;/li>
&lt;li>如果您的应用程序严重依赖&lt;strong>Spring 生态系统&lt;/strong>，您可能还需要遵循&lt;strong>Spring 风格的编码/格式标准&lt;/strong>。在这种情况下，这个&lt;a href="https://github.com/spring-io/spring-javaformat" target="_blank">spring-javaformat-maven-plugin&lt;/a>可能会派上用场。此外，您还可以查看&lt;strong>JHipster&lt;/strong>团队的&lt;a href="https://github.com/jhipster/prettier-java" target="_blank">Prettier Java&lt;/a>。&lt;/li>
&lt;li>&lt;a href="https://rieckpil.de/testing-spring-boot-applications-masterclass/" target="_blank">测试 Spring Boot 应用程序大师课程&lt;/a>。&lt;strong>涵盖了测试典型 SpringBoot 应用程序所需的一切：&lt;/strong> 本课程几乎涵盖了测试 SpringBoot 应用程序的所有内容（ &lt;strong>JUnit5、Mockito、WebLayer、DataLayer、Security、Testcontainers、Wiremock、WebClient、Localstack、Selenide等）。&lt;/strong> 代码仓库：https://github.com/rieckpil/testing-spring-boot-applications-masterclass
&lt;img src="../../../static/images/testing-spring-boot-applications-course-map-gray.webp" alt="Testing Spring Boot Applications Course Map">&lt;/li>
&lt;li>&lt;a href="https://www.sivalabs.in/springboot-application-deployment-monitoring-series/" target="_blank">SpringBoot应用部署与监控系列&lt;/a>。基于书签服务，&lt;strong>使用Prometheus&lt;/strong>和&lt;strong>Grafana&lt;/strong>实现监控，使用&lt;strong>ELK/EFK&lt;/strong>或&lt;strong>Loki&lt;/strong>实现&lt;strong>集中式日志记录&lt;/strong>，在Kubernetes(Minikube)上部署SpringBoot应用，使用 Jenkins CICD&lt;/li>
&lt;li>&lt;a href="https://www.sivalabs.in/getting-started-with-kubernetes/" target="_blank">Kubernetes 入门&lt;/a>。基于 spring boot 部署应用。&lt;/li>
&lt;li>&lt;a href="https://www.sivalabs.in/my-all-time-favourite-20-inspiring-tech-talks/" target="_blank">我最喜欢的 20 场鼓舞人心的技术演讲&lt;/a>。作为软件开发人员，我们渴望通过学习新工具和技术来提高自己。除此之外，我发现听取专家的意见并借鉴他们的经验也是提升自己技能的好方法。&lt;/li>
&lt;li>&lt;a href="https://www.sivalabs.in/spring-boot-3-error-reporting-using-problem-details/" target="_blank">Spring Boot 3：使用 HTTP API 问题详细信息的错误响应&lt;/a>。在本文中，我们将学习如何处理 SpringBoot 3 REST API（使用 Spring Framework 6）中的异常并使用&lt;strong>ProblemDetails&lt;/strong> API 提供错误响应。&lt;/li>
&lt;li>&lt;a href="https://www.sivalabs.in/get-super-productive-with-intellij-file-templates/" target="_blank">使用 Intellij 文件模板提高工作效率&lt;/a>&lt;/li>
&lt;li>如果您正在考虑如何更好地构建代码，那么我强烈建议您观看 &lt;a href="https://www.youtube.com/watch?v=9COWKz1E32w" target="_blank">有关 CQRS 的事实与神话 • Oskar Dudycz • Devoxx Poland 2023 的&lt;/a>演讲。&lt;/li>
&lt;li>&lt;a href="https://www.sivalabs.in/my-life-as-software-developer-in-india/" target="_blank">我在印度作为软件开发人员的生活&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.sivalabs.in/ci-cd-springboot-applications-using-travis-ci/" target="_blank">使用 Travis-CI 为 SpringBoot 应用程序进行 CI/CD&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.sivalabs.in/spring-boot-best-practices/" target="_blank">SpringBoot 最佳实践&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.sivalabs.in/kafka-tutorial-java-producer-consumer/" target="_blank">Kafka 教程 - Java 生产者和消费者&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.sivalabs.in/kafka-tutorial-producer-consumer-using-spring-boot/" target="_blank">Kafka 教程 - 使用 SpringBoot 的生产者和消费者&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.sivalabs.in/spring-boot-testing/" target="_blank">测试 SpringBoot 应用程序&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.sivalabs.in/creating-yeoman-based-springboot-generator/" target="_blank">创建基于 Yeoman 的 SpringBoot Generator&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.sivalabs.in/impose-architecture-guidelines-using-archunit/" target="_blank">使用 ArchUnit 实施代码结构指南&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.sivalabs.in/all-the-resources-you-ever-need-as-a-java-spring-application-developer/" target="_blank">作为 Java 和 Spring 应用程序开发人员所需的所有资源&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="yeoman-和代码生成器">yeoman 和代码生成器&lt;/h2>
&lt;p>Yeoman ( &lt;a href="http://yeoman.io/" target="_blank">http://yeoman.io/&lt;/a> ) 通过使用 bower、grunt 或 gulp 自动执行各种任务，可以轻松开发前端应用程序。&lt;/p></description></item><item><title>[译]测试 Spring Boot 应用程序：最佳实践和框架</title><link>https://blog.chensoul.cc/posts/2024/10/14/testing-spring-boot-applications-best-practices-and-frameworks/</link><pubDate>Mon, 14 Oct 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/10/14/testing-spring-boot-applications-best-practices-and-frameworks/</guid><description>&lt;p>测试是软件开发不可或缺的一部分。它可确保您的 Spring Boot 应用程序按预期运行，并在不断发展的过程中继续保持这种状态。在本文中，我们将探讨如何使用最佳实践和工具测试 Spring Boot 应用程序。&lt;/p></description></item><item><title>Spring Boot集成SpringDoc生成Api文档</title><link>https://blog.chensoul.cc/posts/2024/07/10/springdoc-with-spring-boot/</link><pubDate>Wed, 10 Jul 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/07/10/springdoc-with-spring-boot/</guid><description>&lt;p>以下以 Maven 为例介绍 Spring Boot集成SpringDoc生成Api文档。&lt;/p>
&lt;ol>
&lt;li>添加依赖&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;groupId&amp;gt;&lt;/span>org.springdoc&lt;span style="color:#f92672">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;artifactId&amp;gt;&lt;/span>springdoc-openapi-starter-webmvc-ui&lt;span style="color:#f92672">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>配置 annotationProcessor，实现通过 javadoc 生成文档。&lt;/li>
&lt;/ol>
&lt;p>每个 maven 模块都需要配置：&lt;/p></description></item><item><title>使用 Docker 容器化并运行 Spring Boot 应用程序</title><link>https://blog.chensoul.cc/posts/2024/07/09/docker-for-spring-boot/</link><pubDate>Tue, 09 Jul 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/07/09/docker-for-spring-boot/</guid><description>&lt;blockquote>
&lt;p>本文翻译自 Docker 官方网站的《&lt;a href="https://docs.docker.com/guides/java/" target="_blank">Java language-specific guide&lt;/a>》文章，并做了一些改动。&lt;/p>&lt;/blockquote>
&lt;p>Java 入门指南教您如何使用 Docker 创建容器化的 Spring Boot 应用程序。在本模块中，您将学习如何：&lt;/p></description></item><item><title>Spring Boot项目创建Docker镜像并运行应用</title><link>https://blog.chensoul.cc/posts/2024/06/06/spring-boot-docker-image/</link><pubDate>Thu, 06 Jun 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/06/06/spring-boot-docker-image/</guid><description>&lt;h2 id="手动创建-dockerfile">手动创建 Dockerfile&lt;/h2>
&lt;p>在您的 Spring Boot 项目根目录下创建一个名为 &lt;code>Dockerfile&lt;/code> 的文件，并添加以下内容:&lt;/p></description></item><item><title>[译]使用 Spring Boot 构建 RESTful API：集成 DDD 和六边形架构</title><link>https://blog.chensoul.cc/posts/2024/05/30/building-a-restful-api-with-spring-boot-integrating-ddd-and-hexagonal-architecture/</link><pubDate>Thu, 30 May 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/05/30/building-a-restful-api-with-spring-boot-integrating-ddd-and-hexagonal-architecture/</guid><description>&lt;p>原文链接：&lt;a href="https://medium.com/@juannegrin/building-a-restful-api-with-spring-boot-integrating-ddd-and-hexagonal-architecture-df50fe24a1ff" target="_blank">Building a RESTful API with Spring Boot: Integrating DDD and Hexagonal Architecture&lt;/a>&lt;/p></description></item><item><title>2024-01-17｜MySQL 主从复制、ShardingJDBC实现读写分离、集成Springdoc+Javadoc</title><link>https://blog.chensoul.cc/posts/2024/01/17/til/</link><pubDate>Wed, 17 Jan 2024 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2024/01/17/til/</guid><description>&lt;p>今天做了什么：&lt;/p>
&lt;ul>
&lt;li>观看《2022年黑马程序员新版java课程》中 MySQL 主从复制和读写分离相关视频，使用 Docker 搭建 MySQL 主从复制环境。&lt;/li>
&lt;li>foodie-cloud 项目实现读写分离并集成 Springdoc&lt;/li>
&lt;/ul>
&lt;h2 id="docker-搭建-mysql-主从复制环境">Docker 搭建 MySQL 主从复制环境&lt;/h2>
&lt;p>参考文章 ：&lt;a href="https://learnku.com/articles/30439" target="_blank">基于 Docker 的 MySQL 主从复制搭建及原理（真正弄懂）&lt;/a>&lt;/p></description></item><item><title>[译]Spring Boot3和Spring6中的新特性</title><link>https://blog.chensoul.cc/posts/2023/10/13/new-features-in-spring-boot-3-and-spring-6/</link><pubDate>Fri, 13 Oct 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/10/13/new-features-in-spring-boot-3-and-spring-6/</guid><description>&lt;p>Spring Boot 3.0 于 2022 年 11 月正式发布，包含一些新功能和改进。这是继大约 4.5 年前发布 Spring Boot 2.0 后 Spring Boot 的第一个主要版本。它也是第一个支持 Spring Framework 6.0 的 Spring Boot GA 版本。作为开发人员，我们需要了解这些更新，才能顺利使用 Spring Boot。毫无疑问，新版本中最大的转变之一是放弃了对旧版本 Java 的支持。&lt;/p></description></item><item><title>[译]REST API 的自定义错误消息处理</title><link>https://blog.chensoul.cc/posts/2023/08/25/global-error-handler-in-a-spring-rest-api/</link><pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/25/global-error-handler-in-a-spring-rest-api/</guid><description>&lt;h2 id="1-概述">1. 概述&lt;/h2>
&lt;p>在本教程中，我们将讨论如何为 Spring REST API 实现全局错误处理程序。&lt;/p></description></item><item><title>[译]如何在Spring中执行@Async</title><link>https://blog.chensoul.cc/posts/2023/08/25/spring-async/</link><pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/25/spring-async/</guid><description>&lt;h2 id="1-概述">1. 概述&lt;/h2>
&lt;p>在本教程中，我们将探讨 Spring 中的异步执行支持和 &lt;code>@Async&lt;/code> 注解。&lt;/p></description></item><item><title>[译]使用Spring进行REST的错误处理</title><link>https://blog.chensoul.cc/posts/2023/08/25/exception-handling-for-rest-with-spring/</link><pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/25/exception-handling-for-rest-with-spring/</guid><description>&lt;h2 id="1-概述">1. 概述&lt;/h2>
&lt;p>本教程将说明如何使用 Spring 为 REST API 实现异常处理。我们还将获得一些历史概述，并了解不同版本引入了哪些新选项。&lt;/p></description></item><item><title>[译]深入了解Spring事务管理：@Transactional</title><link>https://blog.chensoul.cc/posts/2023/08/16/spring-transaction-management-transactional-in-depth/</link><pubDate>Wed, 16 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/16/spring-transaction-management-transactional-in-depth/</guid><description>&lt;p>您可以使用本指南来简单实用地了解 Spring 使用 @Transactional 注释进行事务管理的工作原理。&lt;/p>
&lt;p>唯一的先决条件？您需要对 ACID 有一个粗略的了解，即什么是数据库事务以及为什么使用它们。此外，这里不讨论分布式事务或反应式事务，但就 Spring 而言，一般原则仍然适用。&lt;/p></description></item><item><title>[译]为 Spring Boot 应用程序创建优化的 Docker 映像</title><link>https://blog.chensoul.cc/posts/2023/08/16/spring-boot-docker/</link><pubDate>Wed, 16 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/08/16/spring-boot-docker/</guid><description>&lt;p>容器已成为打包具有所有软件和操作系统依赖项的应用程序，然后将其传送到不同环境的首选方式。&lt;/p>
&lt;p>本文着眼于容器化 Spring Boot 应用程序的不同方法：&lt;/p>
&lt;ul>
&lt;li>使用 Docker 文件构建 Docker 镜像，&lt;/li>
&lt;li>使用 Cloud-Native Buildpack 从源代码构建 OCI 映像，&lt;/li>
&lt;li>通过使用分层工具将 JAR 的各个部分拆分为不同的层，在运行时优化映像。&lt;/li>
&lt;/ul>
&lt;h2 id="示例代码">示例代码&lt;/h2>
&lt;p>本文附有 &lt;a href="https://github.com/thombergs/code-examples/tree/master/spring-boot/spring-boot-docker" target="_blank">GitHub&lt;/a> 上的工作代码示例。&lt;/p></description></item><item><title>[译]Spring Boot异常处理完整指南</title><link>https://blog.chensoul.cc/posts/2023/07/26/spring-boot-exception-handling/</link><pubDate>Wed, 26 Jul 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/07/26/spring-boot-exception-handling/</guid><description>&lt;p>处理异常是构建健壮应用程序的重要部分。 Spring Boot 提供了不止一种方法。&lt;/p>
&lt;p>本文将探讨这些方法，并提供一些关于何时某种给定方法可能优于另一种方法的指导。&lt;/p>
&lt;h2 id="示例代码">示例代码&lt;/h2>
&lt;p>本文附有 GitHub 上的工作&lt;a href="https://github.com/thombergs/code-examples/tree/master/spring-boot/exception-handling" target="_blank">代码示例&lt;/a>。&lt;/p></description></item><item><title>[译]使用 Spring 的 Null-Safety 注解保护您的代码免受 NullPointerExceptions 的影响</title><link>https://blog.chensoul.cc/posts/2023/07/26/spring-boot-null-safety-annotations/</link><pubDate>Wed, 26 Jul 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/07/26/spring-boot-null-safety-annotations/</guid><description>&lt;p>&lt;code>NullPointerExceptions&lt;/code> （通常缩写为“NPE”）对于每个 Java 程序员来说都是一场噩梦。&lt;/p>
&lt;p>我们可以在互联网上找到大量解释如何编写空安全代码的文章。空安全确保我们在代码中添加了适当的检查，以保证对象引用不能为空，或者毕竟在对象为空时采取可能的安全措施。&lt;/p>
&lt;p>由于 &lt;code>NullPointerException&lt;/code> 是一个运行时异常，因此在代码编译过程中很难找出这种情况。 Java 的类型系统没有办法快速消除危险的空对象引用。&lt;/p></description></item><item><title>[译]使用Spring Boot Actuator公开有用的信息端点</title><link>https://blog.chensoul.cc/posts/2023/07/26/spring-boot-info-endpoint/</link><pubDate>Wed, 26 Jul 2023 00:00:00 +0000</pubDate><guid>https://blog.chensoul.cc/posts/2023/07/26/spring-boot-info-endpoint/</guid><description>&lt;p>在分布式、快节奏的环境中，开发团队通常希望了解他们部署应用程序的时间、部署的应用程序版本、部署的 Git 提交等等。&lt;/p>
&lt;p>Spring Boot Actuator 帮助我们监控和管理应用程序。它公开了提供应用程序运行状况、指标和其他相关信息的各种端点。&lt;/p></description></item></channel></rss>